// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	"github.com/berachain/beacon-kit/consensus-types/types"
	"github.com/berachain/beacon-kit/storage/block"
	statedb "github.com/berachain/beacon-kit/state-transition/core/state"
	depositdb "github.com/berachain/beacon-kit/storage/deposit"
	mock "github.com/stretchr/testify/mock"
	dastore "github.com/berachain/beacon-kit/da/store"
)

// StorageBackend is an autogenerated mock type for the StorageBackend type
<<<<<<< HEAD
type StorageBackend struct {
	mock.Mock
}

type StorageBackend_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageBackend) EXPECT() *StorageBackend_Expecter {
	return &StorageBackend_Expecter{mock: &_m.Mock}
}

// AvailabilityStore provides a mock function with given fields:
func (_m *StorageBackend) AvailabilityStore() *dastore.Store {
=======
type StorageBackend[AvailabilityStoreT any, BlockStoreT any] struct {
	mock.Mock
}

type StorageBackend_Expecter[AvailabilityStoreT any, BlockStoreT any] struct {
	mock *mock.Mock
}

func (_m *StorageBackend[AvailabilityStoreT, BlockStoreT]) EXPECT() *StorageBackend_Expecter[AvailabilityStoreT, BlockStoreT] {
	return &StorageBackend_Expecter[AvailabilityStoreT, BlockStoreT]{mock: &_m.Mock}
}

// AvailabilityStore provides a mock function with given fields:
func (_m *StorageBackend[AvailabilityStoreT, BlockStoreT]) AvailabilityStore() AvailabilityStoreT {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AvailabilityStore")
	}

	var r0 *dastore.Store
	if rf, ok := ret.Get(0).(func() *dastore.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dastore.Store)
		}
	}

	return r0
}

// StorageBackend_AvailabilityStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailabilityStore'
<<<<<<< HEAD
type StorageBackend_AvailabilityStore_Call struct {
=======
type StorageBackend_AvailabilityStore_Call[AvailabilityStoreT any, BlockStoreT any] struct {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	*mock.Call
}

// AvailabilityStore is a helper method to define mock.On call
<<<<<<< HEAD
func (_e *StorageBackend_Expecter) AvailabilityStore() *StorageBackend_AvailabilityStore_Call {
	return &StorageBackend_AvailabilityStore_Call{Call: _e.mock.On("AvailabilityStore")}
}

func (_c *StorageBackend_AvailabilityStore_Call) Run(run func()) *StorageBackend_AvailabilityStore_Call {
=======
func (_e *StorageBackend_Expecter[AvailabilityStoreT, BlockStoreT]) AvailabilityStore() *StorageBackend_AvailabilityStore_Call[AvailabilityStoreT, BlockStoreT] {
	return &StorageBackend_AvailabilityStore_Call[AvailabilityStoreT, BlockStoreT]{Call: _e.mock.On("AvailabilityStore")}
}

func (_c *StorageBackend_AvailabilityStore_Call[AvailabilityStoreT, BlockStoreT]) Run(run func()) *StorageBackend_AvailabilityStore_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

<<<<<<< HEAD
func (_c *StorageBackend_AvailabilityStore_Call) Return(_a0 *dastore.Store) *StorageBackend_AvailabilityStore_Call {
=======
func (_c *StorageBackend_AvailabilityStore_Call[AvailabilityStoreT, BlockStoreT]) Return(_a0 AvailabilityStoreT) *StorageBackend_AvailabilityStore_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Return(_a0)
	return _c
}

<<<<<<< HEAD
func (_c *StorageBackend_AvailabilityStore_Call) RunAndReturn(run func() *dastore.Store) *StorageBackend_AvailabilityStore_Call {
=======
func (_c *StorageBackend_AvailabilityStore_Call[AvailabilityStoreT, BlockStoreT]) RunAndReturn(run func() AvailabilityStoreT) *StorageBackend_AvailabilityStore_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Return(run)
	return _c
}

// BlockStore provides a mock function with given fields:
<<<<<<< HEAD
func (_m *StorageBackend) BlockStore() *block.KVStore[*types.BeaconBlock] {
=======
func (_m *StorageBackend[AvailabilityStoreT, BlockStoreT]) BlockStore() BlockStoreT {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockStore")
	}

	var r0 *block.KVStore[*types.BeaconBlock]
	if rf, ok := ret.Get(0).(func() *block.KVStore[*types.BeaconBlock]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.KVStore[*types.BeaconBlock])
		}
	}

	return r0
}

// StorageBackend_BlockStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockStore'
<<<<<<< HEAD
type StorageBackend_BlockStore_Call struct {
=======
type StorageBackend_BlockStore_Call[AvailabilityStoreT any, BlockStoreT any] struct {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	*mock.Call
}

// BlockStore is a helper method to define mock.On call
<<<<<<< HEAD
func (_e *StorageBackend_Expecter) BlockStore() *StorageBackend_BlockStore_Call {
	return &StorageBackend_BlockStore_Call{Call: _e.mock.On("BlockStore")}
}

func (_c *StorageBackend_BlockStore_Call) Run(run func()) *StorageBackend_BlockStore_Call {
=======
func (_e *StorageBackend_Expecter[AvailabilityStoreT, BlockStoreT]) BlockStore() *StorageBackend_BlockStore_Call[AvailabilityStoreT, BlockStoreT] {
	return &StorageBackend_BlockStore_Call[AvailabilityStoreT, BlockStoreT]{Call: _e.mock.On("BlockStore")}
}

func (_c *StorageBackend_BlockStore_Call[AvailabilityStoreT, BlockStoreT]) Run(run func()) *StorageBackend_BlockStore_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

<<<<<<< HEAD
func (_c *StorageBackend_BlockStore_Call) Return(_a0 *block.KVStore[*types.BeaconBlock]) *StorageBackend_BlockStore_Call {
=======
func (_c *StorageBackend_BlockStore_Call[AvailabilityStoreT, BlockStoreT]) Return(_a0 BlockStoreT) *StorageBackend_BlockStore_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Return(_a0)
	return _c
}

<<<<<<< HEAD
func (_c *StorageBackend_BlockStore_Call) RunAndReturn(run func() *block.KVStore[*types.BeaconBlock]) *StorageBackend_BlockStore_Call {
=======
func (_c *StorageBackend_BlockStore_Call[AvailabilityStoreT, BlockStoreT]) RunAndReturn(run func() BlockStoreT) *StorageBackend_BlockStore_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Return(run)
	return _c
}

// DepositStore provides a mock function with given fields:
<<<<<<< HEAD
func (_m *StorageBackend) DepositStore() *depositdb.KVStore {
=======
func (_m *StorageBackend[AvailabilityStoreT, BlockStoreT]) DepositStore() *depositdb.KVStore {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DepositStore")
	}

	var r0 *depositdb.KVStore
	if rf, ok := ret.Get(0).(func() *depositdb.KVStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*depositdb.KVStore)
		}
	}

	return r0
}

// StorageBackend_DepositStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DepositStore'
<<<<<<< HEAD
type StorageBackend_DepositStore_Call struct {
=======
type StorageBackend_DepositStore_Call[AvailabilityStoreT any, BlockStoreT any] struct {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	*mock.Call
}

// DepositStore is a helper method to define mock.On call
<<<<<<< HEAD
func (_e *StorageBackend_Expecter) DepositStore() *StorageBackend_DepositStore_Call {
	return &StorageBackend_DepositStore_Call{Call: _e.mock.On("DepositStore")}
}

func (_c *StorageBackend_DepositStore_Call) Run(run func()) *StorageBackend_DepositStore_Call {
=======
func (_e *StorageBackend_Expecter[AvailabilityStoreT, BlockStoreT]) DepositStore() *StorageBackend_DepositStore_Call[AvailabilityStoreT, BlockStoreT] {
	return &StorageBackend_DepositStore_Call[AvailabilityStoreT, BlockStoreT]{Call: _e.mock.On("DepositStore")}
}

func (_c *StorageBackend_DepositStore_Call[AvailabilityStoreT, BlockStoreT]) Run(run func()) *StorageBackend_DepositStore_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

<<<<<<< HEAD
func (_c *StorageBackend_DepositStore_Call) Return(_a0 *depositdb.KVStore) *StorageBackend_DepositStore_Call {
=======
func (_c *StorageBackend_DepositStore_Call[AvailabilityStoreT, BlockStoreT]) Return(_a0 *depositdb.KVStore) *StorageBackend_DepositStore_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Return(_a0)
	return _c
}

<<<<<<< HEAD
func (_c *StorageBackend_DepositStore_Call) RunAndReturn(run func() *depositdb.KVStore) *StorageBackend_DepositStore_Call {
=======
func (_c *StorageBackend_DepositStore_Call[AvailabilityStoreT, BlockStoreT]) RunAndReturn(run func() *depositdb.KVStore) *StorageBackend_DepositStore_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Return(run)
	return _c
}

// StateFromContext provides a mock function with given fields: _a0
<<<<<<< HEAD
func (_m *StorageBackend) StateFromContext(_a0 context.Context) *statedb.StateDB {
=======
func (_m *StorageBackend[AvailabilityStoreT, BlockStoreT]) StateFromContext(_a0 context.Context) *statedb.StateDB {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for StateFromContext")
	}

	var r0 *statedb.StateDB
	if rf, ok := ret.Get(0).(func(context.Context) *statedb.StateDB); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statedb.StateDB)
		}
	}

	return r0
}

// StorageBackend_StateFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateFromContext'
<<<<<<< HEAD
type StorageBackend_StateFromContext_Call struct {
=======
type StorageBackend_StateFromContext_Call[AvailabilityStoreT any, BlockStoreT any] struct {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	*mock.Call
}

// StateFromContext is a helper method to define mock.On call
//   - _a0 context.Context
<<<<<<< HEAD
func (_e *StorageBackend_Expecter) StateFromContext(_a0 interface{}) *StorageBackend_StateFromContext_Call {
	return &StorageBackend_StateFromContext_Call{Call: _e.mock.On("StateFromContext", _a0)}
}

func (_c *StorageBackend_StateFromContext_Call) Run(run func(_a0 context.Context)) *StorageBackend_StateFromContext_Call {
=======
func (_e *StorageBackend_Expecter[AvailabilityStoreT, BlockStoreT]) StateFromContext(_a0 interface{}) *StorageBackend_StateFromContext_Call[AvailabilityStoreT, BlockStoreT] {
	return &StorageBackend_StateFromContext_Call[AvailabilityStoreT, BlockStoreT]{Call: _e.mock.On("StateFromContext", _a0)}
}

func (_c *StorageBackend_StateFromContext_Call[AvailabilityStoreT, BlockStoreT]) Run(run func(_a0 context.Context)) *StorageBackend_StateFromContext_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

<<<<<<< HEAD
func (_c *StorageBackend_StateFromContext_Call) Return(_a0 *statedb.StateDB) *StorageBackend_StateFromContext_Call {
=======
func (_c *StorageBackend_StateFromContext_Call[AvailabilityStoreT, BlockStoreT]) Return(_a0 *statedb.StateDB) *StorageBackend_StateFromContext_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Return(_a0)
	return _c
}

<<<<<<< HEAD
func (_c *StorageBackend_StateFromContext_Call) RunAndReturn(run func(context.Context) *statedb.StateDB) *StorageBackend_StateFromContext_Call {
=======
func (_c *StorageBackend_StateFromContext_Call[AvailabilityStoreT, BlockStoreT]) RunAndReturn(run func(context.Context) *statedb.StateDB) *StorageBackend_StateFromContext_Call[AvailabilityStoreT, BlockStoreT] {
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	_c.Call.Return(run)
	return _c
}

// NewStorageBackend creates a new instance of StorageBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
<<<<<<< HEAD
func NewStorageBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageBackend {
	mock := &StorageBackend{}
=======
func NewStorageBackend[AvailabilityStoreT any, BlockStoreT any](t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageBackend[AvailabilityStoreT, BlockStoreT] {
	mock := &StorageBackend[AvailabilityStoreT, BlockStoreT]{}
>>>>>>> 8d7cf6f24 (Remove DepositStoreT generic type)
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
