// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// PayloadAttributer is an autogenerated mock type for the PayloadAttributer type
type PayloadAttributer[PayloadAttributesT interface{}] struct {
	mock.Mock
}

type PayloadAttributer_Expecter[PayloadAttributesT interface{}] struct {
	mock *mock.Mock
}

func (_m *PayloadAttributer[PayloadAttributesT]) EXPECT() *PayloadAttributer_Expecter[PayloadAttributesT] {
	return &PayloadAttributer_Expecter[PayloadAttributesT]{mock: &_m.Mock}
}

// Empty provides a mock function with given fields: _a0
func (_m *PayloadAttributer[PayloadAttributesT]) Empty(_a0 uint32) PayloadAttributesT {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Empty")
	}

	var r0 PayloadAttributesT
	if rf, ok := ret.Get(0).(func(uint32) PayloadAttributesT); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(PayloadAttributesT)
	}

	return r0
}

// PayloadAttributer_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'
type PayloadAttributer_Empty_Call[PayloadAttributesT interface{}] struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
//   - _a0 uint32
func (_e *PayloadAttributer_Expecter[PayloadAttributesT]) Empty(_a0 interface{}) *PayloadAttributer_Empty_Call[PayloadAttributesT] {
	return &PayloadAttributer_Empty_Call[PayloadAttributesT]{Call: _e.mock.On("Empty", _a0)}
}

func (_c *PayloadAttributer_Empty_Call[PayloadAttributesT]) Run(run func(_a0 uint32)) *PayloadAttributer_Empty_Call[PayloadAttributesT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *PayloadAttributer_Empty_Call[PayloadAttributesT]) Return(_a0 PayloadAttributesT) *PayloadAttributer_Empty_Call[PayloadAttributesT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PayloadAttributer_Empty_Call[PayloadAttributesT]) RunAndReturn(run func(uint32) PayloadAttributesT) *PayloadAttributer_Empty_Call[PayloadAttributesT] {
	_c.Call.Return(run)
	return _c
}

// GetSuggestedFeeRecipient provides a mock function with given fields:
func (_m *PayloadAttributer[PayloadAttributesT]) GetSuggestedFeeRecipient() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSuggestedFeeRecipient")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// PayloadAttributer_GetSuggestedFeeRecipient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSuggestedFeeRecipient'
type PayloadAttributer_GetSuggestedFeeRecipient_Call[PayloadAttributesT interface{}] struct {
	*mock.Call
}

// GetSuggestedFeeRecipient is a helper method to define mock.On call
func (_e *PayloadAttributer_Expecter[PayloadAttributesT]) GetSuggestedFeeRecipient() *PayloadAttributer_GetSuggestedFeeRecipient_Call[PayloadAttributesT] {
	return &PayloadAttributer_GetSuggestedFeeRecipient_Call[PayloadAttributesT]{Call: _e.mock.On("GetSuggestedFeeRecipient")}
}

func (_c *PayloadAttributer_GetSuggestedFeeRecipient_Call[PayloadAttributesT]) Run(run func()) *PayloadAttributer_GetSuggestedFeeRecipient_Call[PayloadAttributesT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PayloadAttributer_GetSuggestedFeeRecipient_Call[PayloadAttributesT]) Return(_a0 common.Address) *PayloadAttributer_GetSuggestedFeeRecipient_Call[PayloadAttributesT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PayloadAttributer_GetSuggestedFeeRecipient_Call[PayloadAttributesT]) RunAndReturn(run func() common.Address) *PayloadAttributer_GetSuggestedFeeRecipient_Call[PayloadAttributesT] {
	_c.Call.Return(run)
	return _c
}

// IsEmpty provides a mock function with given fields:
func (_m *PayloadAttributer[PayloadAttributesT]) IsEmpty() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PayloadAttributer_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type PayloadAttributer_IsEmpty_Call[PayloadAttributesT interface{}] struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
func (_e *PayloadAttributer_Expecter[PayloadAttributesT]) IsEmpty() *PayloadAttributer_IsEmpty_Call[PayloadAttributesT] {
	return &PayloadAttributer_IsEmpty_Call[PayloadAttributesT]{Call: _e.mock.On("IsEmpty")}
}

func (_c *PayloadAttributer_IsEmpty_Call[PayloadAttributesT]) Run(run func()) *PayloadAttributer_IsEmpty_Call[PayloadAttributesT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PayloadAttributer_IsEmpty_Call[PayloadAttributesT]) Return(_a0 bool) *PayloadAttributer_IsEmpty_Call[PayloadAttributesT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PayloadAttributer_IsEmpty_Call[PayloadAttributesT]) RunAndReturn(run func() bool) *PayloadAttributer_IsEmpty_Call[PayloadAttributesT] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *PayloadAttributer[PayloadAttributesT]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PayloadAttributer_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type PayloadAttributer_IsNil_Call[PayloadAttributesT interface{}] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *PayloadAttributer_Expecter[PayloadAttributesT]) IsNil() *PayloadAttributer_IsNil_Call[PayloadAttributesT] {
	return &PayloadAttributer_IsNil_Call[PayloadAttributesT]{Call: _e.mock.On("IsNil")}
}

func (_c *PayloadAttributer_IsNil_Call[PayloadAttributesT]) Run(run func()) *PayloadAttributer_IsNil_Call[PayloadAttributesT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PayloadAttributer_IsNil_Call[PayloadAttributesT]) Return(_a0 bool) *PayloadAttributer_IsNil_Call[PayloadAttributesT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PayloadAttributer_IsNil_Call[PayloadAttributesT]) RunAndReturn(run func() bool) *PayloadAttributer_IsNil_Call[PayloadAttributesT] {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields:
func (_m *PayloadAttributer[PayloadAttributesT]) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PayloadAttributer_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type PayloadAttributer_Validate_Call[PayloadAttributesT interface{}] struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *PayloadAttributer_Expecter[PayloadAttributesT]) Validate() *PayloadAttributer_Validate_Call[PayloadAttributesT] {
	return &PayloadAttributer_Validate_Call[PayloadAttributesT]{Call: _e.mock.On("Validate")}
}

func (_c *PayloadAttributer_Validate_Call[PayloadAttributesT]) Run(run func()) *PayloadAttributer_Validate_Call[PayloadAttributesT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PayloadAttributer_Validate_Call[PayloadAttributesT]) Return(_a0 error) *PayloadAttributer_Validate_Call[PayloadAttributesT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PayloadAttributer_Validate_Call[PayloadAttributesT]) RunAndReturn(run func() error) *PayloadAttributer_Validate_Call[PayloadAttributesT] {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *PayloadAttributer[PayloadAttributesT]) Version() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// PayloadAttributer_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type PayloadAttributer_Version_Call[PayloadAttributesT interface{}] struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *PayloadAttributer_Expecter[PayloadAttributesT]) Version() *PayloadAttributer_Version_Call[PayloadAttributesT] {
	return &PayloadAttributer_Version_Call[PayloadAttributesT]{Call: _e.mock.On("Version")}
}

func (_c *PayloadAttributer_Version_Call[PayloadAttributesT]) Run(run func()) *PayloadAttributer_Version_Call[PayloadAttributesT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PayloadAttributer_Version_Call[PayloadAttributesT]) Return(_a0 uint32) *PayloadAttributer_Version_Call[PayloadAttributesT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PayloadAttributer_Version_Call[PayloadAttributesT]) RunAndReturn(run func() uint32) *PayloadAttributer_Version_Call[PayloadAttributesT] {
	_c.Call.Return(run)
	return _c
}

// NewPayloadAttributer creates a new instance of PayloadAttributer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayloadAttributer[PayloadAttributesT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *PayloadAttributer[PayloadAttributesT] {
	mock := &PayloadAttributer[PayloadAttributesT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
