// Code generated by fastssz. DO NOT EDIT.
// Hash: 45cd2e9482c16a8591a5dd1805ea49116722e8d90c3b98a6055e59be1c8dce3d
// Version: 0.1.3
package bet

import (
	"github.com/berachain/beacon-kit/mod/primitives"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the YapCave2 object
func (y *YapCave2) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(y)
}

// MarshalSSZTo ssz marshals the YapCave2 object to a target array
func (y *YapCave2) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Item2'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Item2'
	if size := len(y.Item2); size > 16 {
		err = ssz.ErrListTooBigFn("YapCave2.Item2", size, 16)
		return
	}
	for ii := 0; ii < len(y.Item2); ii++ {
		if dst, err = y.Item2[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the YapCave2 object
func (y *YapCave2) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Item2'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Item2'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 192, 16)
		if err != nil {
			return err
		}
		y.Item2 = make([]*primitives.Deposit, num)
		for ii := 0; ii < num; ii++ {
			if y.Item2[ii] == nil {
				y.Item2[ii] = new(primitives.Deposit)
			}
			if err = y.Item2[ii].UnmarshalSSZ(buf[ii*192 : (ii+1)*192]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the YapCave2 object
func (y *YapCave2) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Item2'
	size += len(y.Item2) * 192

	return
}

// HashTreeRoot ssz hashes the YapCave2 object
func (y *YapCave2) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(y)
}

// HashTreeRootWith ssz hashes the YapCave2 object with a hasher
func (y *YapCave2) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Item2'
	{
		subIndx := hh.Index()
		num := uint64(len(y.Item2))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range y.Item2 {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the YapCave2 object
func (y *YapCave2) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(y)
}
