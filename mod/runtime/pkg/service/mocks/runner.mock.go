// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Runner is an autogenerated mock type for the Runner type
type Runner[ProcessorT interface{}] struct {
	mock.Mock
}

type Runner_Expecter[ProcessorT interface{}] struct {
	mock *mock.Mock
}

func (_m *Runner[ProcessorT]) EXPECT() *Runner_Expecter[ProcessorT] {
	return &Runner_Expecter[ProcessorT]{mock: &_m.Mock}
}

// AttachProcessor provides a mock function with given fields: _a0
func (_m *Runner[ProcessorT]) AttachProcessor(_a0 ProcessorT) {
	_m.Called(_a0)
}

// Runner_AttachProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachProcessor'
type Runner_AttachProcessor_Call[ProcessorT interface{}] struct {
	*mock.Call
}

// AttachProcessor is a helper method to define mock.On call
//   - _a0 ProcessorT
func (_e *Runner_Expecter[ProcessorT]) AttachProcessor(_a0 interface{}) *Runner_AttachProcessor_Call[ProcessorT] {
	return &Runner_AttachProcessor_Call[ProcessorT]{Call: _e.mock.On("AttachProcessor", _a0)}
}

func (_c *Runner_AttachProcessor_Call[ProcessorT]) Run(run func(_a0 ProcessorT)) *Runner_AttachProcessor_Call[ProcessorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ProcessorT))
	})
	return _c
}

func (_c *Runner_AttachProcessor_Call[ProcessorT]) Return() *Runner_AttachProcessor_Call[ProcessorT] {
	_c.Call.Return()
	return _c
}

func (_c *Runner_AttachProcessor_Call[ProcessorT]) RunAndReturn(run func(ProcessorT)) *Runner_AttachProcessor_Call[ProcessorT] {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Runner[ProcessorT]) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Runner_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Runner_Name_Call[ProcessorT interface{}] struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Runner_Expecter[ProcessorT]) Name() *Runner_Name_Call[ProcessorT] {
	return &Runner_Name_Call[ProcessorT]{Call: _e.mock.On("Name")}
}

func (_c *Runner_Name_Call[ProcessorT]) Run(run func()) *Runner_Name_Call[ProcessorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Runner_Name_Call[ProcessorT]) Return(_a0 string) *Runner_Name_Call[ProcessorT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runner_Name_Call[ProcessorT]) RunAndReturn(run func() string) *Runner_Name_Call[ProcessorT] {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *Runner[ProcessorT]) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Runner_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Runner_Start_Call[ProcessorT interface{}] struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Runner_Expecter[ProcessorT]) Start(ctx interface{}) *Runner_Start_Call[ProcessorT] {
	return &Runner_Start_Call[ProcessorT]{Call: _e.mock.On("Start", ctx)}
}

func (_c *Runner_Start_Call[ProcessorT]) Run(run func(ctx context.Context)) *Runner_Start_Call[ProcessorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Runner_Start_Call[ProcessorT]) Return(_a0 error) *Runner_Start_Call[ProcessorT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runner_Start_Call[ProcessorT]) RunAndReturn(run func(context.Context) error) *Runner_Start_Call[ProcessorT] {
	_c.Call.Return(run)
	return _c
}

// NewRunner creates a new instance of Runner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRunner[ProcessorT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Runner[ProcessorT] {
	mock := &Runner[ProcessorT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
