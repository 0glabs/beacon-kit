// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/berachain/beacon-kit/mod/state-transition/pkg/core"
	mock "github.com/stretchr/testify/mock"

	state "github.com/berachain/beacon-kit/mod/state-transition/pkg/core/state"

	storage "github.com/berachain/beacon-kit/mod/node-api/backend/storage"

	types "github.com/berachain/beacon-kit/mod/node-core/pkg/types"
)

// Backend is an autogenerated mock type for the Backend type
type Backend[AvailabilityStoreT storage.AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT], BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BeaconBlockHeaderT core.BeaconBlockHeader[BeaconBlockHeaderT], BeaconStateT core.BeaconState[BeaconStateT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, StateStoreT, ValidatorT, WithdrawalT], BlobSidecarsT interface{}, BlockStoreT storage.BlockStore[BeaconBlockT], DepositT storage.Deposit, DepositStoreT storage.DepositStore[DepositT], Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, NodeT types.Node, StateStoreT state.KVStore[StateStoreT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT], ValidatorT storage.Validator[WithdrawalCredentialsT], WithdrawalT storage.Withdrawal[WithdrawalT], WithdrawalCredentialsT storage.WithdrawalCredentials] struct {
	mock.Mock
}

type Backend_Expecter[AvailabilityStoreT storage.AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT], BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BeaconBlockHeaderT core.BeaconBlockHeader[BeaconBlockHeaderT], BeaconStateT core.BeaconState[BeaconStateT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, StateStoreT, ValidatorT, WithdrawalT], BlobSidecarsT interface{}, BlockStoreT storage.BlockStore[BeaconBlockT], DepositT storage.Deposit, DepositStoreT storage.DepositStore[DepositT], Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, NodeT types.Node, StateStoreT state.KVStore[StateStoreT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT], ValidatorT storage.Validator[WithdrawalCredentialsT], WithdrawalT storage.Withdrawal[WithdrawalT], WithdrawalCredentialsT storage.WithdrawalCredentials] struct {
	mock *mock.Mock
}

func (_m *Backend[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) EXPECT() *Backend_Expecter[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	return &Backend_Expecter[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]{mock: &_m.Mock}
}

// AttachNode provides a mock function with given fields: node
func (_m *Backend[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) AttachNode(node NodeT) {
	_m.Called(node)
}

// Backend_AttachNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachNode'
type Backend_AttachNode_Call[AvailabilityStoreT storage.AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT], BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BeaconBlockHeaderT core.BeaconBlockHeader[BeaconBlockHeaderT], BeaconStateT core.BeaconState[BeaconStateT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, StateStoreT, ValidatorT, WithdrawalT], BlobSidecarsT interface{}, BlockStoreT storage.BlockStore[BeaconBlockT], DepositT storage.Deposit, DepositStoreT storage.DepositStore[DepositT], Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, NodeT types.Node, StateStoreT state.KVStore[StateStoreT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT], ValidatorT storage.Validator[WithdrawalCredentialsT], WithdrawalT storage.Withdrawal[WithdrawalT], WithdrawalCredentialsT storage.WithdrawalCredentials] struct {
	*mock.Call
}

// AttachNode is a helper method to define mock.On call
//   - node NodeT
func (_e *Backend_Expecter[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) AttachNode(node interface{}) *Backend_AttachNode_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	return &Backend_AttachNode_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]{Call: _e.mock.On("AttachNode", node)}
}

func (_c *Backend_AttachNode_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) Run(run func(node NodeT)) *Backend_AttachNode_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(NodeT))
	})
	return _c
}

func (_c *Backend_AttachNode_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) Return() *Backend_AttachNode_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Return()
	return _c
}

func (_c *Backend_AttachNode_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) RunAndReturn(run func(NodeT)) *Backend_AttachNode_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// AvailabilityStore provides a mock function with given fields: ctx
func (_m *Backend[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) AvailabilityStore(ctx context.Context) AvailabilityStoreT {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AvailabilityStore")
	}

	var r0 AvailabilityStoreT
	if rf, ok := ret.Get(0).(func(context.Context) AvailabilityStoreT); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(AvailabilityStoreT)
	}

	return r0
}

// Backend_AvailabilityStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailabilityStore'
type Backend_AvailabilityStore_Call[AvailabilityStoreT storage.AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT], BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BeaconBlockHeaderT core.BeaconBlockHeader[BeaconBlockHeaderT], BeaconStateT core.BeaconState[BeaconStateT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, StateStoreT, ValidatorT, WithdrawalT], BlobSidecarsT interface{}, BlockStoreT storage.BlockStore[BeaconBlockT], DepositT storage.Deposit, DepositStoreT storage.DepositStore[DepositT], Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, NodeT types.Node, StateStoreT state.KVStore[StateStoreT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT], ValidatorT storage.Validator[WithdrawalCredentialsT], WithdrawalT storage.Withdrawal[WithdrawalT], WithdrawalCredentialsT storage.WithdrawalCredentials] struct {
	*mock.Call
}

// AvailabilityStore is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Backend_Expecter[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) AvailabilityStore(ctx interface{}) *Backend_AvailabilityStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	return &Backend_AvailabilityStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]{Call: _e.mock.On("AvailabilityStore", ctx)}
}

func (_c *Backend_AvailabilityStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) Run(run func(ctx context.Context)) *Backend_AvailabilityStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Backend_AvailabilityStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) Return(_a0 AvailabilityStoreT) *Backend_AvailabilityStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_AvailabilityStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) RunAndReturn(run func(context.Context) AvailabilityStoreT) *Backend_AvailabilityStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// BlockStore provides a mock function with given fields:
func (_m *Backend[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) BlockStore() BlockStoreT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockStore")
	}

	var r0 BlockStoreT
	if rf, ok := ret.Get(0).(func() BlockStoreT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(BlockStoreT)
	}

	return r0
}

// Backend_BlockStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockStore'
type Backend_BlockStore_Call[AvailabilityStoreT storage.AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT], BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BeaconBlockHeaderT core.BeaconBlockHeader[BeaconBlockHeaderT], BeaconStateT core.BeaconState[BeaconStateT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, StateStoreT, ValidatorT, WithdrawalT], BlobSidecarsT interface{}, BlockStoreT storage.BlockStore[BeaconBlockT], DepositT storage.Deposit, DepositStoreT storage.DepositStore[DepositT], Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, NodeT types.Node, StateStoreT state.KVStore[StateStoreT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT], ValidatorT storage.Validator[WithdrawalCredentialsT], WithdrawalT storage.Withdrawal[WithdrawalT], WithdrawalCredentialsT storage.WithdrawalCredentials] struct {
	*mock.Call
}

// BlockStore is a helper method to define mock.On call
func (_e *Backend_Expecter[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) BlockStore() *Backend_BlockStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	return &Backend_BlockStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]{Call: _e.mock.On("BlockStore")}
}

func (_c *Backend_BlockStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) Run(run func()) *Backend_BlockStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Backend_BlockStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) Return(_a0 BlockStoreT) *Backend_BlockStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_BlockStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) RunAndReturn(run func() BlockStoreT) *Backend_BlockStore_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// StateFromContext provides a mock function with given fields: ctx, stateID
func (_m *Backend[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) StateFromContext(ctx context.Context, stateID string) (BeaconStateT, error) {
	ret := _m.Called(ctx, stateID)

	if len(ret) == 0 {
		panic("no return value specified for StateFromContext")
	}

	var r0 BeaconStateT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (BeaconStateT, error)); ok {
		return rf(ctx, stateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) BeaconStateT); ok {
		r0 = rf(ctx, stateID)
	} else {
		r0 = ret.Get(0).(BeaconStateT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_StateFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateFromContext'
type Backend_StateFromContext_Call[AvailabilityStoreT storage.AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT], BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BeaconBlockHeaderT core.BeaconBlockHeader[BeaconBlockHeaderT], BeaconStateT core.BeaconState[BeaconStateT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, StateStoreT, ValidatorT, WithdrawalT], BlobSidecarsT interface{}, BlockStoreT storage.BlockStore[BeaconBlockT], DepositT storage.Deposit, DepositStoreT storage.DepositStore[DepositT], Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, NodeT types.Node, StateStoreT state.KVStore[StateStoreT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT], ValidatorT storage.Validator[WithdrawalCredentialsT], WithdrawalT storage.Withdrawal[WithdrawalT], WithdrawalCredentialsT storage.WithdrawalCredentials] struct {
	*mock.Call
}

// StateFromContext is a helper method to define mock.On call
//   - ctx context.Context
//   - stateID string
func (_e *Backend_Expecter[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) StateFromContext(ctx interface{}, stateID interface{}) *Backend_StateFromContext_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	return &Backend_StateFromContext_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]{Call: _e.mock.On("StateFromContext", ctx, stateID)}
}

func (_c *Backend_StateFromContext_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) Run(run func(ctx context.Context, stateID string)) *Backend_StateFromContext_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Backend_StateFromContext_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) Return(_a0 BeaconStateT, _a1 error) *Backend_StateFromContext_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_StateFromContext_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]) RunAndReturn(run func(context.Context, string) (BeaconStateT, error)) *Backend_StateFromContext_Call[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	_c.Call.Return(run)
	return _c
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend[AvailabilityStoreT storage.AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT], BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BeaconBlockHeaderT core.BeaconBlockHeader[BeaconBlockHeaderT], BeaconStateT core.BeaconState[BeaconStateT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, StateStoreT, ValidatorT, WithdrawalT], BlobSidecarsT interface{}, BlockStoreT storage.BlockStore[BeaconBlockT], DepositT storage.Deposit, DepositStoreT storage.DepositStore[DepositT], Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, NodeT types.Node, StateStoreT state.KVStore[StateStoreT, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT], ValidatorT storage.Validator[WithdrawalCredentialsT], WithdrawalT storage.Withdrawal[WithdrawalT], WithdrawalCredentialsT storage.WithdrawalCredentials](t interface {
	mock.TestingT
	Cleanup(func())
}) *Backend[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT] {
	mock := &Backend[AvailabilityStoreT, BeaconBlockT, BeaconBlockBodyT, BeaconBlockHeaderT, BeaconStateT, BlobSidecarsT, BlockStoreT, DepositT, DepositStoreT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, NodeT, StateStoreT, ValidatorT, WithdrawalT, WithdrawalCredentialsT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
