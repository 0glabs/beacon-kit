// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/ethereum/go-ethereum/common"

	eip4844 "github.com/berachain/beacon-kit/mod/primitives/pkg/eip4844"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
)

// ReadOnlyBeaconBlockBody is an autogenerated mock type for the ReadOnlyBeaconBlockBody type
type ReadOnlyBeaconBlockBody[ExecutionPayloadT interface{}] struct {
	mock.Mock
}

type ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT interface{}] struct {
	mock *mock.Mock
}

func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) EXPECT() *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]{mock: &_m.Mock}
}

// GetBlobKzgCommitments provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) GetBlobKzgCommitments() eip4844.KZGCommitments[common.Hash] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobKzgCommitments")
	}

	var r0 eip4844.KZGCommitments[common.Hash]
	if rf, ok := ret.Get(0).(func() eip4844.KZGCommitments[common.Hash]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eip4844.KZGCommitments[common.Hash])
		}
	}

	return r0
}

// ReadOnlyBeaconBlockBody_GetBlobKzgCommitments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobKzgCommitments'
type ReadOnlyBeaconBlockBody_GetBlobKzgCommitments_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetBlobKzgCommitments is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) GetBlobKzgCommitments() *ReadOnlyBeaconBlockBody_GetBlobKzgCommitments_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_GetBlobKzgCommitments_Call[ExecutionPayloadT]{Call: _e.mock.On("GetBlobKzgCommitments")}
}

func (_c *ReadOnlyBeaconBlockBody_GetBlobKzgCommitments_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_GetBlobKzgCommitments_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetBlobKzgCommitments_Call[ExecutionPayloadT]) Return(_a0 eip4844.KZGCommitments[common.Hash]) *ReadOnlyBeaconBlockBody_GetBlobKzgCommitments_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetBlobKzgCommitments_Call[ExecutionPayloadT]) RunAndReturn(run func() eip4844.KZGCommitments[common.Hash]) *ReadOnlyBeaconBlockBody_GetBlobKzgCommitments_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetDeposits provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) GetDeposits() []*types.Deposit {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeposits")
	}

	var r0 []*types.Deposit
	if rf, ok := ret.Get(0).(func() []*types.Deposit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Deposit)
		}
	}

	return r0
}

// ReadOnlyBeaconBlockBody_GetDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeposits'
type ReadOnlyBeaconBlockBody_GetDeposits_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetDeposits is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) GetDeposits() *ReadOnlyBeaconBlockBody_GetDeposits_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_GetDeposits_Call[ExecutionPayloadT]{Call: _e.mock.On("GetDeposits")}
}

func (_c *ReadOnlyBeaconBlockBody_GetDeposits_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_GetDeposits_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetDeposits_Call[ExecutionPayloadT]) Return(_a0 []*types.Deposit) *ReadOnlyBeaconBlockBody_GetDeposits_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetDeposits_Call[ExecutionPayloadT]) RunAndReturn(run func() []*types.Deposit) *ReadOnlyBeaconBlockBody_GetDeposits_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetEth1Data provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) GetEth1Data() *types.Eth1Data {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1Data")
	}

	var r0 *types.Eth1Data
	if rf, ok := ret.Get(0).(func() *types.Eth1Data); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Eth1Data)
		}
	}

	return r0
}

// ReadOnlyBeaconBlockBody_GetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1Data'
type ReadOnlyBeaconBlockBody_GetEth1Data_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetEth1Data is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) GetEth1Data() *ReadOnlyBeaconBlockBody_GetEth1Data_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_GetEth1Data_Call[ExecutionPayloadT]{Call: _e.mock.On("GetEth1Data")}
}

func (_c *ReadOnlyBeaconBlockBody_GetEth1Data_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_GetEth1Data_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetEth1Data_Call[ExecutionPayloadT]) Return(_a0 *types.Eth1Data) *ReadOnlyBeaconBlockBody_GetEth1Data_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetEth1Data_Call[ExecutionPayloadT]) RunAndReturn(run func() *types.Eth1Data) *ReadOnlyBeaconBlockBody_GetEth1Data_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetExecutionPayload provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) GetExecutionPayload() ExecutionPayloadT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionPayload")
	}

	var r0 ExecutionPayloadT
	if rf, ok := ret.Get(0).(func() ExecutionPayloadT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ExecutionPayloadT)
	}

	return r0
}

// ReadOnlyBeaconBlockBody_GetExecutionPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionPayload'
type ReadOnlyBeaconBlockBody_GetExecutionPayload_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetExecutionPayload is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) GetExecutionPayload() *ReadOnlyBeaconBlockBody_GetExecutionPayload_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_GetExecutionPayload_Call[ExecutionPayloadT]{Call: _e.mock.On("GetExecutionPayload")}
}

func (_c *ReadOnlyBeaconBlockBody_GetExecutionPayload_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_GetExecutionPayload_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetExecutionPayload_Call[ExecutionPayloadT]) Return(_a0 ExecutionPayloadT) *ReadOnlyBeaconBlockBody_GetExecutionPayload_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetExecutionPayload_Call[ExecutionPayloadT]) RunAndReturn(run func() ExecutionPayloadT) *ReadOnlyBeaconBlockBody_GetExecutionPayload_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetGraffiti provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) GetGraffiti() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGraffiti")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// ReadOnlyBeaconBlockBody_GetGraffiti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGraffiti'
type ReadOnlyBeaconBlockBody_GetGraffiti_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetGraffiti is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) GetGraffiti() *ReadOnlyBeaconBlockBody_GetGraffiti_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_GetGraffiti_Call[ExecutionPayloadT]{Call: _e.mock.On("GetGraffiti")}
}

func (_c *ReadOnlyBeaconBlockBody_GetGraffiti_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_GetGraffiti_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetGraffiti_Call[ExecutionPayloadT]) Return(_a0 bytes.B32) *ReadOnlyBeaconBlockBody_GetGraffiti_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetGraffiti_Call[ExecutionPayloadT]) RunAndReturn(run func() bytes.B32) *ReadOnlyBeaconBlockBody_GetGraffiti_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetRandaoReveal provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) GetRandaoReveal() bytes.B96 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRandaoReveal")
	}

	var r0 bytes.B96
	if rf, ok := ret.Get(0).(func() bytes.B96); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B96)
		}
	}

	return r0
}

// ReadOnlyBeaconBlockBody_GetRandaoReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandaoReveal'
type ReadOnlyBeaconBlockBody_GetRandaoReveal_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetRandaoReveal is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) GetRandaoReveal() *ReadOnlyBeaconBlockBody_GetRandaoReveal_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_GetRandaoReveal_Call[ExecutionPayloadT]{Call: _e.mock.On("GetRandaoReveal")}
}

func (_c *ReadOnlyBeaconBlockBody_GetRandaoReveal_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_GetRandaoReveal_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetRandaoReveal_Call[ExecutionPayloadT]) Return(_a0 bytes.B96) *ReadOnlyBeaconBlockBody_GetRandaoReveal_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetRandaoReveal_Call[ExecutionPayloadT]) RunAndReturn(run func() bytes.B96) *ReadOnlyBeaconBlockBody_GetRandaoReveal_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetTopLevelRoots provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) GetTopLevelRoots() ([][32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopLevelRoots")
	}

	var r0 [][32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([][32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [][32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconBlockBody_GetTopLevelRoots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopLevelRoots'
type ReadOnlyBeaconBlockBody_GetTopLevelRoots_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetTopLevelRoots is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) GetTopLevelRoots() *ReadOnlyBeaconBlockBody_GetTopLevelRoots_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_GetTopLevelRoots_Call[ExecutionPayloadT]{Call: _e.mock.On("GetTopLevelRoots")}
}

func (_c *ReadOnlyBeaconBlockBody_GetTopLevelRoots_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_GetTopLevelRoots_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetTopLevelRoots_Call[ExecutionPayloadT]) Return(_a0 [][32]byte, _a1 error) *ReadOnlyBeaconBlockBody_GetTopLevelRoots_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_GetTopLevelRoots_Call[ExecutionPayloadT]) RunAndReturn(run func() ([][32]byte, error)) *ReadOnlyBeaconBlockBody_GetTopLevelRoots_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconBlockBody_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type ReadOnlyBeaconBlockBody_HashTreeRoot_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) HashTreeRoot() *ReadOnlyBeaconBlockBody_HashTreeRoot_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_HashTreeRoot_Call[ExecutionPayloadT]{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *ReadOnlyBeaconBlockBody_HashTreeRoot_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_HashTreeRoot_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_HashTreeRoot_Call[ExecutionPayloadT]) Return(_a0 [32]byte, _a1 error) *ReadOnlyBeaconBlockBody_HashTreeRoot_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_HashTreeRoot_Call[ExecutionPayloadT]) RunAndReturn(run func() ([32]byte, error)) *ReadOnlyBeaconBlockBody_HashTreeRoot_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReadOnlyBeaconBlockBody_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type ReadOnlyBeaconBlockBody_IsNil_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) IsNil() *ReadOnlyBeaconBlockBody_IsNil_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_IsNil_Call[ExecutionPayloadT]{Call: _e.mock.On("IsNil")}
}

func (_c *ReadOnlyBeaconBlockBody_IsNil_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_IsNil_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_IsNil_Call[ExecutionPayloadT]) Return(_a0 bool) *ReadOnlyBeaconBlockBody_IsNil_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_IsNil_Call[ExecutionPayloadT]) RunAndReturn(run func() bool) *ReadOnlyBeaconBlockBody_IsNil_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconBlockBody_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type ReadOnlyBeaconBlockBody_MarshalSSZ_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) MarshalSSZ() *ReadOnlyBeaconBlockBody_MarshalSSZ_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_MarshalSSZ_Call[ExecutionPayloadT]{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *ReadOnlyBeaconBlockBody_MarshalSSZ_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_MarshalSSZ_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_MarshalSSZ_Call[ExecutionPayloadT]) Return(_a0 []byte, _a1 error) *ReadOnlyBeaconBlockBody_MarshalSSZ_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_MarshalSSZ_Call[ExecutionPayloadT]) RunAndReturn(run func() ([]byte, error)) *ReadOnlyBeaconBlockBody_MarshalSSZ_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZTo provides a mock function with given fields: _a0
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) MarshalSSZTo(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZTo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconBlockBody_MarshalSSZTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZTo'
type ReadOnlyBeaconBlockBody_MarshalSSZTo_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// MarshalSSZTo is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) MarshalSSZTo(_a0 interface{}) *ReadOnlyBeaconBlockBody_MarshalSSZTo_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_MarshalSSZTo_Call[ExecutionPayloadT]{Call: _e.mock.On("MarshalSSZTo", _a0)}
}

func (_c *ReadOnlyBeaconBlockBody_MarshalSSZTo_Call[ExecutionPayloadT]) Run(run func(_a0 []byte)) *ReadOnlyBeaconBlockBody_MarshalSSZTo_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_MarshalSSZTo_Call[ExecutionPayloadT]) Return(_a0 []byte, _a1 error) *ReadOnlyBeaconBlockBody_MarshalSSZTo_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_MarshalSSZTo_Call[ExecutionPayloadT]) RunAndReturn(run func([]byte) ([]byte, error)) *ReadOnlyBeaconBlockBody_MarshalSSZTo_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// SizeSSZ provides a mock function with given fields:
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) SizeSSZ() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeSSZ")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ReadOnlyBeaconBlockBody_SizeSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SizeSSZ'
type ReadOnlyBeaconBlockBody_SizeSSZ_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// SizeSSZ is a helper method to define mock.On call
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) SizeSSZ() *ReadOnlyBeaconBlockBody_SizeSSZ_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_SizeSSZ_Call[ExecutionPayloadT]{Call: _e.mock.On("SizeSSZ")}
}

func (_c *ReadOnlyBeaconBlockBody_SizeSSZ_Call[ExecutionPayloadT]) Run(run func()) *ReadOnlyBeaconBlockBody_SizeSSZ_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_SizeSSZ_Call[ExecutionPayloadT]) Return(_a0 int) *ReadOnlyBeaconBlockBody_SizeSSZ_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_SizeSSZ_Call[ExecutionPayloadT]) RunAndReturn(run func() int) *ReadOnlyBeaconBlockBody_SizeSSZ_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: _a0
func (_m *ReadOnlyBeaconBlockBody[ExecutionPayloadT]) UnmarshalSSZ(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadOnlyBeaconBlockBody_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type ReadOnlyBeaconBlockBody_UnmarshalSSZ_Call[ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ReadOnlyBeaconBlockBody_Expecter[ExecutionPayloadT]) UnmarshalSSZ(_a0 interface{}) *ReadOnlyBeaconBlockBody_UnmarshalSSZ_Call[ExecutionPayloadT] {
	return &ReadOnlyBeaconBlockBody_UnmarshalSSZ_Call[ExecutionPayloadT]{Call: _e.mock.On("UnmarshalSSZ", _a0)}
}

func (_c *ReadOnlyBeaconBlockBody_UnmarshalSSZ_Call[ExecutionPayloadT]) Run(run func(_a0 []byte)) *ReadOnlyBeaconBlockBody_UnmarshalSSZ_Call[ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_UnmarshalSSZ_Call[ExecutionPayloadT]) Return(_a0 error) *ReadOnlyBeaconBlockBody_UnmarshalSSZ_Call[ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadOnlyBeaconBlockBody_UnmarshalSSZ_Call[ExecutionPayloadT]) RunAndReturn(run func([]byte) error) *ReadOnlyBeaconBlockBody_UnmarshalSSZ_Call[ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// NewReadOnlyBeaconBlockBody creates a new instance of ReadOnlyBeaconBlockBody. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadOnlyBeaconBlockBody[ExecutionPayloadT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadOnlyBeaconBlockBody[ExecutionPayloadT] {
	mock := &ReadOnlyBeaconBlockBody[ExecutionPayloadT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
