// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package v2

import (
	"encoding/json"
	"errors"

	"github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	"github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	"github.com/ethereum/go-ethereum/common"
)

var _ = (*executionPayloadHeaderMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e ExecutionPayloadHeader) MarshalJSON() ([]byte, error) {
	type ExecutionPayloadHeader struct {
		ParentHash       common.Hash    `json:"parentHash"       ssz-size:"32"  genc:"required"`
		FeeRecipient     common.Address `json:"feeRecipient"     ssz-size:"20"  genc:"required"`
		StateRoot        bytes.B32      `json:"stateRoot"        ssz-size:"32"  genc:"required"`
		ReceiptsRoot     bytes.B32      `json:"receiptsRoot"     ssz-size:"32"  genc:"required"`
		LogsBloom        bytes.Bytes    `json:"logsBloom"        ssz-size:"256" genc:"required"`
		Random           bytes.B32      `json:"prevRandao"       ssz-size:"32"  genc:"required"`
		Number           math.U64       `json:"blockNumber"                     genc:"required"`
		GasLimit         math.U64       `json:"gasLimit"                        genc:"required"`
		GasUsed          math.U64       `json:"gasUsed"                         genc:"required"`
		Timestamp        math.U64       `json:"timestamp"                       genc:"required"`
		ExtraData        bytes.Bytes    `json:"extraData"                       genc:"required" ssz-max:"32"`
		BaseFeePerGas    math.U256L     `json:"baseFeePerGas"    ssz-size:"32"  genc:"required"`
		BlockHash        common.Hash    `json:"blockHash"        ssz-size:"32"  genc:"required"`
		TransactionsRoot bytes.B32      `json:"transactionsRoot" ssz-size:"32"  genc:"required"`
		WithdrawalsRoot  bytes.B32      `json:"withdrawalsRoot"  ssz-size:"32"`
		BlobGasUsed      math.U64       `json:"blobGasUsed"`
		ExcessBlobGas    math.U64       `json:"excessBlobGas"`
	}
	var enc ExecutionPayloadHeader
	enc.ParentHash = e.ParentHash
	enc.FeeRecipient = e.FeeRecipient
	enc.StateRoot = e.StateRoot
	enc.ReceiptsRoot = e.ReceiptsRoot
	enc.LogsBloom = e.LogsBloom[:]
	enc.Random = e.Random
	enc.Number = e.Number
	enc.GasLimit = e.GasLimit
	enc.GasUsed = e.GasUsed
	enc.Timestamp = e.Timestamp
	enc.ExtraData = e.ExtraData
	enc.BaseFeePerGas = e.BaseFeePerGas
	enc.BlockHash = e.BlockHash
	enc.TransactionsRoot = e.TransactionsRoot
	enc.WithdrawalsRoot = e.WithdrawalsRoot
	enc.BlobGasUsed = e.BlobGasUsed
	enc.ExcessBlobGas = e.ExcessBlobGas
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutionPayloadHeader) UnmarshalJSON(input []byte) error {
	type ExecutionPayloadHeader struct {
		ParentHash       *common.Hash    `json:"parentHash"       ssz-size:"32"  genc:"required"`
		FeeRecipient     *common.Address `json:"feeRecipient"     ssz-size:"20"  genc:"required"`
		StateRoot        *bytes.B32      `json:"stateRoot"        ssz-size:"32"  genc:"required"`
		ReceiptsRoot     *bytes.B32      `json:"receiptsRoot"     ssz-size:"32"  genc:"required"`
		LogsBloom        *bytes.Bytes    `json:"logsBloom"        ssz-size:"256" genc:"required"`
		Random           *bytes.B32      `json:"prevRandao"       ssz-size:"32"  genc:"required"`
		Number           *math.U64       `json:"blockNumber"                     genc:"required"`
		GasLimit         *math.U64       `json:"gasLimit"                        genc:"required"`
		GasUsed          *math.U64       `json:"gasUsed"                         genc:"required"`
		Timestamp        *math.U64       `json:"timestamp"                       genc:"required"`
		ExtraData        *bytes.Bytes    `json:"extraData"                       genc:"required" ssz-max:"32"`
		BaseFeePerGas    *math.U256L     `json:"baseFeePerGas"    ssz-size:"32"  genc:"required"`
		BlockHash        *common.Hash    `json:"blockHash"        ssz-size:"32"  genc:"required"`
		TransactionsRoot *bytes.B32      `json:"transactionsRoot" ssz-size:"32"  genc:"required"`
		WithdrawalsRoot  *bytes.B32      `json:"withdrawalsRoot"  ssz-size:"32"`
		BlobGasUsed      *math.U64       `json:"blobGasUsed"`
		ExcessBlobGas    *math.U64       `json:"excessBlobGas"`
	}
	var dec ExecutionPayloadHeader
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash != nil {
		e.ParentHash = *dec.ParentHash
	}
	if dec.FeeRecipient != nil {
		e.FeeRecipient = *dec.FeeRecipient
	}
	if dec.StateRoot != nil {
		e.StateRoot = *dec.StateRoot
	}
	if dec.ReceiptsRoot != nil {
		e.ReceiptsRoot = *dec.ReceiptsRoot
	}
	if dec.LogsBloom != nil {
		if len(*dec.LogsBloom) != len(e.LogsBloom) {
			return errors.New("field 'logsBloom' has wrong length, need 256 items")
		}
		copy(e.LogsBloom[:], *dec.LogsBloom)
	}
	if dec.Random != nil {
		e.Random = *dec.Random
	}
	if dec.Number != nil {
		e.Number = *dec.Number
	}
	if dec.GasLimit != nil {
		e.GasLimit = *dec.GasLimit
	}
	if dec.GasUsed != nil {
		e.GasUsed = *dec.GasUsed
	}
	if dec.Timestamp != nil {
		e.Timestamp = *dec.Timestamp
	}
	if dec.ExtraData != nil {
		e.ExtraData = *dec.ExtraData
	}
	if dec.BaseFeePerGas != nil {
		e.BaseFeePerGas = *dec.BaseFeePerGas
	}
	if dec.BlockHash != nil {
		e.BlockHash = *dec.BlockHash
	}
	if dec.TransactionsRoot != nil {
		e.TransactionsRoot = *dec.TransactionsRoot
	}
	if dec.WithdrawalsRoot != nil {
		e.WithdrawalsRoot = *dec.WithdrawalsRoot
	}
	if dec.BlobGasUsed != nil {
		e.BlobGasUsed = *dec.BlobGasUsed
	}
	if dec.ExcessBlobGas != nil {
		e.ExcessBlobGas = *dec.ExcessBlobGas
	}
	return nil
}
