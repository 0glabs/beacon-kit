// Code generated by ogen, DO NOT EDIT.

package beaconnode

import (
	"fmt"
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// EventstreamParams is parameters of eventstream operation.
type EventstreamParams struct {
	// Event types to subscribe to.
	Topics []EventstreamTopicsItem
}

func unpackEventstreamParams(packed middleware.Parameters) (params EventstreamParams) {
	{
		key := middleware.ParameterKey{
			Name: "topics",
			In:   "query",
		}
		params.Topics = packed[key].([]EventstreamTopicsItem)
	}
	return params
}

func decodeEventstreamParams(args [0]string, argsEscaped bool, r *http.Request) (params EventstreamParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: topics.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "topics",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotTopicsVal EventstreamTopicsItem
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotTopicsVal = EventstreamTopicsItem(c)
						return nil
					}(); err != nil {
						return err
					}
					params.Topics = append(params.Topics, paramsDotTopicsVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.Topics == nil {
					return errors.New("nil is invalid value")
				}
				if err := (validate.Array{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
				}).ValidateLength(len(params.Topics)); err != nil {
					return errors.Wrap(err, "array")
				}
				if err := validate.UniqueItems(params.Topics); err != nil {
					return errors.Wrap(err, "array")
				}
				var failures []validate.FieldError
				for i, elem := range params.Topics {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "topics",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAggregatedAttestationParams is parameters of getAggregatedAttestation operation.
type GetAggregatedAttestationParams struct {
	// HashTreeRoot of AttestationData that validator wants aggregated.
	AttestationDataRoot string
	Slot                string
}

func unpackGetAggregatedAttestationParams(packed middleware.Parameters) (params GetAggregatedAttestationParams) {
	{
		key := middleware.ParameterKey{
			Name: "attestation_data_root",
			In:   "query",
		}
		params.AttestationDataRoot = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "slot",
			In:   "query",
		}
		params.Slot = packed[key].(string)
	}
	return params
}

func decodeGetAggregatedAttestationParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAggregatedAttestationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: attestation_data_root.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "attestation_data_root",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AttestationDataRoot = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^0x[a-fA-F0-9]{64}$"],
				}).Validate(string(params.AttestationDataRoot)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "attestation_data_root",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: slot.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "slot",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Slot = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "slot",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAttestationsRewardsParams is parameters of getAttestationsRewards operation.
type GetAttestationsRewardsParams struct {
	// The epoch to get rewards info from.
	Epoch string
}

func unpackGetAttestationsRewardsParams(packed middleware.Parameters) (params GetAttestationsRewardsParams) {
	{
		key := middleware.ParameterKey{
			Name: "epoch",
			In:   "path",
		}
		params.Epoch = packed[key].(string)
	}
	return params
}

func decodeGetAttestationsRewardsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAttestationsRewardsParams, _ error) {
	// Decode path: epoch.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "epoch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Epoch = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "epoch",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAttesterDutiesParams is parameters of getAttesterDuties operation.
type GetAttesterDutiesParams struct {
	// Should only be allowed 1 epoch ahead.
	Epoch string
}

func unpackGetAttesterDutiesParams(packed middleware.Parameters) (params GetAttesterDutiesParams) {
	{
		key := middleware.ParameterKey{
			Name: "epoch",
			In:   "path",
		}
		params.Epoch = packed[key].(string)
	}
	return params
}

func decodeGetAttesterDutiesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAttesterDutiesParams, _ error) {
	// Decode path: epoch.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "epoch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Epoch = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "epoch",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlindedBlockParams is parameters of getBlindedBlock operation.
type GetBlindedBlockParams struct {
	// Block identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex
	// encoded blockRoot with 0x prefix\>.
	BlockID string
}

func unpackGetBlindedBlockParams(packed middleware.Parameters) (params GetBlindedBlockParams) {
	{
		key := middleware.ParameterKey{
			Name: "block_id",
			In:   "path",
		}
		params.BlockID = packed[key].(string)
	}
	return params
}

func decodeGetBlindedBlockParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlindedBlockParams, _ error) {
	// Decode path: block_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "block_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BlockID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlobSidecarsParams is parameters of getBlobSidecars operation.
type GetBlobSidecarsParams struct {
	// Block identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex
	// encoded blockRoot with 0x prefix\>.
	BlockID string
	// Array of indices for blob sidecars to request for in the specified block. Returns all blob
	// sidecars in the block if not specified.
	Indices []string
}

func unpackGetBlobSidecarsParams(packed middleware.Parameters) (params GetBlobSidecarsParams) {
	{
		key := middleware.ParameterKey{
			Name: "block_id",
			In:   "path",
		}
		params.BlockID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "indices",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Indices = v.([]string)
		}
	}
	return params
}

func decodeGetBlobSidecarsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlobSidecarsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: block_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "block_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BlockID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: indices.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "indices",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIndicesVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotIndicesVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Indices = append(params.Indices, paramsDotIndicesVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Array{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
				}).ValidateLength(len(params.Indices)); err != nil {
					return errors.Wrap(err, "array")
				}
				if err := validate.UniqueItems(params.Indices); err != nil {
					return errors.Wrap(err, "array")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "indices",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockAttestationsParams is parameters of getBlockAttestations operation.
type GetBlockAttestationsParams struct {
	// Block identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex
	// encoded blockRoot with 0x prefix\>.
	BlockID string
}

func unpackGetBlockAttestationsParams(packed middleware.Parameters) (params GetBlockAttestationsParams) {
	{
		key := middleware.ParameterKey{
			Name: "block_id",
			In:   "path",
		}
		params.BlockID = packed[key].(string)
	}
	return params
}

func decodeGetBlockAttestationsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockAttestationsParams, _ error) {
	// Decode path: block_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "block_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BlockID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockHeaderParams is parameters of getBlockHeader operation.
type GetBlockHeaderParams struct {
	// Block identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex
	// encoded blockRoot with 0x prefix\>.
	BlockID string
}

func unpackGetBlockHeaderParams(packed middleware.Parameters) (params GetBlockHeaderParams) {
	{
		key := middleware.ParameterKey{
			Name: "block_id",
			In:   "path",
		}
		params.BlockID = packed[key].(string)
	}
	return params
}

func decodeGetBlockHeaderParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockHeaderParams, _ error) {
	// Decode path: block_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "block_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BlockID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockHeadersParams is parameters of getBlockHeaders operation.
type GetBlockHeadersParams struct {
	Slot       OptString
	ParentRoot OptString
}

func unpackGetBlockHeadersParams(packed middleware.Parameters) (params GetBlockHeadersParams) {
	{
		key := middleware.ParameterKey{
			Name: "slot",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Slot = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "parent_root",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ParentRoot = v.(OptString)
		}
	}
	return params
}

func decodeGetBlockHeadersParams(args [0]string, argsEscaped bool, r *http.Request) (params GetBlockHeadersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: slot.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "slot",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSlotVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSlotVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Slot.SetTo(paramsDotSlotVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "slot",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: parent_root.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "parent_root",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotParentRootVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotParentRootVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ParentRoot.SetTo(paramsDotParentRootVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.ParentRoot.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        regexMap["^0x[a-fA-F0-9]{64}$"],
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "parent_root",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockRewardsParams is parameters of getBlockRewards operation.
type GetBlockRewardsParams struct {
	// Block identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex
	// encoded blockRoot with 0x prefix\>.
	BlockID string
}

func unpackGetBlockRewardsParams(packed middleware.Parameters) (params GetBlockRewardsParams) {
	{
		key := middleware.ParameterKey{
			Name: "block_id",
			In:   "path",
		}
		params.BlockID = packed[key].(string)
	}
	return params
}

func decodeGetBlockRewardsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockRewardsParams, _ error) {
	// Decode path: block_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "block_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BlockID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockRootParams is parameters of getBlockRoot operation.
type GetBlockRootParams struct {
	// Block identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex
	// encoded blockRoot with 0x prefix\>.
	BlockID string
}

func unpackGetBlockRootParams(packed middleware.Parameters) (params GetBlockRootParams) {
	{
		key := middleware.ParameterKey{
			Name: "block_id",
			In:   "path",
		}
		params.BlockID = packed[key].(string)
	}
	return params
}

func decodeGetBlockRootParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockRootParams, _ error) {
	// Decode path: block_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "block_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BlockID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBlockV2Params is parameters of getBlockV2 operation.
type GetBlockV2Params struct {
	// Block identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex
	// encoded blockRoot with 0x prefix\>.
	BlockID string
}

func unpackGetBlockV2Params(packed middleware.Parameters) (params GetBlockV2Params) {
	{
		key := middleware.ParameterKey{
			Name: "block_id",
			In:   "path",
		}
		params.BlockID = packed[key].(string)
	}
	return params
}

func decodeGetBlockV2Params(args [1]string, argsEscaped bool, r *http.Request) (params GetBlockV2Params, _ error) {
	// Decode path: block_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "block_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BlockID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetEpochCommitteesParams is parameters of getEpochCommittees operation.
type GetEpochCommitteesParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
	// Fetch committees for the given epoch.  If not present then the committees for the epoch of the
	// state will be obtained.
	Epoch OptString
	// Restrict returned values to those matching the supplied committee index.
	Index OptString
	// Restrict returned values to those matching the supplied slot.
	Slot OptString
}

func unpackGetEpochCommitteesParams(packed middleware.Parameters) (params GetEpochCommitteesParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "epoch",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Epoch = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "index",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Index = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "slot",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Slot = v.(OptString)
		}
	}
	return params
}

func decodeGetEpochCommitteesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetEpochCommitteesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: epoch.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "epoch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEpochVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEpochVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Epoch.SetTo(paramsDotEpochVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "epoch",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: index.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "index",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIndexVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Index.SetTo(paramsDotIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "index",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: slot.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "slot",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSlotVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSlotVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Slot.SetTo(paramsDotSlotVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "slot",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetEpochSyncCommitteesParams is parameters of getEpochSyncCommittees operation.
type GetEpochSyncCommitteesParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
	// Fetch sync committees for the given epoch.  If not present then the sync committees for the epoch
	// of the state will be obtained.
	Epoch OptString
}

func unpackGetEpochSyncCommitteesParams(packed middleware.Parameters) (params GetEpochSyncCommitteesParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "epoch",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Epoch = v.(OptString)
		}
	}
	return params
}

func decodeGetEpochSyncCommitteesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetEpochSyncCommitteesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: epoch.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "epoch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEpochVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEpochVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Epoch.SetTo(paramsDotEpochVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "epoch",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetHealthParams is parameters of getHealth operation.
type GetHealthParams struct {
	// Customize syncing status instead of default status code (206).
	SyncingStatus OptInt
}

func unpackGetHealthParams(packed middleware.Parameters) (params GetHealthParams) {
	{
		key := middleware.ParameterKey{
			Name: "syncing_status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SyncingStatus = v.(OptInt)
		}
	}
	return params
}

func decodeGetHealthParams(args [0]string, argsEscaped bool, r *http.Request) (params GetHealthParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: syncing_status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "syncing_status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSyncingStatusVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotSyncingStatusVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SyncingStatus.SetTo(paramsDotSyncingStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SyncingStatus.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           100,
							MaxSet:        true,
							Max:           599,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "syncing_status",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetLightClientBootstrapParams is parameters of getLightClientBootstrap operation.
type GetLightClientBootstrapParams struct {
	// Block root.
	// \<hex encoded blockRoot with 0x prefix\>.
	BlockRoot string
}

func unpackGetLightClientBootstrapParams(packed middleware.Parameters) (params GetLightClientBootstrapParams) {
	{
		key := middleware.ParameterKey{
			Name: "block_root",
			In:   "path",
		}
		params.BlockRoot = packed[key].(string)
	}
	return params
}

func decodeGetLightClientBootstrapParams(args [1]string, argsEscaped bool, r *http.Request) (params GetLightClientBootstrapParams, _ error) {
	// Decode path: block_root.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "block_root",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BlockRoot = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^0x[a-fA-F0-9]{64}$"],
				}).Validate(string(params.BlockRoot)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_root",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetLightClientUpdatesByRangeParams is parameters of getLightClientUpdatesByRange operation.
type GetLightClientUpdatesByRangeParams struct {
	StartPeriod string
	Count       string
}

func unpackGetLightClientUpdatesByRangeParams(packed middleware.Parameters) (params GetLightClientUpdatesByRangeParams) {
	{
		key := middleware.ParameterKey{
			Name: "start_period",
			In:   "query",
		}
		params.StartPeriod = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "count",
			In:   "query",
		}
		params.Count = packed[key].(string)
	}
	return params
}

func decodeGetLightClientUpdatesByRangeParams(args [0]string, argsEscaped bool, r *http.Request) (params GetLightClientUpdatesByRangeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: start_period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StartPeriod = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_period",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Count = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "count",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetLivenessParams is parameters of getLiveness operation.
type GetLivenessParams struct {
	// The epoch for which liveness is being queried.
	Epoch string
}

func unpackGetLivenessParams(packed middleware.Parameters) (params GetLivenessParams) {
	{
		key := middleware.ParameterKey{
			Name: "epoch",
			In:   "path",
		}
		params.Epoch = packed[key].(string)
	}
	return params
}

func decodeGetLivenessParams(args [1]string, argsEscaped bool, r *http.Request) (params GetLivenessParams, _ error) {
	// Decode path: epoch.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "epoch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Epoch = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "epoch",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetNextWithdrawalsParams is parameters of getNextWithdrawals operation.
type GetNextWithdrawalsParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
	// The slot that a block is being built for, with the specified state as the parent. Defaults to the
	// slot after the parent state if not specified.
	ProposalSlot OptString
}

func unpackGetNextWithdrawalsParams(packed middleware.Parameters) (params GetNextWithdrawalsParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "proposal_slot",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProposalSlot = v.(OptString)
		}
	}
	return params
}

func decodeGetNextWithdrawalsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetNextWithdrawalsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: proposal_slot.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "proposal_slot",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProposalSlotVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotProposalSlotVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProposalSlot.SetTo(paramsDotProposalSlotVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "proposal_slot",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetPeerParams is parameters of getPeer operation.
type GetPeerParams struct {
	PeerID string
}

func unpackGetPeerParams(packed middleware.Parameters) (params GetPeerParams) {
	{
		key := middleware.ParameterKey{
			Name: "peer_id",
			In:   "path",
		}
		params.PeerID = packed[key].(string)
	}
	return params
}

func decodeGetPeerParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPeerParams, _ error) {
	// Decode path: peer_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "peer_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PeerID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "peer_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetPeersParams is parameters of getPeers operation.
type GetPeersParams struct {
	State     []GetPeersStateItem
	Direction []GetPeersDirectionItem
}

func unpackGetPeersParams(packed middleware.Parameters) (params GetPeersParams) {
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.State = v.([]GetPeersStateItem)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "direction",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Direction = v.([]GetPeersDirectionItem)
		}
	}
	return params
}

func decodeGetPeersParams(args [0]string, argsEscaped bool, r *http.Request) (params GetPeersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStateVal GetPeersStateItem
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStateVal = GetPeersStateItem(c)
						return nil
					}(); err != nil {
						return err
					}
					params.State = append(params.State, paramsDotStateVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Array{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
				}).ValidateLength(len(params.State)); err != nil {
					return errors.Wrap(err, "array")
				}
				if err := validate.UniqueItems(params.State); err != nil {
					return errors.Wrap(err, "array")
				}
				var failures []validate.FieldError
				for i, elem := range params.State {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: direction.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotDirectionVal GetPeersDirectionItem
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotDirectionVal = GetPeersDirectionItem(c)
						return nil
					}(); err != nil {
						return err
					}
					params.Direction = append(params.Direction, paramsDotDirectionVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Array{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
				}).ValidateLength(len(params.Direction)); err != nil {
					return errors.Wrap(err, "array")
				}
				if err := validate.UniqueItems(params.Direction); err != nil {
					return errors.Wrap(err, "array")
				}
				var failures []validate.FieldError
				for i, elem := range params.Direction {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "direction",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetPoolAttestationsParams is parameters of getPoolAttestations operation.
type GetPoolAttestationsParams struct {
	Slot           OptString
	CommitteeIndex OptString
}

func unpackGetPoolAttestationsParams(packed middleware.Parameters) (params GetPoolAttestationsParams) {
	{
		key := middleware.ParameterKey{
			Name: "slot",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Slot = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "committee_index",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CommitteeIndex = v.(OptString)
		}
	}
	return params
}

func decodeGetPoolAttestationsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetPoolAttestationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: slot.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "slot",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSlotVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSlotVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Slot.SetTo(paramsDotSlotVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "slot",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: committee_index.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "committee_index",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCommitteeIndexVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCommitteeIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CommitteeIndex.SetTo(paramsDotCommitteeIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "committee_index",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetProposerDutiesParams is parameters of getProposerDuties operation.
type GetProposerDutiesParams struct {
	Epoch string
}

func unpackGetProposerDutiesParams(packed middleware.Parameters) (params GetProposerDutiesParams) {
	{
		key := middleware.ParameterKey{
			Name: "epoch",
			In:   "path",
		}
		params.Epoch = packed[key].(string)
	}
	return params
}

func decodeGetProposerDutiesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProposerDutiesParams, _ error) {
	// Decode path: epoch.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "epoch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Epoch = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "epoch",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetStateFinalityCheckpointsParams is parameters of getStateFinalityCheckpoints operation.
type GetStateFinalityCheckpointsParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
}

func unpackGetStateFinalityCheckpointsParams(packed middleware.Parameters) (params GetStateFinalityCheckpointsParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	return params
}

func decodeGetStateFinalityCheckpointsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetStateFinalityCheckpointsParams, _ error) {
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetStateForkParams is parameters of getStateFork operation.
type GetStateForkParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
}

func unpackGetStateForkParams(packed middleware.Parameters) (params GetStateForkParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	return params
}

func decodeGetStateForkParams(args [1]string, argsEscaped bool, r *http.Request) (params GetStateForkParams, _ error) {
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetStateRandaoParams is parameters of getStateRandao operation.
type GetStateRandaoParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
	// Epoch to fetch the RANDAO mix for. Default: state's current epoch.
	Epoch OptString
}

func unpackGetStateRandaoParams(packed middleware.Parameters) (params GetStateRandaoParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "epoch",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Epoch = v.(OptString)
		}
	}
	return params
}

func decodeGetStateRandaoParams(args [1]string, argsEscaped bool, r *http.Request) (params GetStateRandaoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: epoch.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "epoch",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEpochVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEpochVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Epoch.SetTo(paramsDotEpochVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "epoch",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetStateRootParams is parameters of getStateRoot operation.
type GetStateRootParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
}

func unpackGetStateRootParams(packed middleware.Parameters) (params GetStateRootParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	return params
}

func decodeGetStateRootParams(args [1]string, argsEscaped bool, r *http.Request) (params GetStateRootParams, _ error) {
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetStateV2Params is parameters of getStateV2 operation.
type GetStateV2Params struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
}

func unpackGetStateV2Params(packed middleware.Parameters) (params GetStateV2Params) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	return params
}

func decodeGetStateV2Params(args [1]string, argsEscaped bool, r *http.Request) (params GetStateV2Params, _ error) {
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetStateValidatorParams is parameters of getStateValidator operation.
type GetStateValidatorParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
	// Either hex encoded public key (any bytes48 with 0x prefix) or validator index.
	ValidatorID string
}

func unpackGetStateValidatorParams(packed middleware.Parameters) (params GetStateValidatorParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "validator_id",
			In:   "path",
		}
		params.ValidatorID = packed[key].(string)
	}
	return params
}

func decodeGetStateValidatorParams(args [2]string, argsEscaped bool, r *http.Request) (params GetStateValidatorParams, _ error) {
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: validator_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "validator_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ValidatorID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "validator_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetStateValidatorBalancesParams is parameters of getStateValidatorBalances operation.
type GetStateValidatorBalancesParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
	// Either hex encoded public key (any bytes48 with 0x prefix) or validator index.
	ID []string
}

func unpackGetStateValidatorBalancesParams(packed middleware.Parameters) (params GetStateValidatorBalancesParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.([]string)
		}
	}
	return params
}

func decodeGetStateValidatorBalancesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetStateValidatorBalancesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIDVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ID = append(params.ID, paramsDotIDVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Array{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    64,
					MaxLengthSet: true,
				}).ValidateLength(len(params.ID)); err != nil {
					return errors.Wrap(err, "array")
				}
				if err := validate.UniqueItems(params.ID); err != nil {
					return errors.Wrap(err, "array")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetStateValidatorsParams is parameters of getStateValidators operation.
type GetStateValidatorsParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
	// Either hex encoded public key (any bytes48 with 0x prefix) or validator index.
	ID []string
}

func unpackGetStateValidatorsParams(packed middleware.Parameters) (params GetStateValidatorsParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.([]string)
		}
	}
	return params
}

func decodeGetStateValidatorsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetStateValidatorsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIDVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ID = append(params.ID, paramsDotIDVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Array{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    64,
					MaxLengthSet: true,
				}).ValidateLength(len(params.ID)); err != nil {
					return errors.Wrap(err, "array")
				}
				if err := validate.UniqueItems(params.ID); err != nil {
					return errors.Wrap(err, "array")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetSyncCommitteeDutiesParams is parameters of getSyncCommitteeDuties operation.
type GetSyncCommitteeDutiesParams struct {
	// Epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1.
	Epoch string
}

func unpackGetSyncCommitteeDutiesParams(packed middleware.Parameters) (params GetSyncCommitteeDutiesParams) {
	{
		key := middleware.ParameterKey{
			Name: "epoch",
			In:   "path",
		}
		params.Epoch = packed[key].(string)
	}
	return params
}

func decodeGetSyncCommitteeDutiesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSyncCommitteeDutiesParams, _ error) {
	// Decode path: epoch.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "epoch",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Epoch = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "epoch",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSyncCommitteeRewardsParams is parameters of getSyncCommitteeRewards operation.
type GetSyncCommitteeRewardsParams struct {
	// Block identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex
	// encoded blockRoot with 0x prefix\>.
	BlockID string
}

func unpackGetSyncCommitteeRewardsParams(packed middleware.Parameters) (params GetSyncCommitteeRewardsParams) {
	{
		key := middleware.ParameterKey{
			Name: "block_id",
			In:   "path",
		}
		params.BlockID = packed[key].(string)
	}
	return params
}

func decodeGetSyncCommitteeRewardsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSyncCommitteeRewardsParams, _ error) {
	// Decode path: block_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "block_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BlockID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "block_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PostStateValidatorBalancesParams is parameters of postStateValidatorBalances operation.
type PostStateValidatorBalancesParams struct {
	// State identifier.
	// Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified",
	// \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
	StateID string
}

func unpackPostStateValidatorBalancesParams(packed middleware.Parameters) (params PostStateValidatorBalancesParams) {
	{
		key := middleware.ParameterKey{
			Name: "state_id",
			In:   "path",
		}
		params.StateID = packed[key].(string)
	}
	return params
}

func decodePostStateValidatorBalancesParams(args [1]string, argsEscaped bool, r *http.Request) (params PostStateValidatorBalancesParams, _ error) {
	// Decode path: state_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "state_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StateID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProduceAttestationDataParams is parameters of produceAttestationData operation.
type ProduceAttestationDataParams struct {
	// The slot for which an attestation data should be created.
	Slot string
	// The committee index for which an attestation data should be created.
	CommitteeIndex string
}

func unpackProduceAttestationDataParams(packed middleware.Parameters) (params ProduceAttestationDataParams) {
	{
		key := middleware.ParameterKey{
			Name: "slot",
			In:   "query",
		}
		params.Slot = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "committee_index",
			In:   "query",
		}
		params.CommitteeIndex = packed[key].(string)
	}
	return params
}

func decodeProduceAttestationDataParams(args [0]string, argsEscaped bool, r *http.Request) (params ProduceAttestationDataParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: slot.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "slot",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Slot = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "slot",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: committee_index.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "committee_index",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CommitteeIndex = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "committee_index",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ProduceBlindedBlockParams is parameters of produceBlindedBlock operation.
type ProduceBlindedBlockParams struct {
	// The slot for which the block should be proposed.
	Slot string
	// The validator's randao reveal value.
	RandaoReveal string
	// Arbitrary data validator wants to include in block.
	Graffiti OptString
}

func unpackProduceBlindedBlockParams(packed middleware.Parameters) (params ProduceBlindedBlockParams) {
	{
		key := middleware.ParameterKey{
			Name: "slot",
			In:   "path",
		}
		params.Slot = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "randao_reveal",
			In:   "query",
		}
		params.RandaoReveal = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "graffiti",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Graffiti = v.(OptString)
		}
	}
	return params
}

func decodeProduceBlindedBlockParams(args [1]string, argsEscaped bool, r *http.Request) (params ProduceBlindedBlockParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: slot.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "slot",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Slot = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "slot",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: randao_reveal.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "randao_reveal",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RandaoReveal = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^0x[a-fA-F0-9]{192}$"],
				}).Validate(string(params.RandaoReveal)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "randao_reveal",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: graffiti.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "graffiti",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGraffitiVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGraffitiVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Graffiti.SetTo(paramsDotGraffitiVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Graffiti.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        regexMap["^0x[a-fA-F0-9]{64}$"],
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "graffiti",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ProduceBlockV2Params is parameters of produceBlockV2 operation.
type ProduceBlockV2Params struct {
	// The slot for which the block should be proposed.
	Slot string
	// The validator's randao reveal value.
	RandaoReveal string
	// Arbitrary data validator wants to include in block.
	Graffiti OptString
}

func unpackProduceBlockV2Params(packed middleware.Parameters) (params ProduceBlockV2Params) {
	{
		key := middleware.ParameterKey{
			Name: "slot",
			In:   "path",
		}
		params.Slot = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "randao_reveal",
			In:   "query",
		}
		params.RandaoReveal = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "graffiti",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Graffiti = v.(OptString)
		}
	}
	return params
}

func decodeProduceBlockV2Params(args [1]string, argsEscaped bool, r *http.Request) (params ProduceBlockV2Params, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: slot.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "slot",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Slot = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "slot",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: randao_reveal.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "randao_reveal",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RandaoReveal = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^0x[a-fA-F0-9]{192}$"],
				}).Validate(string(params.RandaoReveal)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "randao_reveal",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: graffiti.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "graffiti",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGraffitiVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGraffitiVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Graffiti.SetTo(paramsDotGraffitiVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Graffiti.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        regexMap["^0x[a-fA-F0-9]{64}$"],
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "graffiti",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ProduceBlockV3Params is parameters of produceBlockV3 operation.
type ProduceBlockV3Params struct {
	// The slot for which the block should be proposed.
	Slot string
	// The validator's randao reveal value.
	RandaoReveal string
	// Arbitrary data validator wants to include in block.
	Graffiti OptString
	// Percentage multiplier to apply to the builder's payload value when choosing between a
	// builder payload header and payload from the paired execution node. This parameter is only
	// relevant if the beacon node is connected to a builder, deems it safe to produce a builder
	// payload, and receives valid responses from both the builder endpoint _and_ the paired
	// execution node. When these preconditions are met, the server MUST act as follows:
	// * if `exec_node_payload_value >= builder_boost_factor * (builder_payload_value // 100)`,
	// then return a full (unblinded) block containing the execution node payload.
	// * otherwise, return a blinded block containing the builder payload header.
	// Servers must support the following values of the boost factor which encode common
	// preferences:
	// * `builder_boost_factor=0`: prefer the execution node payload unless an error makes it
	// unviable.
	// * `builder_boost_factor=100`: default profit maximization mode; choose whichever
	// payload pays more.
	// * `builder_boost_factor=2**64 - 1`: prefer the builder payload unless an error or
	// beacon node health check makes it unviable.
	// Servers should use saturating arithmetic or another technique to ensure that large values of
	// the `builder_boost_factor` do not trigger overflows or errors. If this parameter is
	// provided and the beacon node is not configured with a builder then the beacon node MUST
	// respond with a full block, which the caller can choose to reject if it wishes. If this
	// parameter is **not** provided then it should be treated as having the default value of 100.
	// If the value is provided but out of range for a 64-bit unsigned integer, then an error
	// response with status code 400 MUST be returned.
	BuilderBoostFactor OptString
}

func unpackProduceBlockV3Params(packed middleware.Parameters) (params ProduceBlockV3Params) {
	{
		key := middleware.ParameterKey{
			Name: "slot",
			In:   "path",
		}
		params.Slot = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "randao_reveal",
			In:   "query",
		}
		params.RandaoReveal = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "graffiti",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Graffiti = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "builder_boost_factor",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BuilderBoostFactor = v.(OptString)
		}
	}
	return params
}

func decodeProduceBlockV3Params(args [1]string, argsEscaped bool, r *http.Request) (params ProduceBlockV3Params, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: slot.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "slot",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Slot = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "slot",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: randao_reveal.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "randao_reveal",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RandaoReveal = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^0x[a-fA-F0-9]{192}$"],
				}).Validate(string(params.RandaoReveal)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "randao_reveal",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: graffiti.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "graffiti",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGraffitiVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGraffitiVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Graffiti.SetTo(paramsDotGraffitiVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Graffiti.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        regexMap["^0x[a-fA-F0-9]{64}$"],
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "graffiti",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: builder_boost_factor.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "builder_boost_factor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBuilderBoostFactorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBuilderBoostFactorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BuilderBoostFactor.SetTo(paramsDotBuilderBoostFactorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "builder_boost_factor",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ProduceSyncCommitteeContributionParams is parameters of produceSyncCommitteeContribution operation.
type ProduceSyncCommitteeContributionParams struct {
	// The slot for which a sync committee contribution should be created.
	Slot string
	// The subcommittee index for which to produce the contribution.
	SubcommitteeIndex string
	// The block root for which to produce the contribution.
	BeaconBlockRoot string
}

func unpackProduceSyncCommitteeContributionParams(packed middleware.Parameters) (params ProduceSyncCommitteeContributionParams) {
	{
		key := middleware.ParameterKey{
			Name: "slot",
			In:   "query",
		}
		params.Slot = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "subcommittee_index",
			In:   "query",
		}
		params.SubcommitteeIndex = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "beacon_block_root",
			In:   "query",
		}
		params.BeaconBlockRoot = packed[key].(string)
	}
	return params
}

func decodeProduceSyncCommitteeContributionParams(args [0]string, argsEscaped bool, r *http.Request) (params ProduceSyncCommitteeContributionParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: slot.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "slot",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Slot = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "slot",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: subcommittee_index.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "subcommittee_index",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SubcommitteeIndex = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "subcommittee_index",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: beacon_block_root.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "beacon_block_root",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BeaconBlockRoot = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^0x[a-fA-F0-9]{64}$"],
				}).Validate(string(params.BeaconBlockRoot)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "beacon_block_root",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PublishBlindedBlockParams is parameters of publishBlindedBlock operation.
type PublishBlindedBlockParams struct {
	// Version of the block being submitted, if using SSZ encoding.
	EthConsensusVersion OptPublishBlindedBlockEthConsensusVersion
}

func unpackPublishBlindedBlockParams(packed middleware.Parameters) (params PublishBlindedBlockParams) {
	{
		key := middleware.ParameterKey{
			Name: "Eth-Consensus-Version",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.EthConsensusVersion = v.(OptPublishBlindedBlockEthConsensusVersion)
		}
	}
	return params
}

func decodePublishBlindedBlockParams(args [0]string, argsEscaped bool, r *http.Request) (params PublishBlindedBlockParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: Eth-Consensus-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Eth-Consensus-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEthConsensusVersionVal PublishBlindedBlockEthConsensusVersion
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEthConsensusVersionVal = PublishBlindedBlockEthConsensusVersion(c)
					return nil
				}(); err != nil {
					return err
				}
				params.EthConsensusVersion.SetTo(paramsDotEthConsensusVersionVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.EthConsensusVersion.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Eth-Consensus-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// PublishBlindedBlockV2Params is parameters of publishBlindedBlockV2 operation.
type PublishBlindedBlockV2Params struct {
	// Level of validation that must be applied to a block before it is broadcast.
	// Possible values:
	// - **`gossip`** (default): lightweight gossip checks only
	// - **`consensus`**: full consensus checks, including validation of all signatures and
	// blocks fields _except_ for the execution payload transactions.
	// - **`consensus_and_equivocation`**: the same as `consensus`, with an extra equivocation
	// check immediately before the block is broadcast. If the block is found to be an
	// equivocation it fails validation.
	// If the block fails the requested level of a validation a 400 status MUST be returned
	// immediately and the block MUST NOT be broadcast to the network.
	// If validation succeeds, the block must still be fully verified before it is
	// incorporated into the state and a 20x status is returned to the caller.
	BroadcastValidation OptPublishBlindedBlockV2BroadcastValidation
	// Version of the block being submitted.
	EthConsensusVersion PublishBlindedBlockV2EthConsensusVersion
}

func unpackPublishBlindedBlockV2Params(packed middleware.Parameters) (params PublishBlindedBlockV2Params) {
	{
		key := middleware.ParameterKey{
			Name: "broadcast_validation",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BroadcastValidation = v.(OptPublishBlindedBlockV2BroadcastValidation)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "Eth-Consensus-Version",
			In:   "header",
		}
		params.EthConsensusVersion = packed[key].(PublishBlindedBlockV2EthConsensusVersion)
	}
	return params
}

func decodePublishBlindedBlockV2Params(args [0]string, argsEscaped bool, r *http.Request) (params PublishBlindedBlockV2Params, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode query: broadcast_validation.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "broadcast_validation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBroadcastValidationVal PublishBlindedBlockV2BroadcastValidation
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBroadcastValidationVal = PublishBlindedBlockV2BroadcastValidation(c)
					return nil
				}(); err != nil {
					return err
				}
				params.BroadcastValidation.SetTo(paramsDotBroadcastValidationVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.BroadcastValidation.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "broadcast_validation",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: Eth-Consensus-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Eth-Consensus-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EthConsensusVersion = PublishBlindedBlockV2EthConsensusVersion(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.EthConsensusVersion.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Eth-Consensus-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// PublishBlockParams is parameters of publishBlock operation.
type PublishBlockParams struct {
	// Version of the block being submitted, if using SSZ encoding.
	EthConsensusVersion OptPublishBlockEthConsensusVersion
}

func unpackPublishBlockParams(packed middleware.Parameters) (params PublishBlockParams) {
	{
		key := middleware.ParameterKey{
			Name: "Eth-Consensus-Version",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.EthConsensusVersion = v.(OptPublishBlockEthConsensusVersion)
		}
	}
	return params
}

func decodePublishBlockParams(args [0]string, argsEscaped bool, r *http.Request) (params PublishBlockParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: Eth-Consensus-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Eth-Consensus-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEthConsensusVersionVal PublishBlockEthConsensusVersion
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEthConsensusVersionVal = PublishBlockEthConsensusVersion(c)
					return nil
				}(); err != nil {
					return err
				}
				params.EthConsensusVersion.SetTo(paramsDotEthConsensusVersionVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.EthConsensusVersion.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Eth-Consensus-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// PublishBlockV2Params is parameters of publishBlockV2 operation.
type PublishBlockV2Params struct {
	// Level of validation that must be applied to a block before it is broadcast.
	// Possible values:
	// - **`gossip`** (default): lightweight gossip checks only
	// - **`consensus`**: full consensus checks, including validation of all signatures and
	// blocks fields _except_ for the execution payload transactions.
	// - **`consensus_and_equivocation`**: the same as `consensus`, with an extra equivocation
	// check immediately before the block is broadcast. If the block is found to be an
	// equivocation it fails validation.
	// If the block fails the requested level of a validation a 400 status MUST be returned
	// immediately and the block MUST NOT be broadcast to the network.
	// If validation succeeds, the block must still be fully verified before it is
	// incorporated into the state and a 20x status is returned to the caller.
	BroadcastValidation OptPublishBlockV2BroadcastValidation
	// Version of the block being submitted.
	EthConsensusVersion PublishBlockV2EthConsensusVersion
}

func unpackPublishBlockV2Params(packed middleware.Parameters) (params PublishBlockV2Params) {
	{
		key := middleware.ParameterKey{
			Name: "broadcast_validation",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BroadcastValidation = v.(OptPublishBlockV2BroadcastValidation)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "Eth-Consensus-Version",
			In:   "header",
		}
		params.EthConsensusVersion = packed[key].(PublishBlockV2EthConsensusVersion)
	}
	return params
}

func decodePublishBlockV2Params(args [0]string, argsEscaped bool, r *http.Request) (params PublishBlockV2Params, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode query: broadcast_validation.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "broadcast_validation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBroadcastValidationVal PublishBlockV2BroadcastValidation
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBroadcastValidationVal = PublishBlockV2BroadcastValidation(c)
					return nil
				}(); err != nil {
					return err
				}
				params.BroadcastValidation.SetTo(paramsDotBroadcastValidationVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.BroadcastValidation.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "broadcast_validation",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: Eth-Consensus-Version.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Eth-Consensus-Version",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EthConsensusVersion = PublishBlockV2EthConsensusVersion(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.EthConsensusVersion.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Eth-Consensus-Version",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
