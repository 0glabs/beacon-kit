// Code generated by ogen, DO NOT EDIT.

package beaconnode

import (
	"io"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type EventstreamBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *EventstreamBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *EventstreamBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *EventstreamBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *EventstreamBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *EventstreamBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *EventstreamBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*EventstreamBadRequest) eventstreamRes() {}

type EventstreamInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *EventstreamInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *EventstreamInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *EventstreamInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *EventstreamInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *EventstreamInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *EventstreamInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*EventstreamInternalServerError) eventstreamRes() {}

// Https://developer.mozilla.
// org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format.
type EventstreamOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s EventstreamOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*EventstreamOK) eventstreamRes() {}

type EventstreamTopicsItem string

const (
	EventstreamTopicsItemHead                        EventstreamTopicsItem = "head"
	EventstreamTopicsItemBlock                       EventstreamTopicsItem = "block"
	EventstreamTopicsItemBlockGossip                 EventstreamTopicsItem = "block_gossip"
	EventstreamTopicsItemAttestation                 EventstreamTopicsItem = "attestation"
	EventstreamTopicsItemVoluntaryExit               EventstreamTopicsItem = "voluntary_exit"
	EventstreamTopicsItemBlsToExecutionChange        EventstreamTopicsItem = "bls_to_execution_change"
	EventstreamTopicsItemProposerSlashing            EventstreamTopicsItem = "proposer_slashing"
	EventstreamTopicsItemAttesterSlashing            EventstreamTopicsItem = "attester_slashing"
	EventstreamTopicsItemFinalizedCheckpoint         EventstreamTopicsItem = "finalized_checkpoint"
	EventstreamTopicsItemChainReorg                  EventstreamTopicsItem = "chain_reorg"
	EventstreamTopicsItemContributionAndProof        EventstreamTopicsItem = "contribution_and_proof"
	EventstreamTopicsItemLightClientFinalityUpdate   EventstreamTopicsItem = "light_client_finality_update"
	EventstreamTopicsItemLightClientOptimisticUpdate EventstreamTopicsItem = "light_client_optimistic_update"
	EventstreamTopicsItemPayloadAttributes           EventstreamTopicsItem = "payload_attributes"
	EventstreamTopicsItemBlobSidecar                 EventstreamTopicsItem = "blob_sidecar"
)

// AllValues returns all EventstreamTopicsItem values.
func (EventstreamTopicsItem) AllValues() []EventstreamTopicsItem {
	return []EventstreamTopicsItem{
		EventstreamTopicsItemHead,
		EventstreamTopicsItemBlock,
		EventstreamTopicsItemBlockGossip,
		EventstreamTopicsItemAttestation,
		EventstreamTopicsItemVoluntaryExit,
		EventstreamTopicsItemBlsToExecutionChange,
		EventstreamTopicsItemProposerSlashing,
		EventstreamTopicsItemAttesterSlashing,
		EventstreamTopicsItemFinalizedCheckpoint,
		EventstreamTopicsItemChainReorg,
		EventstreamTopicsItemContributionAndProof,
		EventstreamTopicsItemLightClientFinalityUpdate,
		EventstreamTopicsItemLightClientOptimisticUpdate,
		EventstreamTopicsItemPayloadAttributes,
		EventstreamTopicsItemBlobSidecar,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EventstreamTopicsItem) MarshalText() ([]byte, error) {
	switch s {
	case EventstreamTopicsItemHead:
		return []byte(s), nil
	case EventstreamTopicsItemBlock:
		return []byte(s), nil
	case EventstreamTopicsItemBlockGossip:
		return []byte(s), nil
	case EventstreamTopicsItemAttestation:
		return []byte(s), nil
	case EventstreamTopicsItemVoluntaryExit:
		return []byte(s), nil
	case EventstreamTopicsItemBlsToExecutionChange:
		return []byte(s), nil
	case EventstreamTopicsItemProposerSlashing:
		return []byte(s), nil
	case EventstreamTopicsItemAttesterSlashing:
		return []byte(s), nil
	case EventstreamTopicsItemFinalizedCheckpoint:
		return []byte(s), nil
	case EventstreamTopicsItemChainReorg:
		return []byte(s), nil
	case EventstreamTopicsItemContributionAndProof:
		return []byte(s), nil
	case EventstreamTopicsItemLightClientFinalityUpdate:
		return []byte(s), nil
	case EventstreamTopicsItemLightClientOptimisticUpdate:
		return []byte(s), nil
	case EventstreamTopicsItemPayloadAttributes:
		return []byte(s), nil
	case EventstreamTopicsItemBlobSidecar:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EventstreamTopicsItem) UnmarshalText(data []byte) error {
	switch EventstreamTopicsItem(data) {
	case EventstreamTopicsItemHead:
		*s = EventstreamTopicsItemHead
		return nil
	case EventstreamTopicsItemBlock:
		*s = EventstreamTopicsItemBlock
		return nil
	case EventstreamTopicsItemBlockGossip:
		*s = EventstreamTopicsItemBlockGossip
		return nil
	case EventstreamTopicsItemAttestation:
		*s = EventstreamTopicsItemAttestation
		return nil
	case EventstreamTopicsItemVoluntaryExit:
		*s = EventstreamTopicsItemVoluntaryExit
		return nil
	case EventstreamTopicsItemBlsToExecutionChange:
		*s = EventstreamTopicsItemBlsToExecutionChange
		return nil
	case EventstreamTopicsItemProposerSlashing:
		*s = EventstreamTopicsItemProposerSlashing
		return nil
	case EventstreamTopicsItemAttesterSlashing:
		*s = EventstreamTopicsItemAttesterSlashing
		return nil
	case EventstreamTopicsItemFinalizedCheckpoint:
		*s = EventstreamTopicsItemFinalizedCheckpoint
		return nil
	case EventstreamTopicsItemChainReorg:
		*s = EventstreamTopicsItemChainReorg
		return nil
	case EventstreamTopicsItemContributionAndProof:
		*s = EventstreamTopicsItemContributionAndProof
		return nil
	case EventstreamTopicsItemLightClientFinalityUpdate:
		*s = EventstreamTopicsItemLightClientFinalityUpdate
		return nil
	case EventstreamTopicsItemLightClientOptimisticUpdate:
		*s = EventstreamTopicsItemLightClientOptimisticUpdate
		return nil
	case EventstreamTopicsItemPayloadAttributes:
		*s = EventstreamTopicsItemPayloadAttributes
		return nil
	case EventstreamTopicsItemBlobSidecar:
		*s = EventstreamTopicsItemBlobSidecar
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAggregatedAttestationBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetAggregatedAttestationBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetAggregatedAttestationBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetAggregatedAttestationBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetAggregatedAttestationBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetAggregatedAttestationBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetAggregatedAttestationBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetAggregatedAttestationBadRequest) getAggregatedAttestationRes() {}

type GetAggregatedAttestationInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetAggregatedAttestationInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetAggregatedAttestationInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetAggregatedAttestationInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetAggregatedAttestationInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetAggregatedAttestationInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetAggregatedAttestationInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetAggregatedAttestationInternalServerError) getAggregatedAttestationRes() {}

type GetAggregatedAttestationNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetAggregatedAttestationNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetAggregatedAttestationNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetAggregatedAttestationNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetAggregatedAttestationNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetAggregatedAttestationNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetAggregatedAttestationNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetAggregatedAttestationNotFound) getAggregatedAttestationRes() {}

type GetAggregatedAttestationOK struct {
	// The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestation) object from the CL spec.
	Data GetAggregatedAttestationOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAggregatedAttestationOK) GetData() GetAggregatedAttestationOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAggregatedAttestationOK) SetData(val GetAggregatedAttestationOKData) {
	s.Data = val
}

func (*GetAggregatedAttestationOK) getAggregatedAttestationRes() {}

// The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestation) object from the CL spec.
type GetAggregatedAttestationOKData struct {
	// Attester aggregation bits.
	AggregationBits string `json:"aggregation_bits"`
	// BLS aggregate signature.
	Signature string `json:"signature"`
	// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
	Data GetAggregatedAttestationOKDataData `json:"data"`
}

// GetAggregationBits returns the value of AggregationBits.
func (s *GetAggregatedAttestationOKData) GetAggregationBits() string {
	return s.AggregationBits
}

// GetSignature returns the value of Signature.
func (s *GetAggregatedAttestationOKData) GetSignature() string {
	return s.Signature
}

// GetData returns the value of Data.
func (s *GetAggregatedAttestationOKData) GetData() GetAggregatedAttestationOKDataData {
	return s.Data
}

// SetAggregationBits sets the value of AggregationBits.
func (s *GetAggregatedAttestationOKData) SetAggregationBits(val string) {
	s.AggregationBits = val
}

// SetSignature sets the value of Signature.
func (s *GetAggregatedAttestationOKData) SetSignature(val string) {
	s.Signature = val
}

// SetData sets the value of Data.
func (s *GetAggregatedAttestationOKData) SetData(val GetAggregatedAttestationOKDataData) {
	s.Data = val
}

// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
type GetAggregatedAttestationOKDataData struct {
	Slot  string `json:"slot"`
	Index string `json:"index"`
	// LMD GHOST vote.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Source GetAggregatedAttestationOKDataDataSource `json:"source"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Target GetAggregatedAttestationOKDataDataTarget `json:"target"`
}

// GetSlot returns the value of Slot.
func (s *GetAggregatedAttestationOKDataData) GetSlot() string {
	return s.Slot
}

// GetIndex returns the value of Index.
func (s *GetAggregatedAttestationOKDataData) GetIndex() string {
	return s.Index
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *GetAggregatedAttestationOKDataData) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSource returns the value of Source.
func (s *GetAggregatedAttestationOKDataData) GetSource() GetAggregatedAttestationOKDataDataSource {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *GetAggregatedAttestationOKDataData) GetTarget() GetAggregatedAttestationOKDataDataTarget {
	return s.Target
}

// SetSlot sets the value of Slot.
func (s *GetAggregatedAttestationOKDataData) SetSlot(val string) {
	s.Slot = val
}

// SetIndex sets the value of Index.
func (s *GetAggregatedAttestationOKDataData) SetIndex(val string) {
	s.Index = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *GetAggregatedAttestationOKDataData) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSource sets the value of Source.
func (s *GetAggregatedAttestationOKDataData) SetSource(val GetAggregatedAttestationOKDataDataSource) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *GetAggregatedAttestationOKDataData) SetTarget(val GetAggregatedAttestationOKDataDataTarget) {
	s.Target = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetAggregatedAttestationOKDataDataSource struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetAggregatedAttestationOKDataDataSource) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetAggregatedAttestationOKDataDataSource) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetAggregatedAttestationOKDataDataSource) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetAggregatedAttestationOKDataDataSource) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetAggregatedAttestationOKDataDataTarget struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetAggregatedAttestationOKDataDataTarget) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetAggregatedAttestationOKDataDataTarget) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetAggregatedAttestationOKDataDataTarget) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetAggregatedAttestationOKDataDataTarget) SetRoot(val string) {
	s.Root = val
}

type GetAttestationsRewardsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetAttestationsRewardsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetAttestationsRewardsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetAttestationsRewardsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetAttestationsRewardsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetAttestationsRewardsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetAttestationsRewardsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetAttestationsRewardsBadRequest) getAttestationsRewardsRes() {}

type GetAttestationsRewardsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetAttestationsRewardsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetAttestationsRewardsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetAttestationsRewardsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetAttestationsRewardsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetAttestationsRewardsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetAttestationsRewardsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetAttestationsRewardsInternalServerError) getAttestationsRewardsRes() {}

type GetAttestationsRewardsNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetAttestationsRewardsNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetAttestationsRewardsNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetAttestationsRewardsNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetAttestationsRewardsNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetAttestationsRewardsNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetAttestationsRewardsNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetAttestationsRewardsNotFound) getAttestationsRewardsRes() {}

type GetAttestationsRewardsOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool `json:"finalized"`
	// Rewards info for attestations.
	Data GetAttestationsRewardsOKData `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetAttestationsRewardsOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetAttestationsRewardsOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetAttestationsRewardsOK) GetData() GetAttestationsRewardsOKData {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetAttestationsRewardsOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetAttestationsRewardsOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetAttestationsRewardsOK) SetData(val GetAttestationsRewardsOKData) {
	s.Data = val
}

func (*GetAttestationsRewardsOK) getAttestationsRewardsRes() {}

// Rewards info for attestations.
type GetAttestationsRewardsOKData struct {
	IdealRewards []GetAttestationsRewardsOKDataIdealRewardsItem `json:"ideal_rewards"`
	TotalRewards []GetAttestationsRewardsOKDataTotalRewardsItem `json:"total_rewards"`
}

// GetIdealRewards returns the value of IdealRewards.
func (s *GetAttestationsRewardsOKData) GetIdealRewards() []GetAttestationsRewardsOKDataIdealRewardsItem {
	return s.IdealRewards
}

// GetTotalRewards returns the value of TotalRewards.
func (s *GetAttestationsRewardsOKData) GetTotalRewards() []GetAttestationsRewardsOKDataTotalRewardsItem {
	return s.TotalRewards
}

// SetIdealRewards sets the value of IdealRewards.
func (s *GetAttestationsRewardsOKData) SetIdealRewards(val []GetAttestationsRewardsOKDataIdealRewardsItem) {
	s.IdealRewards = val
}

// SetTotalRewards sets the value of TotalRewards.
func (s *GetAttestationsRewardsOKData) SetTotalRewards(val []GetAttestationsRewardsOKDataTotalRewardsItem) {
	s.TotalRewards = val
}

// Ideal rewards info for a single attestation.
type GetAttestationsRewardsOKDataIdealRewardsItem struct {
	// Validator's effective balance in gwei.
	EffectiveBalance string `json:"effective_balance"`
	// Ideal attester's reward for head vote in gwei.
	Head string `json:"head"`
	// Ideal attester's reward for target vote in gwei.
	Target string `json:"target"`
	// Ideal attester's reward for source vote in gwei.
	Source string `json:"source"`
	// Ideal attester's inclusion_delay reward in gwei (phase0 only).
	InclusionDelay OptString `json:"inclusion_delay"`
	// Ideal attester's inactivity penalty in gwei.
	Inactivity string `json:"inactivity"`
}

// GetEffectiveBalance returns the value of EffectiveBalance.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) GetEffectiveBalance() string {
	return s.EffectiveBalance
}

// GetHead returns the value of Head.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) GetHead() string {
	return s.Head
}

// GetTarget returns the value of Target.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) GetTarget() string {
	return s.Target
}

// GetSource returns the value of Source.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) GetSource() string {
	return s.Source
}

// GetInclusionDelay returns the value of InclusionDelay.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) GetInclusionDelay() OptString {
	return s.InclusionDelay
}

// GetInactivity returns the value of Inactivity.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) GetInactivity() string {
	return s.Inactivity
}

// SetEffectiveBalance sets the value of EffectiveBalance.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) SetEffectiveBalance(val string) {
	s.EffectiveBalance = val
}

// SetHead sets the value of Head.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) SetHead(val string) {
	s.Head = val
}

// SetTarget sets the value of Target.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) SetTarget(val string) {
	s.Target = val
}

// SetSource sets the value of Source.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) SetSource(val string) {
	s.Source = val
}

// SetInclusionDelay sets the value of InclusionDelay.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) SetInclusionDelay(val OptString) {
	s.InclusionDelay = val
}

// SetInactivity sets the value of Inactivity.
func (s *GetAttestationsRewardsOKDataIdealRewardsItem) SetInactivity(val string) {
	s.Inactivity = val
}

// Rewards info for a single attestation.
type GetAttestationsRewardsOKDataTotalRewardsItem struct {
	// One entry for every validator based on their attestations in the epoch.
	ValidatorIndex string `json:"validator_index"`
	// Attester's reward for head vote in gwei.
	Head string `json:"head"`
	// Attester's reward for target vote in gwei.
	Target string `json:"target"`
	// Attester's reward for source vote in gwei.
	Source string `json:"source"`
	// Attester's inclusion_delay reward in gwei (phase0 only).
	InclusionDelay OptString `json:"inclusion_delay"`
	// Attester's inactivity penalty in gwei.
	Inactivity string `json:"inactivity"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetHead returns the value of Head.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) GetHead() string {
	return s.Head
}

// GetTarget returns the value of Target.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) GetTarget() string {
	return s.Target
}

// GetSource returns the value of Source.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) GetSource() string {
	return s.Source
}

// GetInclusionDelay returns the value of InclusionDelay.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) GetInclusionDelay() OptString {
	return s.InclusionDelay
}

// GetInactivity returns the value of Inactivity.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) GetInactivity() string {
	return s.Inactivity
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetHead sets the value of Head.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) SetHead(val string) {
	s.Head = val
}

// SetTarget sets the value of Target.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) SetTarget(val string) {
	s.Target = val
}

// SetSource sets the value of Source.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) SetSource(val string) {
	s.Source = val
}

// SetInclusionDelay sets the value of InclusionDelay.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) SetInclusionDelay(val OptString) {
	s.InclusionDelay = val
}

// SetInactivity sets the value of Inactivity.
func (s *GetAttestationsRewardsOKDataTotalRewardsItem) SetInactivity(val string) {
	s.Inactivity = val
}

type GetAttesterDutiesBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetAttesterDutiesBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetAttesterDutiesBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetAttesterDutiesBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetAttesterDutiesBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetAttesterDutiesBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetAttesterDutiesBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetAttesterDutiesBadRequest) getAttesterDutiesRes() {}

type GetAttesterDutiesInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetAttesterDutiesInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetAttesterDutiesInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetAttesterDutiesInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetAttesterDutiesInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetAttesterDutiesInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetAttesterDutiesInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetAttesterDutiesInternalServerError) getAttesterDutiesRes() {}

type GetAttesterDutiesOK struct {
	// The block root that this response is dependent on.
	DependentRoot string `json:"dependent_root"`
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool                          `json:"execution_optimistic"`
	Data                []GetAttesterDutiesOKDataItem `json:"data"`
}

// GetDependentRoot returns the value of DependentRoot.
func (s *GetAttesterDutiesOK) GetDependentRoot() string {
	return s.DependentRoot
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetAttesterDutiesOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetData returns the value of Data.
func (s *GetAttesterDutiesOK) GetData() []GetAttesterDutiesOKDataItem {
	return s.Data
}

// SetDependentRoot sets the value of DependentRoot.
func (s *GetAttesterDutiesOK) SetDependentRoot(val string) {
	s.DependentRoot = val
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetAttesterDutiesOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetData sets the value of Data.
func (s *GetAttesterDutiesOK) SetData(val []GetAttesterDutiesOKDataItem) {
	s.Data = val
}

func (*GetAttesterDutiesOK) getAttesterDutiesRes() {}

type GetAttesterDutiesOKDataItem struct {
	// The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix,
	// case insensitive._.
	Pubkey string `json:"pubkey"`
	// Index of validator in validator registry.
	ValidatorIndex string `json:"validator_index"`
	// The committee index.
	CommitteeIndex string `json:"committee_index"`
	// Number of validators in committee.
	CommitteeLength string `json:"committee_length"`
	// Number of committees at the provided slot.
	CommitteesAtSlot string `json:"committees_at_slot"`
	// Index of validator in committee.
	ValidatorCommitteeIndex string `json:"validator_committee_index"`
	// The slot at which the validator must attest.
	Slot string `json:"slot"`
}

// GetPubkey returns the value of Pubkey.
func (s *GetAttesterDutiesOKDataItem) GetPubkey() string {
	return s.Pubkey
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *GetAttesterDutiesOKDataItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetCommitteeIndex returns the value of CommitteeIndex.
func (s *GetAttesterDutiesOKDataItem) GetCommitteeIndex() string {
	return s.CommitteeIndex
}

// GetCommitteeLength returns the value of CommitteeLength.
func (s *GetAttesterDutiesOKDataItem) GetCommitteeLength() string {
	return s.CommitteeLength
}

// GetCommitteesAtSlot returns the value of CommitteesAtSlot.
func (s *GetAttesterDutiesOKDataItem) GetCommitteesAtSlot() string {
	return s.CommitteesAtSlot
}

// GetValidatorCommitteeIndex returns the value of ValidatorCommitteeIndex.
func (s *GetAttesterDutiesOKDataItem) GetValidatorCommitteeIndex() string {
	return s.ValidatorCommitteeIndex
}

// GetSlot returns the value of Slot.
func (s *GetAttesterDutiesOKDataItem) GetSlot() string {
	return s.Slot
}

// SetPubkey sets the value of Pubkey.
func (s *GetAttesterDutiesOKDataItem) SetPubkey(val string) {
	s.Pubkey = val
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *GetAttesterDutiesOKDataItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetCommitteeIndex sets the value of CommitteeIndex.
func (s *GetAttesterDutiesOKDataItem) SetCommitteeIndex(val string) {
	s.CommitteeIndex = val
}

// SetCommitteeLength sets the value of CommitteeLength.
func (s *GetAttesterDutiesOKDataItem) SetCommitteeLength(val string) {
	s.CommitteeLength = val
}

// SetCommitteesAtSlot sets the value of CommitteesAtSlot.
func (s *GetAttesterDutiesOKDataItem) SetCommitteesAtSlot(val string) {
	s.CommitteesAtSlot = val
}

// SetValidatorCommitteeIndex sets the value of ValidatorCommitteeIndex.
func (s *GetAttesterDutiesOKDataItem) SetValidatorCommitteeIndex(val string) {
	s.ValidatorCommitteeIndex = val
}

// SetSlot sets the value of Slot.
func (s *GetAttesterDutiesOKDataItem) SetSlot(val string) {
	s.Slot = val
}

type GetAttesterDutiesServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetAttesterDutiesServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetAttesterDutiesServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetAttesterDutiesServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetAttesterDutiesServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetAttesterDutiesServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetAttesterDutiesServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetAttesterDutiesServiceUnavailable) getAttesterDutiesRes() {}

type GetBlindedBlockBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlindedBlockBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlindedBlockBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlindedBlockBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlindedBlockBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlindedBlockBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlindedBlockBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlindedBlockBadRequest) getBlindedBlockRes() {}

type GetBlindedBlockInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlindedBlockInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlindedBlockInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlindedBlockInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlindedBlockInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlindedBlockInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlindedBlockInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlindedBlockInternalServerError) getBlindedBlockRes() {}

type GetBlindedBlockNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlindedBlockNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlindedBlockNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlindedBlockNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlindedBlockNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlindedBlockNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlindedBlockNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlindedBlockNotFound) getBlindedBlockRes() {}

// SSZ serialized block bytes. Use Accept header to choose this response type.
type GetBlindedBlockOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetBlindedBlockOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetBlindedBlockOKApplicationOctetStreamHeaders wraps GetBlindedBlockOKApplicationOctetStream with response headers.
type GetBlindedBlockOKApplicationOctetStreamHeaders struct {
	EthConsensusVersion GetBlindedBlockOKEthConsensusVersion
	Response            GetBlindedBlockOKApplicationOctetStream
}

// GetEthConsensusVersion returns the value of EthConsensusVersion.
func (s *GetBlindedBlockOKApplicationOctetStreamHeaders) GetEthConsensusVersion() GetBlindedBlockOKEthConsensusVersion {
	return s.EthConsensusVersion
}

// GetResponse returns the value of Response.
func (s *GetBlindedBlockOKApplicationOctetStreamHeaders) GetResponse() GetBlindedBlockOKApplicationOctetStream {
	return s.Response
}

// SetEthConsensusVersion sets the value of EthConsensusVersion.
func (s *GetBlindedBlockOKApplicationOctetStreamHeaders) SetEthConsensusVersion(val GetBlindedBlockOKEthConsensusVersion) {
	s.EthConsensusVersion = val
}

// SetResponse sets the value of Response.
func (s *GetBlindedBlockOKApplicationOctetStreamHeaders) SetResponse(val GetBlindedBlockOKApplicationOctetStream) {
	s.Response = val
}

func (*GetBlindedBlockOKApplicationOctetStreamHeaders) getBlindedBlockRes() {}

type GetBlindedBlockOKEthConsensusVersion string

const (
	GetBlindedBlockOKEthConsensusVersionPhase0    GetBlindedBlockOKEthConsensusVersion = "phase0"
	GetBlindedBlockOKEthConsensusVersionAltair    GetBlindedBlockOKEthConsensusVersion = "altair"
	GetBlindedBlockOKEthConsensusVersionBellatrix GetBlindedBlockOKEthConsensusVersion = "bellatrix"
	GetBlindedBlockOKEthConsensusVersionCapella   GetBlindedBlockOKEthConsensusVersion = "capella"
	GetBlindedBlockOKEthConsensusVersionDeneb     GetBlindedBlockOKEthConsensusVersion = "deneb"
)

// AllValues returns all GetBlindedBlockOKEthConsensusVersion values.
func (GetBlindedBlockOKEthConsensusVersion) AllValues() []GetBlindedBlockOKEthConsensusVersion {
	return []GetBlindedBlockOKEthConsensusVersion{
		GetBlindedBlockOKEthConsensusVersionPhase0,
		GetBlindedBlockOKEthConsensusVersionAltair,
		GetBlindedBlockOKEthConsensusVersionBellatrix,
		GetBlindedBlockOKEthConsensusVersionCapella,
		GetBlindedBlockOKEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetBlindedBlockOKEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case GetBlindedBlockOKEthConsensusVersionPhase0:
		return []byte(s), nil
	case GetBlindedBlockOKEthConsensusVersionAltair:
		return []byte(s), nil
	case GetBlindedBlockOKEthConsensusVersionBellatrix:
		return []byte(s), nil
	case GetBlindedBlockOKEthConsensusVersionCapella:
		return []byte(s), nil
	case GetBlindedBlockOKEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetBlindedBlockOKEthConsensusVersion) UnmarshalText(data []byte) error {
	switch GetBlindedBlockOKEthConsensusVersion(data) {
	case GetBlindedBlockOKEthConsensusVersionPhase0:
		*s = GetBlindedBlockOKEthConsensusVersionPhase0
		return nil
	case GetBlindedBlockOKEthConsensusVersionAltair:
		*s = GetBlindedBlockOKEthConsensusVersionAltair
		return nil
	case GetBlindedBlockOKEthConsensusVersionBellatrix:
		*s = GetBlindedBlockOKEthConsensusVersionBellatrix
		return nil
	case GetBlindedBlockOKEthConsensusVersionCapella:
		*s = GetBlindedBlockOKEthConsensusVersionCapella
		return nil
	case GetBlindedBlockOKEthConsensusVersionDeneb:
		*s = GetBlindedBlockOKEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetBlobSidecarsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlobSidecarsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlobSidecarsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlobSidecarsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlobSidecarsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlobSidecarsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlobSidecarsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlobSidecarsBadRequest) getBlobSidecarsRes() {}

type GetBlobSidecarsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlobSidecarsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlobSidecarsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlobSidecarsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlobSidecarsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlobSidecarsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlobSidecarsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlobSidecarsInternalServerError) getBlobSidecarsRes() {}

type GetBlobSidecarsNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlobSidecarsNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlobSidecarsNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlobSidecarsNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlobSidecarsNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlobSidecarsNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlobSidecarsNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlobSidecarsNotFound) getBlobSidecarsRes() {}

type GetBlobSidecarsOKApplicationJSON struct {
	Data []GetBlobSidecarsOKApplicationJSONDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBlobSidecarsOKApplicationJSON) GetData() []GetBlobSidecarsOKApplicationJSONDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBlobSidecarsOKApplicationJSON) SetData(val []GetBlobSidecarsOKApplicationJSONDataItem) {
	s.Data = val
}

func (*GetBlobSidecarsOKApplicationJSON) getBlobSidecarsRes() {}

// A blob sidecar as defined in the Deneb consensus spec.
type GetBlobSidecarsOKApplicationJSONDataItem struct {
	Index string `json:"index"`
	// A blob is `FIELD_ELEMENTS_PER_BLOB * size_of(BLSFieldElement) = 4096 * 32 = 131072` bytes (`DATA`)
	// representing a SSZ-encoded Blob as defined in Deneb.
	Blob string `json:"blob"`
	// A G1 curve point. Same as BLS standard "is valid pubkey" check but also allows `0x00..00` for
	// point-at-infinity.
	KzgCommitment string `json:"kzg_commitment"`
	// A G1 curve point. Used for verifying that the `KZGCommitment` for a given `Blob` is correct.
	KzgProof string `json:"kzg_proof"`
	// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
	SignedBlockHeader           GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeader `json:"signed_block_header"`
	KzgCommitmentInclusionProof []string                                                  `json:"kzg_commitment_inclusion_proof"`
}

// GetIndex returns the value of Index.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) GetIndex() string {
	return s.Index
}

// GetBlob returns the value of Blob.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) GetBlob() string {
	return s.Blob
}

// GetKzgCommitment returns the value of KzgCommitment.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) GetKzgCommitment() string {
	return s.KzgCommitment
}

// GetKzgProof returns the value of KzgProof.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) GetKzgProof() string {
	return s.KzgProof
}

// GetSignedBlockHeader returns the value of SignedBlockHeader.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) GetSignedBlockHeader() GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeader {
	return s.SignedBlockHeader
}

// GetKzgCommitmentInclusionProof returns the value of KzgCommitmentInclusionProof.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) GetKzgCommitmentInclusionProof() []string {
	return s.KzgCommitmentInclusionProof
}

// SetIndex sets the value of Index.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) SetIndex(val string) {
	s.Index = val
}

// SetBlob sets the value of Blob.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) SetBlob(val string) {
	s.Blob = val
}

// SetKzgCommitment sets the value of KzgCommitment.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) SetKzgCommitment(val string) {
	s.KzgCommitment = val
}

// SetKzgProof sets the value of KzgProof.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) SetKzgProof(val string) {
	s.KzgProof = val
}

// SetSignedBlockHeader sets the value of SignedBlockHeader.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) SetSignedBlockHeader(val GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeader) {
	s.SignedBlockHeader = val
}

// SetKzgCommitmentInclusionProof sets the value of KzgCommitmentInclusionProof.
func (s *GetBlobSidecarsOKApplicationJSONDataItem) SetKzgCommitmentInclusionProof(val []string) {
	s.KzgCommitmentInclusionProof = val
}

// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
type GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeader struct {
	// The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec.
	Message   GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage `json:"message"`
	Signature string                                                           `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeader) GetMessage() GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeader) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeader) SetMessage(val GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeader) SetSignature(val string) {
	s.Signature = val
}

// Merged schema.
type GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage struct {
	// The slot to which this block corresponds.
	Slot string `json:"slot"`
	// Index of validator in validator registry.
	ProposerIndex string `json:"proposer_index"`
	// The signing merkle root of the parent `BeaconBlock`.
	ParentRoot string `json:"parent_root"`
	// The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
	StateRoot string `json:"state_root"`
	// The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`.
	BodyRoot string `json:"body_root"`
}

// GetSlot returns the value of Slot.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) GetSlot() string {
	return s.Slot
}

// GetProposerIndex returns the value of ProposerIndex.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) GetProposerIndex() string {
	return s.ProposerIndex
}

// GetParentRoot returns the value of ParentRoot.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) GetParentRoot() string {
	return s.ParentRoot
}

// GetStateRoot returns the value of StateRoot.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) GetStateRoot() string {
	return s.StateRoot
}

// GetBodyRoot returns the value of BodyRoot.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) GetBodyRoot() string {
	return s.BodyRoot
}

// SetSlot sets the value of Slot.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) SetSlot(val string) {
	s.Slot = val
}

// SetProposerIndex sets the value of ProposerIndex.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) SetProposerIndex(val string) {
	s.ProposerIndex = val
}

// SetParentRoot sets the value of ParentRoot.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) SetParentRoot(val string) {
	s.ParentRoot = val
}

// SetStateRoot sets the value of StateRoot.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) SetStateRoot(val string) {
	s.StateRoot = val
}

// SetBodyRoot sets the value of BodyRoot.
func (s *GetBlobSidecarsOKApplicationJSONDataItemSignedBlockHeaderMessage) SetBodyRoot(val string) {
	s.BodyRoot = val
}

// SSZ serialized `BlobSidecars` bytes. Use Accept header to choose this response type.
type GetBlobSidecarsOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetBlobSidecarsOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetBlobSidecarsOKApplicationOctetStream) getBlobSidecarsRes() {}

type GetBlockAttestationsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockAttestationsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockAttestationsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockAttestationsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockAttestationsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockAttestationsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockAttestationsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockAttestationsBadRequest) getBlockAttestationsRes() {}

type GetBlockAttestationsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockAttestationsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockAttestationsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockAttestationsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockAttestationsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockAttestationsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockAttestationsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockAttestationsInternalServerError) getBlockAttestationsRes() {}

type GetBlockAttestationsNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockAttestationsNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockAttestationsNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockAttestationsNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockAttestationsNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockAttestationsNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockAttestationsNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockAttestationsNotFound) getBlockAttestationsRes() {}

type GetBlockAttestationsOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                             `json:"finalized"`
	Data      []GetBlockAttestationsOKDataItem `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetBlockAttestationsOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetBlockAttestationsOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetBlockAttestationsOK) GetData() []GetBlockAttestationsOKDataItem {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetBlockAttestationsOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetBlockAttestationsOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetBlockAttestationsOK) SetData(val []GetBlockAttestationsOKDataItem) {
	s.Data = val
}

func (*GetBlockAttestationsOK) getBlockAttestationsRes() {}

// The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestation) object from the CL spec.
type GetBlockAttestationsOKDataItem struct {
	// Attester aggregation bits.
	AggregationBits string `json:"aggregation_bits"`
	// BLS aggregate signature.
	Signature string `json:"signature"`
	// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
	Data GetBlockAttestationsOKDataItemData `json:"data"`
}

// GetAggregationBits returns the value of AggregationBits.
func (s *GetBlockAttestationsOKDataItem) GetAggregationBits() string {
	return s.AggregationBits
}

// GetSignature returns the value of Signature.
func (s *GetBlockAttestationsOKDataItem) GetSignature() string {
	return s.Signature
}

// GetData returns the value of Data.
func (s *GetBlockAttestationsOKDataItem) GetData() GetBlockAttestationsOKDataItemData {
	return s.Data
}

// SetAggregationBits sets the value of AggregationBits.
func (s *GetBlockAttestationsOKDataItem) SetAggregationBits(val string) {
	s.AggregationBits = val
}

// SetSignature sets the value of Signature.
func (s *GetBlockAttestationsOKDataItem) SetSignature(val string) {
	s.Signature = val
}

// SetData sets the value of Data.
func (s *GetBlockAttestationsOKDataItem) SetData(val GetBlockAttestationsOKDataItemData) {
	s.Data = val
}

// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
type GetBlockAttestationsOKDataItemData struct {
	Slot  string `json:"slot"`
	Index string `json:"index"`
	// LMD GHOST vote.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Source GetBlockAttestationsOKDataItemDataSource `json:"source"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Target GetBlockAttestationsOKDataItemDataTarget `json:"target"`
}

// GetSlot returns the value of Slot.
func (s *GetBlockAttestationsOKDataItemData) GetSlot() string {
	return s.Slot
}

// GetIndex returns the value of Index.
func (s *GetBlockAttestationsOKDataItemData) GetIndex() string {
	return s.Index
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *GetBlockAttestationsOKDataItemData) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSource returns the value of Source.
func (s *GetBlockAttestationsOKDataItemData) GetSource() GetBlockAttestationsOKDataItemDataSource {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *GetBlockAttestationsOKDataItemData) GetTarget() GetBlockAttestationsOKDataItemDataTarget {
	return s.Target
}

// SetSlot sets the value of Slot.
func (s *GetBlockAttestationsOKDataItemData) SetSlot(val string) {
	s.Slot = val
}

// SetIndex sets the value of Index.
func (s *GetBlockAttestationsOKDataItemData) SetIndex(val string) {
	s.Index = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *GetBlockAttestationsOKDataItemData) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSource sets the value of Source.
func (s *GetBlockAttestationsOKDataItemData) SetSource(val GetBlockAttestationsOKDataItemDataSource) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *GetBlockAttestationsOKDataItemData) SetTarget(val GetBlockAttestationsOKDataItemDataTarget) {
	s.Target = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetBlockAttestationsOKDataItemDataSource struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetBlockAttestationsOKDataItemDataSource) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetBlockAttestationsOKDataItemDataSource) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetBlockAttestationsOKDataItemDataSource) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetBlockAttestationsOKDataItemDataSource) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetBlockAttestationsOKDataItemDataTarget struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetBlockAttestationsOKDataItemDataTarget) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetBlockAttestationsOKDataItemDataTarget) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetBlockAttestationsOKDataItemDataTarget) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetBlockAttestationsOKDataItemDataTarget) SetRoot(val string) {
	s.Root = val
}

type GetBlockHeaderBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockHeaderBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockHeaderBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockHeaderBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockHeaderBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockHeaderBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockHeaderBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockHeaderBadRequest) getBlockHeaderRes() {}

type GetBlockHeaderInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockHeaderInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockHeaderInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockHeaderInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockHeaderInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockHeaderInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockHeaderInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockHeaderInternalServerError) getBlockHeaderRes() {}

type GetBlockHeaderNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockHeaderNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockHeaderNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockHeaderNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockHeaderNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockHeaderNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockHeaderNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockHeaderNotFound) getBlockHeaderRes() {}

type GetBlockHeaderOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                 `json:"finalized"`
	Data      GetBlockHeaderOKData `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetBlockHeaderOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetBlockHeaderOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetBlockHeaderOK) GetData() GetBlockHeaderOKData {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetBlockHeaderOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetBlockHeaderOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetBlockHeaderOK) SetData(val GetBlockHeaderOKData) {
	s.Data = val
}

func (*GetBlockHeaderOK) getBlockHeaderRes() {}

type GetBlockHeaderOKData struct {
	Root      string `json:"root"`
	Canonical bool   `json:"canonical"`
	// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
	Header GetBlockHeaderOKDataHeader `json:"header"`
}

// GetRoot returns the value of Root.
func (s *GetBlockHeaderOKData) GetRoot() string {
	return s.Root
}

// GetCanonical returns the value of Canonical.
func (s *GetBlockHeaderOKData) GetCanonical() bool {
	return s.Canonical
}

// GetHeader returns the value of Header.
func (s *GetBlockHeaderOKData) GetHeader() GetBlockHeaderOKDataHeader {
	return s.Header
}

// SetRoot sets the value of Root.
func (s *GetBlockHeaderOKData) SetRoot(val string) {
	s.Root = val
}

// SetCanonical sets the value of Canonical.
func (s *GetBlockHeaderOKData) SetCanonical(val bool) {
	s.Canonical = val
}

// SetHeader sets the value of Header.
func (s *GetBlockHeaderOKData) SetHeader(val GetBlockHeaderOKDataHeader) {
	s.Header = val
}

// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
type GetBlockHeaderOKDataHeader struct {
	// The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec.
	Message   GetBlockHeaderOKDataHeaderMessage `json:"message"`
	Signature string                            `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *GetBlockHeaderOKDataHeader) GetMessage() GetBlockHeaderOKDataHeaderMessage {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *GetBlockHeaderOKDataHeader) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *GetBlockHeaderOKDataHeader) SetMessage(val GetBlockHeaderOKDataHeaderMessage) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *GetBlockHeaderOKDataHeader) SetSignature(val string) {
	s.Signature = val
}

// Merged schema.
type GetBlockHeaderOKDataHeaderMessage struct {
	// The slot to which this block corresponds.
	Slot string `json:"slot"`
	// Index of validator in validator registry.
	ProposerIndex string `json:"proposer_index"`
	// The signing merkle root of the parent `BeaconBlock`.
	ParentRoot string `json:"parent_root"`
	// The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
	StateRoot string `json:"state_root"`
	// The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`.
	BodyRoot string `json:"body_root"`
}

// GetSlot returns the value of Slot.
func (s *GetBlockHeaderOKDataHeaderMessage) GetSlot() string {
	return s.Slot
}

// GetProposerIndex returns the value of ProposerIndex.
func (s *GetBlockHeaderOKDataHeaderMessage) GetProposerIndex() string {
	return s.ProposerIndex
}

// GetParentRoot returns the value of ParentRoot.
func (s *GetBlockHeaderOKDataHeaderMessage) GetParentRoot() string {
	return s.ParentRoot
}

// GetStateRoot returns the value of StateRoot.
func (s *GetBlockHeaderOKDataHeaderMessage) GetStateRoot() string {
	return s.StateRoot
}

// GetBodyRoot returns the value of BodyRoot.
func (s *GetBlockHeaderOKDataHeaderMessage) GetBodyRoot() string {
	return s.BodyRoot
}

// SetSlot sets the value of Slot.
func (s *GetBlockHeaderOKDataHeaderMessage) SetSlot(val string) {
	s.Slot = val
}

// SetProposerIndex sets the value of ProposerIndex.
func (s *GetBlockHeaderOKDataHeaderMessage) SetProposerIndex(val string) {
	s.ProposerIndex = val
}

// SetParentRoot sets the value of ParentRoot.
func (s *GetBlockHeaderOKDataHeaderMessage) SetParentRoot(val string) {
	s.ParentRoot = val
}

// SetStateRoot sets the value of StateRoot.
func (s *GetBlockHeaderOKDataHeaderMessage) SetStateRoot(val string) {
	s.StateRoot = val
}

// SetBodyRoot sets the value of BodyRoot.
func (s *GetBlockHeaderOKDataHeaderMessage) SetBodyRoot(val string) {
	s.BodyRoot = val
}

type GetBlockHeadersBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockHeadersBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockHeadersBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockHeadersBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockHeadersBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockHeadersBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockHeadersBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockHeadersBadRequest) getBlockHeadersRes() {}

type GetBlockHeadersInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockHeadersInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockHeadersInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockHeadersInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockHeadersInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockHeadersInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockHeadersInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockHeadersInternalServerError) getBlockHeadersRes() {}

type GetBlockHeadersOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                        `json:"finalized"`
	Data      []GetBlockHeadersOKDataItem `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetBlockHeadersOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetBlockHeadersOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetBlockHeadersOK) GetData() []GetBlockHeadersOKDataItem {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetBlockHeadersOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetBlockHeadersOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetBlockHeadersOK) SetData(val []GetBlockHeadersOKDataItem) {
	s.Data = val
}

func (*GetBlockHeadersOK) getBlockHeadersRes() {}

type GetBlockHeadersOKDataItem struct {
	Root      string `json:"root"`
	Canonical bool   `json:"canonical"`
	// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
	Header GetBlockHeadersOKDataItemHeader `json:"header"`
}

// GetRoot returns the value of Root.
func (s *GetBlockHeadersOKDataItem) GetRoot() string {
	return s.Root
}

// GetCanonical returns the value of Canonical.
func (s *GetBlockHeadersOKDataItem) GetCanonical() bool {
	return s.Canonical
}

// GetHeader returns the value of Header.
func (s *GetBlockHeadersOKDataItem) GetHeader() GetBlockHeadersOKDataItemHeader {
	return s.Header
}

// SetRoot sets the value of Root.
func (s *GetBlockHeadersOKDataItem) SetRoot(val string) {
	s.Root = val
}

// SetCanonical sets the value of Canonical.
func (s *GetBlockHeadersOKDataItem) SetCanonical(val bool) {
	s.Canonical = val
}

// SetHeader sets the value of Header.
func (s *GetBlockHeadersOKDataItem) SetHeader(val GetBlockHeadersOKDataItemHeader) {
	s.Header = val
}

// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
type GetBlockHeadersOKDataItemHeader struct {
	// The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec.
	Message   GetBlockHeadersOKDataItemHeaderMessage `json:"message"`
	Signature string                                 `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *GetBlockHeadersOKDataItemHeader) GetMessage() GetBlockHeadersOKDataItemHeaderMessage {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *GetBlockHeadersOKDataItemHeader) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *GetBlockHeadersOKDataItemHeader) SetMessage(val GetBlockHeadersOKDataItemHeaderMessage) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *GetBlockHeadersOKDataItemHeader) SetSignature(val string) {
	s.Signature = val
}

// Merged schema.
type GetBlockHeadersOKDataItemHeaderMessage struct {
	// The slot to which this block corresponds.
	Slot string `json:"slot"`
	// Index of validator in validator registry.
	ProposerIndex string `json:"proposer_index"`
	// The signing merkle root of the parent `BeaconBlock`.
	ParentRoot string `json:"parent_root"`
	// The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
	StateRoot string `json:"state_root"`
	// The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`.
	BodyRoot string `json:"body_root"`
}

// GetSlot returns the value of Slot.
func (s *GetBlockHeadersOKDataItemHeaderMessage) GetSlot() string {
	return s.Slot
}

// GetProposerIndex returns the value of ProposerIndex.
func (s *GetBlockHeadersOKDataItemHeaderMessage) GetProposerIndex() string {
	return s.ProposerIndex
}

// GetParentRoot returns the value of ParentRoot.
func (s *GetBlockHeadersOKDataItemHeaderMessage) GetParentRoot() string {
	return s.ParentRoot
}

// GetStateRoot returns the value of StateRoot.
func (s *GetBlockHeadersOKDataItemHeaderMessage) GetStateRoot() string {
	return s.StateRoot
}

// GetBodyRoot returns the value of BodyRoot.
func (s *GetBlockHeadersOKDataItemHeaderMessage) GetBodyRoot() string {
	return s.BodyRoot
}

// SetSlot sets the value of Slot.
func (s *GetBlockHeadersOKDataItemHeaderMessage) SetSlot(val string) {
	s.Slot = val
}

// SetProposerIndex sets the value of ProposerIndex.
func (s *GetBlockHeadersOKDataItemHeaderMessage) SetProposerIndex(val string) {
	s.ProposerIndex = val
}

// SetParentRoot sets the value of ParentRoot.
func (s *GetBlockHeadersOKDataItemHeaderMessage) SetParentRoot(val string) {
	s.ParentRoot = val
}

// SetStateRoot sets the value of StateRoot.
func (s *GetBlockHeadersOKDataItemHeaderMessage) SetStateRoot(val string) {
	s.StateRoot = val
}

// SetBodyRoot sets the value of BodyRoot.
func (s *GetBlockHeadersOKDataItemHeaderMessage) SetBodyRoot(val string) {
	s.BodyRoot = val
}

type GetBlockRewardsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockRewardsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockRewardsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockRewardsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockRewardsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockRewardsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockRewardsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockRewardsBadRequest) getBlockRewardsRes() {}

type GetBlockRewardsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockRewardsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockRewardsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockRewardsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockRewardsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockRewardsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockRewardsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockRewardsInternalServerError) getBlockRewardsRes() {}

type GetBlockRewardsNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockRewardsNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockRewardsNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockRewardsNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockRewardsNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockRewardsNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockRewardsNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockRewardsNotFound) getBlockRewardsRes() {}

type GetBlockRewardsOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool `json:"finalized"`
	// Rewards info for a single block.
	Data GetBlockRewardsOKData `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetBlockRewardsOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetBlockRewardsOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetBlockRewardsOK) GetData() GetBlockRewardsOKData {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetBlockRewardsOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetBlockRewardsOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetBlockRewardsOK) SetData(val GetBlockRewardsOKData) {
	s.Data = val
}

func (*GetBlockRewardsOK) getBlockRewardsRes() {}

// Rewards info for a single block.
type GetBlockRewardsOKData struct {
	// Proposer of the block, the proposer index who receives these rewards.
	ProposerIndex string `json:"proposer_index"`
	// Total block reward in gwei, equal to attestations + sync_aggregate + proposer_slashings +
	// attester_slashings.
	Total string `json:"total"`
	// Block reward component due to included attestations in gwei.
	Attestations string `json:"attestations"`
	// Block reward component due to included sync_aggregate in gwei.
	SyncAggregate string `json:"sync_aggregate"`
	// Block reward component due to included proposer_slashings in gwei.
	ProposerSlashings string `json:"proposer_slashings"`
	// Block reward component due to included attester_slashings in gwei.
	AttesterSlashings string `json:"attester_slashings"`
}

// GetProposerIndex returns the value of ProposerIndex.
func (s *GetBlockRewardsOKData) GetProposerIndex() string {
	return s.ProposerIndex
}

// GetTotal returns the value of Total.
func (s *GetBlockRewardsOKData) GetTotal() string {
	return s.Total
}

// GetAttestations returns the value of Attestations.
func (s *GetBlockRewardsOKData) GetAttestations() string {
	return s.Attestations
}

// GetSyncAggregate returns the value of SyncAggregate.
func (s *GetBlockRewardsOKData) GetSyncAggregate() string {
	return s.SyncAggregate
}

// GetProposerSlashings returns the value of ProposerSlashings.
func (s *GetBlockRewardsOKData) GetProposerSlashings() string {
	return s.ProposerSlashings
}

// GetAttesterSlashings returns the value of AttesterSlashings.
func (s *GetBlockRewardsOKData) GetAttesterSlashings() string {
	return s.AttesterSlashings
}

// SetProposerIndex sets the value of ProposerIndex.
func (s *GetBlockRewardsOKData) SetProposerIndex(val string) {
	s.ProposerIndex = val
}

// SetTotal sets the value of Total.
func (s *GetBlockRewardsOKData) SetTotal(val string) {
	s.Total = val
}

// SetAttestations sets the value of Attestations.
func (s *GetBlockRewardsOKData) SetAttestations(val string) {
	s.Attestations = val
}

// SetSyncAggregate sets the value of SyncAggregate.
func (s *GetBlockRewardsOKData) SetSyncAggregate(val string) {
	s.SyncAggregate = val
}

// SetProposerSlashings sets the value of ProposerSlashings.
func (s *GetBlockRewardsOKData) SetProposerSlashings(val string) {
	s.ProposerSlashings = val
}

// SetAttesterSlashings sets the value of AttesterSlashings.
func (s *GetBlockRewardsOKData) SetAttesterSlashings(val string) {
	s.AttesterSlashings = val
}

type GetBlockRootBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockRootBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockRootBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockRootBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockRootBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockRootBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockRootBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockRootBadRequest) getBlockRootRes() {}

type GetBlockRootInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockRootInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockRootInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockRootInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockRootInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockRootInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockRootInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockRootInternalServerError) getBlockRootRes() {}

type GetBlockRootNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockRootNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockRootNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockRootNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockRootNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockRootNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockRootNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockRootNotFound) getBlockRootRes() {}

type GetBlockRootOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool               `json:"finalized"`
	Data      GetBlockRootOKData `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetBlockRootOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetBlockRootOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetBlockRootOK) GetData() GetBlockRootOKData {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetBlockRootOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetBlockRootOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetBlockRootOK) SetData(val GetBlockRootOKData) {
	s.Data = val
}

func (*GetBlockRootOK) getBlockRootRes() {}

type GetBlockRootOKData struct {
	// HashTreeRoot of BeaconBlock/BeaconBlockHeader object.
	Root string `json:"root"`
}

// GetRoot returns the value of Root.
func (s *GetBlockRootOKData) GetRoot() string {
	return s.Root
}

// SetRoot sets the value of Root.
func (s *GetBlockRootOKData) SetRoot(val string) {
	s.Root = val
}

type GetBlockV2BadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockV2BadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockV2BadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockV2BadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockV2BadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockV2BadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockV2BadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockV2BadRequest) getBlockV2Res() {}

type GetBlockV2InternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockV2InternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockV2InternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockV2InternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockV2InternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockV2InternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockV2InternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockV2InternalServerError) getBlockV2Res() {}

type GetBlockV2NotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetBlockV2NotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetBlockV2NotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetBlockV2NotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetBlockV2NotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetBlockV2NotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetBlockV2NotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetBlockV2NotFound) getBlockV2Res() {}

// SSZ serialized block bytes. Use Accept header to choose this response type.
type GetBlockV2OKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetBlockV2OKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetBlockV2OKApplicationOctetStreamHeaders wraps GetBlockV2OKApplicationOctetStream with response headers.
type GetBlockV2OKApplicationOctetStreamHeaders struct {
	EthConsensusVersion GetBlockV2OKEthConsensusVersion
	Response            GetBlockV2OKApplicationOctetStream
}

// GetEthConsensusVersion returns the value of EthConsensusVersion.
func (s *GetBlockV2OKApplicationOctetStreamHeaders) GetEthConsensusVersion() GetBlockV2OKEthConsensusVersion {
	return s.EthConsensusVersion
}

// GetResponse returns the value of Response.
func (s *GetBlockV2OKApplicationOctetStreamHeaders) GetResponse() GetBlockV2OKApplicationOctetStream {
	return s.Response
}

// SetEthConsensusVersion sets the value of EthConsensusVersion.
func (s *GetBlockV2OKApplicationOctetStreamHeaders) SetEthConsensusVersion(val GetBlockV2OKEthConsensusVersion) {
	s.EthConsensusVersion = val
}

// SetResponse sets the value of Response.
func (s *GetBlockV2OKApplicationOctetStreamHeaders) SetResponse(val GetBlockV2OKApplicationOctetStream) {
	s.Response = val
}

func (*GetBlockV2OKApplicationOctetStreamHeaders) getBlockV2Res() {}

type GetBlockV2OKEthConsensusVersion string

const (
	GetBlockV2OKEthConsensusVersionPhase0    GetBlockV2OKEthConsensusVersion = "phase0"
	GetBlockV2OKEthConsensusVersionAltair    GetBlockV2OKEthConsensusVersion = "altair"
	GetBlockV2OKEthConsensusVersionBellatrix GetBlockV2OKEthConsensusVersion = "bellatrix"
	GetBlockV2OKEthConsensusVersionCapella   GetBlockV2OKEthConsensusVersion = "capella"
	GetBlockV2OKEthConsensusVersionDeneb     GetBlockV2OKEthConsensusVersion = "deneb"
)

// AllValues returns all GetBlockV2OKEthConsensusVersion values.
func (GetBlockV2OKEthConsensusVersion) AllValues() []GetBlockV2OKEthConsensusVersion {
	return []GetBlockV2OKEthConsensusVersion{
		GetBlockV2OKEthConsensusVersionPhase0,
		GetBlockV2OKEthConsensusVersionAltair,
		GetBlockV2OKEthConsensusVersionBellatrix,
		GetBlockV2OKEthConsensusVersionCapella,
		GetBlockV2OKEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetBlockV2OKEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case GetBlockV2OKEthConsensusVersionPhase0:
		return []byte(s), nil
	case GetBlockV2OKEthConsensusVersionAltair:
		return []byte(s), nil
	case GetBlockV2OKEthConsensusVersionBellatrix:
		return []byte(s), nil
	case GetBlockV2OKEthConsensusVersionCapella:
		return []byte(s), nil
	case GetBlockV2OKEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetBlockV2OKEthConsensusVersion) UnmarshalText(data []byte) error {
	switch GetBlockV2OKEthConsensusVersion(data) {
	case GetBlockV2OKEthConsensusVersionPhase0:
		*s = GetBlockV2OKEthConsensusVersionPhase0
		return nil
	case GetBlockV2OKEthConsensusVersionAltair:
		*s = GetBlockV2OKEthConsensusVersionAltair
		return nil
	case GetBlockV2OKEthConsensusVersionBellatrix:
		*s = GetBlockV2OKEthConsensusVersionBellatrix
		return nil
	case GetBlockV2OKEthConsensusVersionCapella:
		*s = GetBlockV2OKEthConsensusVersionCapella
		return nil
	case GetBlockV2OKEthConsensusVersionDeneb:
		*s = GetBlockV2OKEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetDebugChainHeadsV2InternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetDebugChainHeadsV2InternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetDebugChainHeadsV2InternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetDebugChainHeadsV2InternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetDebugChainHeadsV2InternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetDebugChainHeadsV2InternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetDebugChainHeadsV2InternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetDebugChainHeadsV2InternalServerError) getDebugChainHeadsV2Res() {}

type GetDebugChainHeadsV2OK struct {
	Data []GetDebugChainHeadsV2OKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetDebugChainHeadsV2OK) GetData() []GetDebugChainHeadsV2OKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetDebugChainHeadsV2OK) SetData(val []GetDebugChainHeadsV2OKDataItem) {
	s.Data = val
}

func (*GetDebugChainHeadsV2OK) getDebugChainHeadsV2Res() {}

type GetDebugChainHeadsV2OKDataItem struct {
	Root string `json:"root"`
	Slot string `json:"slot"`
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
}

// GetRoot returns the value of Root.
func (s *GetDebugChainHeadsV2OKDataItem) GetRoot() string {
	return s.Root
}

// GetSlot returns the value of Slot.
func (s *GetDebugChainHeadsV2OKDataItem) GetSlot() string {
	return s.Slot
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetDebugChainHeadsV2OKDataItem) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// SetRoot sets the value of Root.
func (s *GetDebugChainHeadsV2OKDataItem) SetRoot(val string) {
	s.Root = val
}

// SetSlot sets the value of Slot.
func (s *GetDebugChainHeadsV2OKDataItem) SetSlot(val string) {
	s.Slot = val
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetDebugChainHeadsV2OKDataItem) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

type GetDebugForkChoiceInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetDebugForkChoiceInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetDebugForkChoiceInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetDebugForkChoiceInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetDebugForkChoiceInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetDebugForkChoiceInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetDebugForkChoiceInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetDebugForkChoiceInternalServerError) getDebugForkChoiceRes() {}

// Debugging context of fork choice.
type GetDebugForkChoiceOK struct {
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	JustifiedCheckpoint GetDebugForkChoiceOKJustifiedCheckpoint `json:"justified_checkpoint"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	FinalizedCheckpoint GetDebugForkChoiceOKFinalizedCheckpoint `json:"finalized_checkpoint"`
	// Fork choice nodes.
	ForkChoiceNodes []GetDebugForkChoiceOKForkChoiceNodesItem `json:"fork_choice_nodes"`
	// Optional extra data that clients may provide, which could differ from client to client.
	ExtraData *GetDebugForkChoiceOKExtraData `json:"extra_data"`
}

// GetJustifiedCheckpoint returns the value of JustifiedCheckpoint.
func (s *GetDebugForkChoiceOK) GetJustifiedCheckpoint() GetDebugForkChoiceOKJustifiedCheckpoint {
	return s.JustifiedCheckpoint
}

// GetFinalizedCheckpoint returns the value of FinalizedCheckpoint.
func (s *GetDebugForkChoiceOK) GetFinalizedCheckpoint() GetDebugForkChoiceOKFinalizedCheckpoint {
	return s.FinalizedCheckpoint
}

// GetForkChoiceNodes returns the value of ForkChoiceNodes.
func (s *GetDebugForkChoiceOK) GetForkChoiceNodes() []GetDebugForkChoiceOKForkChoiceNodesItem {
	return s.ForkChoiceNodes
}

// GetExtraData returns the value of ExtraData.
func (s *GetDebugForkChoiceOK) GetExtraData() *GetDebugForkChoiceOKExtraData {
	return s.ExtraData
}

// SetJustifiedCheckpoint sets the value of JustifiedCheckpoint.
func (s *GetDebugForkChoiceOK) SetJustifiedCheckpoint(val GetDebugForkChoiceOKJustifiedCheckpoint) {
	s.JustifiedCheckpoint = val
}

// SetFinalizedCheckpoint sets the value of FinalizedCheckpoint.
func (s *GetDebugForkChoiceOK) SetFinalizedCheckpoint(val GetDebugForkChoiceOKFinalizedCheckpoint) {
	s.FinalizedCheckpoint = val
}

// SetForkChoiceNodes sets the value of ForkChoiceNodes.
func (s *GetDebugForkChoiceOK) SetForkChoiceNodes(val []GetDebugForkChoiceOKForkChoiceNodesItem) {
	s.ForkChoiceNodes = val
}

// SetExtraData sets the value of ExtraData.
func (s *GetDebugForkChoiceOK) SetExtraData(val *GetDebugForkChoiceOKExtraData) {
	s.ExtraData = val
}

func (*GetDebugForkChoiceOK) getDebugForkChoiceRes() {}

// Optional extra data that clients may provide, which could differ from client to client.
type GetDebugForkChoiceOKExtraData struct{}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetDebugForkChoiceOKFinalizedCheckpoint struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetDebugForkChoiceOKFinalizedCheckpoint) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetDebugForkChoiceOKFinalizedCheckpoint) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetDebugForkChoiceOKFinalizedCheckpoint) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetDebugForkChoiceOKFinalizedCheckpoint) SetRoot(val string) {
	s.Root = val
}

// Fork choice node attributes.
type GetDebugForkChoiceOKForkChoiceNodesItem struct {
	// The slot to which this block corresponds.
	Slot string `json:"slot"`
	// The signing merkle root of the `BeaconBlock`.
	BlockRoot string `json:"block_root"`
	// The signing merkle root of the parent `BeaconBlock`.
	ParentRoot     string                                          `json:"parent_root"`
	JustifiedEpoch string                                          `json:"justified_epoch"`
	FinalizedEpoch string                                          `json:"finalized_epoch"`
	Weight         string                                          `json:"weight"`
	Validity       GetDebugForkChoiceOKForkChoiceNodesItemValidity `json:"validity"`
	// The `block_hash` from the `execution_payload` of the `BeaconBlock`.
	ExecutionBlockHash string `json:"execution_block_hash"`
	// Optional extra data that clients may provide, which could differ from client to client.
	ExtraData *GetDebugForkChoiceOKForkChoiceNodesItemExtraData `json:"extra_data"`
}

// GetSlot returns the value of Slot.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) GetSlot() string {
	return s.Slot
}

// GetBlockRoot returns the value of BlockRoot.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) GetBlockRoot() string {
	return s.BlockRoot
}

// GetParentRoot returns the value of ParentRoot.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) GetParentRoot() string {
	return s.ParentRoot
}

// GetJustifiedEpoch returns the value of JustifiedEpoch.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) GetJustifiedEpoch() string {
	return s.JustifiedEpoch
}

// GetFinalizedEpoch returns the value of FinalizedEpoch.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) GetFinalizedEpoch() string {
	return s.FinalizedEpoch
}

// GetWeight returns the value of Weight.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) GetWeight() string {
	return s.Weight
}

// GetValidity returns the value of Validity.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) GetValidity() GetDebugForkChoiceOKForkChoiceNodesItemValidity {
	return s.Validity
}

// GetExecutionBlockHash returns the value of ExecutionBlockHash.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) GetExecutionBlockHash() string {
	return s.ExecutionBlockHash
}

// GetExtraData returns the value of ExtraData.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) GetExtraData() *GetDebugForkChoiceOKForkChoiceNodesItemExtraData {
	return s.ExtraData
}

// SetSlot sets the value of Slot.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) SetSlot(val string) {
	s.Slot = val
}

// SetBlockRoot sets the value of BlockRoot.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) SetBlockRoot(val string) {
	s.BlockRoot = val
}

// SetParentRoot sets the value of ParentRoot.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) SetParentRoot(val string) {
	s.ParentRoot = val
}

// SetJustifiedEpoch sets the value of JustifiedEpoch.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) SetJustifiedEpoch(val string) {
	s.JustifiedEpoch = val
}

// SetFinalizedEpoch sets the value of FinalizedEpoch.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) SetFinalizedEpoch(val string) {
	s.FinalizedEpoch = val
}

// SetWeight sets the value of Weight.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) SetWeight(val string) {
	s.Weight = val
}

// SetValidity sets the value of Validity.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) SetValidity(val GetDebugForkChoiceOKForkChoiceNodesItemValidity) {
	s.Validity = val
}

// SetExecutionBlockHash sets the value of ExecutionBlockHash.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) SetExecutionBlockHash(val string) {
	s.ExecutionBlockHash = val
}

// SetExtraData sets the value of ExtraData.
func (s *GetDebugForkChoiceOKForkChoiceNodesItem) SetExtraData(val *GetDebugForkChoiceOKForkChoiceNodesItemExtraData) {
	s.ExtraData = val
}

// Optional extra data that clients may provide, which could differ from client to client.
type GetDebugForkChoiceOKForkChoiceNodesItemExtraData struct{}

type GetDebugForkChoiceOKForkChoiceNodesItemValidity string

const (
	GetDebugForkChoiceOKForkChoiceNodesItemValidityValid      GetDebugForkChoiceOKForkChoiceNodesItemValidity = "valid"
	GetDebugForkChoiceOKForkChoiceNodesItemValidityInvalid    GetDebugForkChoiceOKForkChoiceNodesItemValidity = "invalid"
	GetDebugForkChoiceOKForkChoiceNodesItemValidityOptimistic GetDebugForkChoiceOKForkChoiceNodesItemValidity = "optimistic"
)

// AllValues returns all GetDebugForkChoiceOKForkChoiceNodesItemValidity values.
func (GetDebugForkChoiceOKForkChoiceNodesItemValidity) AllValues() []GetDebugForkChoiceOKForkChoiceNodesItemValidity {
	return []GetDebugForkChoiceOKForkChoiceNodesItemValidity{
		GetDebugForkChoiceOKForkChoiceNodesItemValidityValid,
		GetDebugForkChoiceOKForkChoiceNodesItemValidityInvalid,
		GetDebugForkChoiceOKForkChoiceNodesItemValidityOptimistic,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetDebugForkChoiceOKForkChoiceNodesItemValidity) MarshalText() ([]byte, error) {
	switch s {
	case GetDebugForkChoiceOKForkChoiceNodesItemValidityValid:
		return []byte(s), nil
	case GetDebugForkChoiceOKForkChoiceNodesItemValidityInvalid:
		return []byte(s), nil
	case GetDebugForkChoiceOKForkChoiceNodesItemValidityOptimistic:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetDebugForkChoiceOKForkChoiceNodesItemValidity) UnmarshalText(data []byte) error {
	switch GetDebugForkChoiceOKForkChoiceNodesItemValidity(data) {
	case GetDebugForkChoiceOKForkChoiceNodesItemValidityValid:
		*s = GetDebugForkChoiceOKForkChoiceNodesItemValidityValid
		return nil
	case GetDebugForkChoiceOKForkChoiceNodesItemValidityInvalid:
		*s = GetDebugForkChoiceOKForkChoiceNodesItemValidityInvalid
		return nil
	case GetDebugForkChoiceOKForkChoiceNodesItemValidityOptimistic:
		*s = GetDebugForkChoiceOKForkChoiceNodesItemValidityOptimistic
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetDebugForkChoiceOKJustifiedCheckpoint struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetDebugForkChoiceOKJustifiedCheckpoint) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetDebugForkChoiceOKJustifiedCheckpoint) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetDebugForkChoiceOKJustifiedCheckpoint) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetDebugForkChoiceOKJustifiedCheckpoint) SetRoot(val string) {
	s.Root = val
}

type GetDepositContractInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetDepositContractInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetDepositContractInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetDepositContractInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetDepositContractInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetDepositContractInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetDepositContractInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetDepositContractInternalServerError) getDepositContractRes() {}

type GetDepositContractOK struct {
	Data GetDepositContractOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetDepositContractOK) GetData() GetDepositContractOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetDepositContractOK) SetData(val GetDepositContractOKData) {
	s.Data = val
}

func (*GetDepositContractOK) getDepositContractRes() {}

type GetDepositContractOKData struct {
	// Id of Eth1 chain on which contract is deployed.
	ChainID string `json:"chain_id"`
	// Hex encoded deposit contract address with 0x prefix.
	Address string `json:"address"`
}

// GetChainID returns the value of ChainID.
func (s *GetDepositContractOKData) GetChainID() string {
	return s.ChainID
}

// GetAddress returns the value of Address.
func (s *GetDepositContractOKData) GetAddress() string {
	return s.Address
}

// SetChainID sets the value of ChainID.
func (s *GetDepositContractOKData) SetChainID(val string) {
	s.ChainID = val
}

// SetAddress sets the value of Address.
func (s *GetDepositContractOKData) SetAddress(val string) {
	s.Address = val
}

type GetDepositSnapshotInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetDepositSnapshotInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetDepositSnapshotInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetDepositSnapshotInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetDepositSnapshotInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetDepositSnapshotInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetDepositSnapshotInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetDepositSnapshotInternalServerError) getDepositSnapshotRes() {}

type GetDepositSnapshotNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetDepositSnapshotNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetDepositSnapshotNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetDepositSnapshotNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetDepositSnapshotNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetDepositSnapshotNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetDepositSnapshotNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetDepositSnapshotNotFound) getDepositSnapshotRes() {}

type GetDepositSnapshotOKApplicationJSON struct {
	Data GetDepositSnapshotOKApplicationJSONData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetDepositSnapshotOKApplicationJSON) GetData() GetDepositSnapshotOKApplicationJSONData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetDepositSnapshotOKApplicationJSON) SetData(val GetDepositSnapshotOKApplicationJSONData) {
	s.Data = val
}

func (*GetDepositSnapshotOKApplicationJSON) getDepositSnapshotRes() {}

type GetDepositSnapshotOKApplicationJSONData struct {
	Finalized            []string `json:"finalized"`
	DepositRoot          string   `json:"deposit_root"`
	DepositCount         string   `json:"deposit_count"`
	ExecutionBlockHash   string   `json:"execution_block_hash"`
	ExecutionBlockHeight string   `json:"execution_block_height"`
}

// GetFinalized returns the value of Finalized.
func (s *GetDepositSnapshotOKApplicationJSONData) GetFinalized() []string {
	return s.Finalized
}

// GetDepositRoot returns the value of DepositRoot.
func (s *GetDepositSnapshotOKApplicationJSONData) GetDepositRoot() string {
	return s.DepositRoot
}

// GetDepositCount returns the value of DepositCount.
func (s *GetDepositSnapshotOKApplicationJSONData) GetDepositCount() string {
	return s.DepositCount
}

// GetExecutionBlockHash returns the value of ExecutionBlockHash.
func (s *GetDepositSnapshotOKApplicationJSONData) GetExecutionBlockHash() string {
	return s.ExecutionBlockHash
}

// GetExecutionBlockHeight returns the value of ExecutionBlockHeight.
func (s *GetDepositSnapshotOKApplicationJSONData) GetExecutionBlockHeight() string {
	return s.ExecutionBlockHeight
}

// SetFinalized sets the value of Finalized.
func (s *GetDepositSnapshotOKApplicationJSONData) SetFinalized(val []string) {
	s.Finalized = val
}

// SetDepositRoot sets the value of DepositRoot.
func (s *GetDepositSnapshotOKApplicationJSONData) SetDepositRoot(val string) {
	s.DepositRoot = val
}

// SetDepositCount sets the value of DepositCount.
func (s *GetDepositSnapshotOKApplicationJSONData) SetDepositCount(val string) {
	s.DepositCount = val
}

// SetExecutionBlockHash sets the value of ExecutionBlockHash.
func (s *GetDepositSnapshotOKApplicationJSONData) SetExecutionBlockHash(val string) {
	s.ExecutionBlockHash = val
}

// SetExecutionBlockHeight sets the value of ExecutionBlockHeight.
func (s *GetDepositSnapshotOKApplicationJSONData) SetExecutionBlockHeight(val string) {
	s.ExecutionBlockHeight = val
}

// SSZ serialized block bytes. Use Accept header to choose this response type.
type GetDepositSnapshotOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetDepositSnapshotOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetDepositSnapshotOKApplicationOctetStream) getDepositSnapshotRes() {}

type GetEpochCommitteesBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetEpochCommitteesBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetEpochCommitteesBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetEpochCommitteesBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetEpochCommitteesBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetEpochCommitteesBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetEpochCommitteesBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetEpochCommitteesBadRequest) getEpochCommitteesRes() {}

type GetEpochCommitteesInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetEpochCommitteesInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetEpochCommitteesInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetEpochCommitteesInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetEpochCommitteesInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetEpochCommitteesInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetEpochCommitteesInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetEpochCommitteesInternalServerError) getEpochCommitteesRes() {}

type GetEpochCommitteesNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetEpochCommitteesNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetEpochCommitteesNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetEpochCommitteesNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetEpochCommitteesNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetEpochCommitteesNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetEpochCommitteesNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetEpochCommitteesNotFound) getEpochCommitteesRes() {}

type GetEpochCommitteesOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                           `json:"finalized"`
	Data      []GetEpochCommitteesOKDataItem `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetEpochCommitteesOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetEpochCommitteesOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetEpochCommitteesOK) GetData() []GetEpochCommitteesOKDataItem {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetEpochCommitteesOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetEpochCommitteesOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetEpochCommitteesOK) SetData(val []GetEpochCommitteesOKDataItem) {
	s.Data = val
}

func (*GetEpochCommitteesOK) getEpochCommitteesRes() {}

// Group of validators assigned to attest at specific slot and that have the same committee index
// (shard in phase 1).
type GetEpochCommitteesOKDataItem struct {
	// Committee index at a slot.
	Index string `json:"index"`
	Slot  string `json:"slot"`
	// List of validator indices assigned to this committee.
	Validators []string `json:"validators"`
}

// GetIndex returns the value of Index.
func (s *GetEpochCommitteesOKDataItem) GetIndex() string {
	return s.Index
}

// GetSlot returns the value of Slot.
func (s *GetEpochCommitteesOKDataItem) GetSlot() string {
	return s.Slot
}

// GetValidators returns the value of Validators.
func (s *GetEpochCommitteesOKDataItem) GetValidators() []string {
	return s.Validators
}

// SetIndex sets the value of Index.
func (s *GetEpochCommitteesOKDataItem) SetIndex(val string) {
	s.Index = val
}

// SetSlot sets the value of Slot.
func (s *GetEpochCommitteesOKDataItem) SetSlot(val string) {
	s.Slot = val
}

// SetValidators sets the value of Validators.
func (s *GetEpochCommitteesOKDataItem) SetValidators(val []string) {
	s.Validators = val
}

type GetEpochSyncCommitteesBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetEpochSyncCommitteesBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetEpochSyncCommitteesBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetEpochSyncCommitteesBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetEpochSyncCommitteesBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetEpochSyncCommitteesBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetEpochSyncCommitteesBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetEpochSyncCommitteesBadRequest) getEpochSyncCommitteesRes() {}

type GetEpochSyncCommitteesInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetEpochSyncCommitteesInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetEpochSyncCommitteesInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetEpochSyncCommitteesInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetEpochSyncCommitteesInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetEpochSyncCommitteesInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetEpochSyncCommitteesInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetEpochSyncCommitteesInternalServerError) getEpochSyncCommitteesRes() {}

type GetEpochSyncCommitteesNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetEpochSyncCommitteesNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetEpochSyncCommitteesNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetEpochSyncCommitteesNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetEpochSyncCommitteesNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetEpochSyncCommitteesNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetEpochSyncCommitteesNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetEpochSyncCommitteesNotFound) getEpochSyncCommitteesRes() {}

type GetEpochSyncCommitteesOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                         `json:"finalized"`
	Data      GetEpochSyncCommitteesOKData `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetEpochSyncCommitteesOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetEpochSyncCommitteesOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetEpochSyncCommitteesOK) GetData() GetEpochSyncCommitteesOKData {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetEpochSyncCommitteesOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetEpochSyncCommitteesOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetEpochSyncCommitteesOK) SetData(val GetEpochSyncCommitteesOKData) {
	s.Data = val
}

func (*GetEpochSyncCommitteesOK) getEpochSyncCommitteesRes() {}

type GetEpochSyncCommitteesOKData struct {
	// All of the validator indices in the current sync committee.
	Validators          []string   `json:"validators"`
	ValidatorAggregates [][]string `json:"validator_aggregates"`
}

// GetValidators returns the value of Validators.
func (s *GetEpochSyncCommitteesOKData) GetValidators() []string {
	return s.Validators
}

// GetValidatorAggregates returns the value of ValidatorAggregates.
func (s *GetEpochSyncCommitteesOKData) GetValidatorAggregates() [][]string {
	return s.ValidatorAggregates
}

// SetValidators sets the value of Validators.
func (s *GetEpochSyncCommitteesOKData) SetValidators(val []string) {
	s.Validators = val
}

// SetValidatorAggregates sets the value of ValidatorAggregates.
func (s *GetEpochSyncCommitteesOKData) SetValidatorAggregates(val [][]string) {
	s.ValidatorAggregates = val
}

type GetForkScheduleInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetForkScheduleInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetForkScheduleInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetForkScheduleInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetForkScheduleInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetForkScheduleInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetForkScheduleInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetForkScheduleInternalServerError) getForkScheduleRes() {}

type GetForkScheduleOK struct {
	Data []GetForkScheduleOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetForkScheduleOK) GetData() []GetForkScheduleOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetForkScheduleOK) SetData(val []GetForkScheduleOKDataItem) {
	s.Data = val
}

func (*GetForkScheduleOK) getForkScheduleRes() {}

// The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.
// md#fork) object from the CL spec.
type GetForkScheduleOKDataItem struct {
	// A fork version number.
	PreviousVersion string `json:"previous_version"`
	// A fork version number.
	CurrentVersion string `json:"current_version"`
	Epoch          string `json:"epoch"`
}

// GetPreviousVersion returns the value of PreviousVersion.
func (s *GetForkScheduleOKDataItem) GetPreviousVersion() string {
	return s.PreviousVersion
}

// GetCurrentVersion returns the value of CurrentVersion.
func (s *GetForkScheduleOKDataItem) GetCurrentVersion() string {
	return s.CurrentVersion
}

// GetEpoch returns the value of Epoch.
func (s *GetForkScheduleOKDataItem) GetEpoch() string {
	return s.Epoch
}

// SetPreviousVersion sets the value of PreviousVersion.
func (s *GetForkScheduleOKDataItem) SetPreviousVersion(val string) {
	s.PreviousVersion = val
}

// SetCurrentVersion sets the value of CurrentVersion.
func (s *GetForkScheduleOKDataItem) SetCurrentVersion(val string) {
	s.CurrentVersion = val
}

// SetEpoch sets the value of Epoch.
func (s *GetForkScheduleOKDataItem) SetEpoch(val string) {
	s.Epoch = val
}

type GetGenesisInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetGenesisInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetGenesisInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetGenesisInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetGenesisInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetGenesisInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetGenesisInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetGenesisInternalServerError) getGenesisRes() {}

type GetGenesisNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetGenesisNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetGenesisNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetGenesisNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetGenesisNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetGenesisNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetGenesisNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetGenesisNotFound) getGenesisRes() {}

type GetGenesisOK struct {
	Data GetGenesisOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetGenesisOK) GetData() GetGenesisOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetGenesisOK) SetData(val GetGenesisOKData) {
	s.Data = val
}

func (*GetGenesisOK) getGenesisRes() {}

type GetGenesisOKData struct {
	// The genesis_time configured for the beacon node, which is the unix time in seconds at which the
	// Eth2.0 chain began.
	GenesisTime           string `json:"genesis_time"`
	GenesisValidatorsRoot string `json:"genesis_validators_root"`
	// A fork version number.
	GenesisForkVersion string `json:"genesis_fork_version"`
}

// GetGenesisTime returns the value of GenesisTime.
func (s *GetGenesisOKData) GetGenesisTime() string {
	return s.GenesisTime
}

// GetGenesisValidatorsRoot returns the value of GenesisValidatorsRoot.
func (s *GetGenesisOKData) GetGenesisValidatorsRoot() string {
	return s.GenesisValidatorsRoot
}

// GetGenesisForkVersion returns the value of GenesisForkVersion.
func (s *GetGenesisOKData) GetGenesisForkVersion() string {
	return s.GenesisForkVersion
}

// SetGenesisTime sets the value of GenesisTime.
func (s *GetGenesisOKData) SetGenesisTime(val string) {
	s.GenesisTime = val
}

// SetGenesisValidatorsRoot sets the value of GenesisValidatorsRoot.
func (s *GetGenesisOKData) SetGenesisValidatorsRoot(val string) {
	s.GenesisValidatorsRoot = val
}

// SetGenesisForkVersion sets the value of GenesisForkVersion.
func (s *GetGenesisOKData) SetGenesisForkVersion(val string) {
	s.GenesisForkVersion = val
}

// GetHealthBadRequest is response for GetHealth operation.
type GetHealthBadRequest struct{}

func (*GetHealthBadRequest) getHealthRes() {}

// GetHealthOK is response for GetHealth operation.
type GetHealthOK struct{}

func (*GetHealthOK) getHealthRes() {}

// GetHealthPartialContent is response for GetHealth operation.
type GetHealthPartialContent struct{}

func (*GetHealthPartialContent) getHealthRes() {}

// GetHealthServiceUnavailable is response for GetHealth operation.
type GetHealthServiceUnavailable struct{}

func (*GetHealthServiceUnavailable) getHealthRes() {}

type GetLightClientBootstrapBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientBootstrapBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientBootstrapBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientBootstrapBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientBootstrapBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientBootstrapBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientBootstrapBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientBootstrapBadRequest) getLightClientBootstrapRes() {}

type GetLightClientBootstrapInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientBootstrapInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientBootstrapInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientBootstrapInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientBootstrapInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientBootstrapInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientBootstrapInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientBootstrapInternalServerError) getLightClientBootstrapRes() {}

type GetLightClientBootstrapNotAcceptable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientBootstrapNotAcceptable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientBootstrapNotAcceptable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientBootstrapNotAcceptable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientBootstrapNotAcceptable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientBootstrapNotAcceptable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientBootstrapNotAcceptable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientBootstrapNotAcceptable) getLightClientBootstrapRes() {}

type GetLightClientBootstrapNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientBootstrapNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientBootstrapNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientBootstrapNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientBootstrapNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientBootstrapNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientBootstrapNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientBootstrapNotFound) getLightClientBootstrapRes() {}

// SSZ serialized `LightClientBootstrap` bytes. Use Accept header to choose this response type.
type GetLightClientBootstrapOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetLightClientBootstrapOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetLightClientBootstrapOKApplicationOctetStreamHeaders wraps GetLightClientBootstrapOKApplicationOctetStream with response headers.
type GetLightClientBootstrapOKApplicationOctetStreamHeaders struct {
	EthConsensusVersion GetLightClientBootstrapOKEthConsensusVersion
	Response            GetLightClientBootstrapOKApplicationOctetStream
}

// GetEthConsensusVersion returns the value of EthConsensusVersion.
func (s *GetLightClientBootstrapOKApplicationOctetStreamHeaders) GetEthConsensusVersion() GetLightClientBootstrapOKEthConsensusVersion {
	return s.EthConsensusVersion
}

// GetResponse returns the value of Response.
func (s *GetLightClientBootstrapOKApplicationOctetStreamHeaders) GetResponse() GetLightClientBootstrapOKApplicationOctetStream {
	return s.Response
}

// SetEthConsensusVersion sets the value of EthConsensusVersion.
func (s *GetLightClientBootstrapOKApplicationOctetStreamHeaders) SetEthConsensusVersion(val GetLightClientBootstrapOKEthConsensusVersion) {
	s.EthConsensusVersion = val
}

// SetResponse sets the value of Response.
func (s *GetLightClientBootstrapOKApplicationOctetStreamHeaders) SetResponse(val GetLightClientBootstrapOKApplicationOctetStream) {
	s.Response = val
}

func (*GetLightClientBootstrapOKApplicationOctetStreamHeaders) getLightClientBootstrapRes() {}

type GetLightClientBootstrapOKEthConsensusVersion string

const (
	GetLightClientBootstrapOKEthConsensusVersionPhase0    GetLightClientBootstrapOKEthConsensusVersion = "phase0"
	GetLightClientBootstrapOKEthConsensusVersionAltair    GetLightClientBootstrapOKEthConsensusVersion = "altair"
	GetLightClientBootstrapOKEthConsensusVersionBellatrix GetLightClientBootstrapOKEthConsensusVersion = "bellatrix"
	GetLightClientBootstrapOKEthConsensusVersionCapella   GetLightClientBootstrapOKEthConsensusVersion = "capella"
	GetLightClientBootstrapOKEthConsensusVersionDeneb     GetLightClientBootstrapOKEthConsensusVersion = "deneb"
)

// AllValues returns all GetLightClientBootstrapOKEthConsensusVersion values.
func (GetLightClientBootstrapOKEthConsensusVersion) AllValues() []GetLightClientBootstrapOKEthConsensusVersion {
	return []GetLightClientBootstrapOKEthConsensusVersion{
		GetLightClientBootstrapOKEthConsensusVersionPhase0,
		GetLightClientBootstrapOKEthConsensusVersionAltair,
		GetLightClientBootstrapOKEthConsensusVersionBellatrix,
		GetLightClientBootstrapOKEthConsensusVersionCapella,
		GetLightClientBootstrapOKEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetLightClientBootstrapOKEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case GetLightClientBootstrapOKEthConsensusVersionPhase0:
		return []byte(s), nil
	case GetLightClientBootstrapOKEthConsensusVersionAltair:
		return []byte(s), nil
	case GetLightClientBootstrapOKEthConsensusVersionBellatrix:
		return []byte(s), nil
	case GetLightClientBootstrapOKEthConsensusVersionCapella:
		return []byte(s), nil
	case GetLightClientBootstrapOKEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetLightClientBootstrapOKEthConsensusVersion) UnmarshalText(data []byte) error {
	switch GetLightClientBootstrapOKEthConsensusVersion(data) {
	case GetLightClientBootstrapOKEthConsensusVersionPhase0:
		*s = GetLightClientBootstrapOKEthConsensusVersionPhase0
		return nil
	case GetLightClientBootstrapOKEthConsensusVersionAltair:
		*s = GetLightClientBootstrapOKEthConsensusVersionAltair
		return nil
	case GetLightClientBootstrapOKEthConsensusVersionBellatrix:
		*s = GetLightClientBootstrapOKEthConsensusVersionBellatrix
		return nil
	case GetLightClientBootstrapOKEthConsensusVersionCapella:
		*s = GetLightClientBootstrapOKEthConsensusVersionCapella
		return nil
	case GetLightClientBootstrapOKEthConsensusVersionDeneb:
		*s = GetLightClientBootstrapOKEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetLightClientFinalityUpdateInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientFinalityUpdateInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientFinalityUpdateInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientFinalityUpdateInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientFinalityUpdateInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientFinalityUpdateInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientFinalityUpdateInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientFinalityUpdateInternalServerError) getLightClientFinalityUpdateRes() {}

type GetLightClientFinalityUpdateNotAcceptable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientFinalityUpdateNotAcceptable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientFinalityUpdateNotAcceptable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientFinalityUpdateNotAcceptable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientFinalityUpdateNotAcceptable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientFinalityUpdateNotAcceptable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientFinalityUpdateNotAcceptable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientFinalityUpdateNotAcceptable) getLightClientFinalityUpdateRes() {}

type GetLightClientFinalityUpdateNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientFinalityUpdateNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientFinalityUpdateNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientFinalityUpdateNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientFinalityUpdateNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientFinalityUpdateNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientFinalityUpdateNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientFinalityUpdateNotFound) getLightClientFinalityUpdateRes() {}

// SSZ serialized `LightClientFinalityUpdate` bytes. Use Accept header to choose this response type.
type GetLightClientFinalityUpdateOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetLightClientFinalityUpdateOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetLightClientFinalityUpdateOKApplicationOctetStreamHeaders wraps GetLightClientFinalityUpdateOKApplicationOctetStream with response headers.
type GetLightClientFinalityUpdateOKApplicationOctetStreamHeaders struct {
	EthConsensusVersion GetLightClientFinalityUpdateOKEthConsensusVersion
	Response            GetLightClientFinalityUpdateOKApplicationOctetStream
}

// GetEthConsensusVersion returns the value of EthConsensusVersion.
func (s *GetLightClientFinalityUpdateOKApplicationOctetStreamHeaders) GetEthConsensusVersion() GetLightClientFinalityUpdateOKEthConsensusVersion {
	return s.EthConsensusVersion
}

// GetResponse returns the value of Response.
func (s *GetLightClientFinalityUpdateOKApplicationOctetStreamHeaders) GetResponse() GetLightClientFinalityUpdateOKApplicationOctetStream {
	return s.Response
}

// SetEthConsensusVersion sets the value of EthConsensusVersion.
func (s *GetLightClientFinalityUpdateOKApplicationOctetStreamHeaders) SetEthConsensusVersion(val GetLightClientFinalityUpdateOKEthConsensusVersion) {
	s.EthConsensusVersion = val
}

// SetResponse sets the value of Response.
func (s *GetLightClientFinalityUpdateOKApplicationOctetStreamHeaders) SetResponse(val GetLightClientFinalityUpdateOKApplicationOctetStream) {
	s.Response = val
}

func (*GetLightClientFinalityUpdateOKApplicationOctetStreamHeaders) getLightClientFinalityUpdateRes() {
}

type GetLightClientFinalityUpdateOKEthConsensusVersion string

const (
	GetLightClientFinalityUpdateOKEthConsensusVersionPhase0    GetLightClientFinalityUpdateOKEthConsensusVersion = "phase0"
	GetLightClientFinalityUpdateOKEthConsensusVersionAltair    GetLightClientFinalityUpdateOKEthConsensusVersion = "altair"
	GetLightClientFinalityUpdateOKEthConsensusVersionBellatrix GetLightClientFinalityUpdateOKEthConsensusVersion = "bellatrix"
	GetLightClientFinalityUpdateOKEthConsensusVersionCapella   GetLightClientFinalityUpdateOKEthConsensusVersion = "capella"
	GetLightClientFinalityUpdateOKEthConsensusVersionDeneb     GetLightClientFinalityUpdateOKEthConsensusVersion = "deneb"
)

// AllValues returns all GetLightClientFinalityUpdateOKEthConsensusVersion values.
func (GetLightClientFinalityUpdateOKEthConsensusVersion) AllValues() []GetLightClientFinalityUpdateOKEthConsensusVersion {
	return []GetLightClientFinalityUpdateOKEthConsensusVersion{
		GetLightClientFinalityUpdateOKEthConsensusVersionPhase0,
		GetLightClientFinalityUpdateOKEthConsensusVersionAltair,
		GetLightClientFinalityUpdateOKEthConsensusVersionBellatrix,
		GetLightClientFinalityUpdateOKEthConsensusVersionCapella,
		GetLightClientFinalityUpdateOKEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetLightClientFinalityUpdateOKEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case GetLightClientFinalityUpdateOKEthConsensusVersionPhase0:
		return []byte(s), nil
	case GetLightClientFinalityUpdateOKEthConsensusVersionAltair:
		return []byte(s), nil
	case GetLightClientFinalityUpdateOKEthConsensusVersionBellatrix:
		return []byte(s), nil
	case GetLightClientFinalityUpdateOKEthConsensusVersionCapella:
		return []byte(s), nil
	case GetLightClientFinalityUpdateOKEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetLightClientFinalityUpdateOKEthConsensusVersion) UnmarshalText(data []byte) error {
	switch GetLightClientFinalityUpdateOKEthConsensusVersion(data) {
	case GetLightClientFinalityUpdateOKEthConsensusVersionPhase0:
		*s = GetLightClientFinalityUpdateOKEthConsensusVersionPhase0
		return nil
	case GetLightClientFinalityUpdateOKEthConsensusVersionAltair:
		*s = GetLightClientFinalityUpdateOKEthConsensusVersionAltair
		return nil
	case GetLightClientFinalityUpdateOKEthConsensusVersionBellatrix:
		*s = GetLightClientFinalityUpdateOKEthConsensusVersionBellatrix
		return nil
	case GetLightClientFinalityUpdateOKEthConsensusVersionCapella:
		*s = GetLightClientFinalityUpdateOKEthConsensusVersionCapella
		return nil
	case GetLightClientFinalityUpdateOKEthConsensusVersionDeneb:
		*s = GetLightClientFinalityUpdateOKEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetLightClientOptimisticUpdateInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientOptimisticUpdateInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientOptimisticUpdateInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientOptimisticUpdateInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientOptimisticUpdateInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientOptimisticUpdateInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientOptimisticUpdateInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientOptimisticUpdateInternalServerError) getLightClientOptimisticUpdateRes() {}

type GetLightClientOptimisticUpdateNotAcceptable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientOptimisticUpdateNotAcceptable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientOptimisticUpdateNotAcceptable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientOptimisticUpdateNotAcceptable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientOptimisticUpdateNotAcceptable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientOptimisticUpdateNotAcceptable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientOptimisticUpdateNotAcceptable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientOptimisticUpdateNotAcceptable) getLightClientOptimisticUpdateRes() {}

type GetLightClientOptimisticUpdateNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientOptimisticUpdateNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientOptimisticUpdateNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientOptimisticUpdateNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientOptimisticUpdateNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientOptimisticUpdateNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientOptimisticUpdateNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientOptimisticUpdateNotFound) getLightClientOptimisticUpdateRes() {}

// SSZ serialized `LightClientOptimisticUpdate` bytes. Use Accept header to choose this response type.
type GetLightClientOptimisticUpdateOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetLightClientOptimisticUpdateOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetLightClientOptimisticUpdateOKApplicationOctetStreamHeaders wraps GetLightClientOptimisticUpdateOKApplicationOctetStream with response headers.
type GetLightClientOptimisticUpdateOKApplicationOctetStreamHeaders struct {
	EthConsensusVersion GetLightClientOptimisticUpdateOKEthConsensusVersion
	Response            GetLightClientOptimisticUpdateOKApplicationOctetStream
}

// GetEthConsensusVersion returns the value of EthConsensusVersion.
func (s *GetLightClientOptimisticUpdateOKApplicationOctetStreamHeaders) GetEthConsensusVersion() GetLightClientOptimisticUpdateOKEthConsensusVersion {
	return s.EthConsensusVersion
}

// GetResponse returns the value of Response.
func (s *GetLightClientOptimisticUpdateOKApplicationOctetStreamHeaders) GetResponse() GetLightClientOptimisticUpdateOKApplicationOctetStream {
	return s.Response
}

// SetEthConsensusVersion sets the value of EthConsensusVersion.
func (s *GetLightClientOptimisticUpdateOKApplicationOctetStreamHeaders) SetEthConsensusVersion(val GetLightClientOptimisticUpdateOKEthConsensusVersion) {
	s.EthConsensusVersion = val
}

// SetResponse sets the value of Response.
func (s *GetLightClientOptimisticUpdateOKApplicationOctetStreamHeaders) SetResponse(val GetLightClientOptimisticUpdateOKApplicationOctetStream) {
	s.Response = val
}

func (*GetLightClientOptimisticUpdateOKApplicationOctetStreamHeaders) getLightClientOptimisticUpdateRes() {
}

type GetLightClientOptimisticUpdateOKEthConsensusVersion string

const (
	GetLightClientOptimisticUpdateOKEthConsensusVersionPhase0    GetLightClientOptimisticUpdateOKEthConsensusVersion = "phase0"
	GetLightClientOptimisticUpdateOKEthConsensusVersionAltair    GetLightClientOptimisticUpdateOKEthConsensusVersion = "altair"
	GetLightClientOptimisticUpdateOKEthConsensusVersionBellatrix GetLightClientOptimisticUpdateOKEthConsensusVersion = "bellatrix"
	GetLightClientOptimisticUpdateOKEthConsensusVersionCapella   GetLightClientOptimisticUpdateOKEthConsensusVersion = "capella"
	GetLightClientOptimisticUpdateOKEthConsensusVersionDeneb     GetLightClientOptimisticUpdateOKEthConsensusVersion = "deneb"
)

// AllValues returns all GetLightClientOptimisticUpdateOKEthConsensusVersion values.
func (GetLightClientOptimisticUpdateOKEthConsensusVersion) AllValues() []GetLightClientOptimisticUpdateOKEthConsensusVersion {
	return []GetLightClientOptimisticUpdateOKEthConsensusVersion{
		GetLightClientOptimisticUpdateOKEthConsensusVersionPhase0,
		GetLightClientOptimisticUpdateOKEthConsensusVersionAltair,
		GetLightClientOptimisticUpdateOKEthConsensusVersionBellatrix,
		GetLightClientOptimisticUpdateOKEthConsensusVersionCapella,
		GetLightClientOptimisticUpdateOKEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetLightClientOptimisticUpdateOKEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case GetLightClientOptimisticUpdateOKEthConsensusVersionPhase0:
		return []byte(s), nil
	case GetLightClientOptimisticUpdateOKEthConsensusVersionAltair:
		return []byte(s), nil
	case GetLightClientOptimisticUpdateOKEthConsensusVersionBellatrix:
		return []byte(s), nil
	case GetLightClientOptimisticUpdateOKEthConsensusVersionCapella:
		return []byte(s), nil
	case GetLightClientOptimisticUpdateOKEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetLightClientOptimisticUpdateOKEthConsensusVersion) UnmarshalText(data []byte) error {
	switch GetLightClientOptimisticUpdateOKEthConsensusVersion(data) {
	case GetLightClientOptimisticUpdateOKEthConsensusVersionPhase0:
		*s = GetLightClientOptimisticUpdateOKEthConsensusVersionPhase0
		return nil
	case GetLightClientOptimisticUpdateOKEthConsensusVersionAltair:
		*s = GetLightClientOptimisticUpdateOKEthConsensusVersionAltair
		return nil
	case GetLightClientOptimisticUpdateOKEthConsensusVersionBellatrix:
		*s = GetLightClientOptimisticUpdateOKEthConsensusVersionBellatrix
		return nil
	case GetLightClientOptimisticUpdateOKEthConsensusVersionCapella:
		*s = GetLightClientOptimisticUpdateOKEthConsensusVersionCapella
		return nil
	case GetLightClientOptimisticUpdateOKEthConsensusVersionDeneb:
		*s = GetLightClientOptimisticUpdateOKEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetLightClientUpdatesByRangeBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientUpdatesByRangeBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientUpdatesByRangeBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientUpdatesByRangeBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientUpdatesByRangeBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientUpdatesByRangeBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientUpdatesByRangeBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientUpdatesByRangeBadRequest) getLightClientUpdatesByRangeRes() {}

type GetLightClientUpdatesByRangeInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientUpdatesByRangeInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientUpdatesByRangeInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientUpdatesByRangeInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientUpdatesByRangeInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientUpdatesByRangeInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientUpdatesByRangeInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientUpdatesByRangeInternalServerError) getLightClientUpdatesByRangeRes() {}

type GetLightClientUpdatesByRangeNotAcceptable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLightClientUpdatesByRangeNotAcceptable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLightClientUpdatesByRangeNotAcceptable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLightClientUpdatesByRangeNotAcceptable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLightClientUpdatesByRangeNotAcceptable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLightClientUpdatesByRangeNotAcceptable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLightClientUpdatesByRangeNotAcceptable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLightClientUpdatesByRangeNotAcceptable) getLightClientUpdatesByRangeRes() {}

// Sequence of zero or more `response_chunk`. Each _successful_ `response_chunk` MUST contain a
// single `LightClientUpdate` payload:
// ```
// (
// response_chunk_len: Little-endian Uint64 byte length of `response_chunk`
// response_chunk: (
// context: 4 byte `ForkDigest`
// payload: SSZ serialized payload bytes
// )
// )
// ```
// Use Accept header to choose this response type
// For each `response_chunk`, a `ForkDigest`-context based on
// `compute_fork_version(compute_epoch_at_slot(update.attested_header.beacon.slot))` is used to
// select the fork namespace of the Response type. Note that this `fork_version` may be different
// from the one used to verify the `update.sync_aggregate`, which is based on `update.signature_slot`.
// Per `context = compute_fork_digest(fork_version, genesis_validators_root)`:
// | `fork_version`                                                      | Response chunk SSZ type
//
//	|
//
// | ------------------------------------------------------------------- |
// ------------------------------------- |
// | `GENESIS_FORK_VERSION`                                              | n/a
//
//	|
//
// | <nobr>`ALTAIR_FORK_VERSION` through `BELLATRIX_FORK_VERSION`</nobr> | `altair.LightClientUpdate`
//
//	|
//
// | <nobr>`CAPELLA_FORK_VERSION` and later</nobr>                       | `capella.
// LightClientUpdate`           |.
type GetLightClientUpdatesByRangeOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetLightClientUpdatesByRangeOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetLightClientUpdatesByRangeOKApplicationOctetStream) getLightClientUpdatesByRangeRes() {}

type GetLivenessBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLivenessBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLivenessBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLivenessBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLivenessBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLivenessBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLivenessBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLivenessBadRequest) getLivenessRes() {}

type GetLivenessInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLivenessInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLivenessInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLivenessInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLivenessInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLivenessInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLivenessInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLivenessInternalServerError) getLivenessRes() {}

type GetLivenessOK struct {
	Data []GetLivenessOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetLivenessOK) GetData() []GetLivenessOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetLivenessOK) SetData(val []GetLivenessOKDataItem) {
	s.Data = val
}

func (*GetLivenessOK) getLivenessRes() {}

type GetLivenessOKDataItem struct {
	Index  string `json:"index"`
	IsLive bool   `json:"is_live"`
}

// GetIndex returns the value of Index.
func (s *GetLivenessOKDataItem) GetIndex() string {
	return s.Index
}

// GetIsLive returns the value of IsLive.
func (s *GetLivenessOKDataItem) GetIsLive() bool {
	return s.IsLive
}

// SetIndex sets the value of Index.
func (s *GetLivenessOKDataItem) SetIndex(val string) {
	s.Index = val
}

// SetIsLive sets the value of IsLive.
func (s *GetLivenessOKDataItem) SetIsLive(val bool) {
	s.IsLive = val
}

type GetLivenessServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetLivenessServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetLivenessServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetLivenessServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetLivenessServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetLivenessServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetLivenessServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetLivenessServiceUnavailable) getLivenessRes() {}

type GetNetworkIdentityInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetNetworkIdentityInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetNetworkIdentityInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetNetworkIdentityInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetNetworkIdentityInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetNetworkIdentityInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetNetworkIdentityInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetNetworkIdentityInternalServerError) getNetworkIdentityRes() {}

type GetNetworkIdentityOK struct {
	Data GetNetworkIdentityOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetNetworkIdentityOK) GetData() GetNetworkIdentityOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetNetworkIdentityOK) SetData(val GetNetworkIdentityOKData) {
	s.Data = val
}

func (*GetNetworkIdentityOK) getNetworkIdentityRes() {}

type GetNetworkIdentityOKData struct {
	// Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/).
	PeerID string `json:"peer_id"`
	// Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778).
	Enr                string   `json:"enr"`
	P2PAddresses       []string `json:"p2p_addresses"`
	DiscoveryAddresses []string `json:"discovery_addresses"`
	// Based on eth2 [Metadata object](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/p2p-interface.md#metadata).
	Metadata GetNetworkIdentityOKDataMetadata `json:"metadata"`
}

// GetPeerID returns the value of PeerID.
func (s *GetNetworkIdentityOKData) GetPeerID() string {
	return s.PeerID
}

// GetEnr returns the value of Enr.
func (s *GetNetworkIdentityOKData) GetEnr() string {
	return s.Enr
}

// GetP2PAddresses returns the value of P2PAddresses.
func (s *GetNetworkIdentityOKData) GetP2PAddresses() []string {
	return s.P2PAddresses
}

// GetDiscoveryAddresses returns the value of DiscoveryAddresses.
func (s *GetNetworkIdentityOKData) GetDiscoveryAddresses() []string {
	return s.DiscoveryAddresses
}

// GetMetadata returns the value of Metadata.
func (s *GetNetworkIdentityOKData) GetMetadata() GetNetworkIdentityOKDataMetadata {
	return s.Metadata
}

// SetPeerID sets the value of PeerID.
func (s *GetNetworkIdentityOKData) SetPeerID(val string) {
	s.PeerID = val
}

// SetEnr sets the value of Enr.
func (s *GetNetworkIdentityOKData) SetEnr(val string) {
	s.Enr = val
}

// SetP2PAddresses sets the value of P2PAddresses.
func (s *GetNetworkIdentityOKData) SetP2PAddresses(val []string) {
	s.P2PAddresses = val
}

// SetDiscoveryAddresses sets the value of DiscoveryAddresses.
func (s *GetNetworkIdentityOKData) SetDiscoveryAddresses(val []string) {
	s.DiscoveryAddresses = val
}

// SetMetadata sets the value of Metadata.
func (s *GetNetworkIdentityOKData) SetMetadata(val GetNetworkIdentityOKDataMetadata) {
	s.Metadata = val
}

// Based on eth2 [Metadata object](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/p2p-interface.md#metadata).
type GetNetworkIdentityOKDataMetadata struct {
	// Uint64 starting at 0 used to version the node's metadata. If any other field in the local MetaData
	// changes, the node MUST increment seq_number by 1.
	SeqNumber string `json:"seq_number"`
	// Bitvector representing the node's persistent attestation subnet subscriptions.
	Attnets string `json:"attnets"`
	// Bitvector representing the node's sync committee subnet subscriptions. This metadata is not
	// present in phase0, but will be present in Altair.
	Syncnets OptString `json:"syncnets"`
}

// GetSeqNumber returns the value of SeqNumber.
func (s *GetNetworkIdentityOKDataMetadata) GetSeqNumber() string {
	return s.SeqNumber
}

// GetAttnets returns the value of Attnets.
func (s *GetNetworkIdentityOKDataMetadata) GetAttnets() string {
	return s.Attnets
}

// GetSyncnets returns the value of Syncnets.
func (s *GetNetworkIdentityOKDataMetadata) GetSyncnets() OptString {
	return s.Syncnets
}

// SetSeqNumber sets the value of SeqNumber.
func (s *GetNetworkIdentityOKDataMetadata) SetSeqNumber(val string) {
	s.SeqNumber = val
}

// SetAttnets sets the value of Attnets.
func (s *GetNetworkIdentityOKDataMetadata) SetAttnets(val string) {
	s.Attnets = val
}

// SetSyncnets sets the value of Syncnets.
func (s *GetNetworkIdentityOKDataMetadata) SetSyncnets(val OptString) {
	s.Syncnets = val
}

type GetNextWithdrawalsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetNextWithdrawalsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetNextWithdrawalsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetNextWithdrawalsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetNextWithdrawalsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetNextWithdrawalsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetNextWithdrawalsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetNextWithdrawalsBadRequest) getNextWithdrawalsRes() {}

type GetNextWithdrawalsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetNextWithdrawalsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetNextWithdrawalsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetNextWithdrawalsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetNextWithdrawalsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetNextWithdrawalsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetNextWithdrawalsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetNextWithdrawalsInternalServerError) getNextWithdrawalsRes() {}

type GetNextWithdrawalsNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetNextWithdrawalsNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetNextWithdrawalsNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetNextWithdrawalsNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetNextWithdrawalsNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetNextWithdrawalsNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetNextWithdrawalsNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetNextWithdrawalsNotFound) getNextWithdrawalsRes() {}

type GetNextWithdrawalsOKApplicationJSON struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                                          `json:"finalized"`
	Data      []GetNextWithdrawalsOKApplicationJSONDataItem `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetNextWithdrawalsOKApplicationJSON) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetNextWithdrawalsOKApplicationJSON) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetNextWithdrawalsOKApplicationJSON) GetData() []GetNextWithdrawalsOKApplicationJSONDataItem {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetNextWithdrawalsOKApplicationJSON) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetNextWithdrawalsOKApplicationJSON) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetNextWithdrawalsOKApplicationJSON) SetData(val []GetNextWithdrawalsOKApplicationJSONDataItem) {
	s.Data = val
}

func (*GetNextWithdrawalsOKApplicationJSON) getNextWithdrawalsRes() {}

type GetNextWithdrawalsOKApplicationJSONDataItem struct {
	// The index of the withdrawal.
	Index string `json:"index"`
	// The index of the withdrawing validator.
	ValidatorIndex string `json:"validator_index"`
	// The address to which the withdrawal is credited.
	Address string `json:"address"`
	// The value withdrawn (gwei).
	Amount string `json:"amount"`
}

// GetIndex returns the value of Index.
func (s *GetNextWithdrawalsOKApplicationJSONDataItem) GetIndex() string {
	return s.Index
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *GetNextWithdrawalsOKApplicationJSONDataItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetAddress returns the value of Address.
func (s *GetNextWithdrawalsOKApplicationJSONDataItem) GetAddress() string {
	return s.Address
}

// GetAmount returns the value of Amount.
func (s *GetNextWithdrawalsOKApplicationJSONDataItem) GetAmount() string {
	return s.Amount
}

// SetIndex sets the value of Index.
func (s *GetNextWithdrawalsOKApplicationJSONDataItem) SetIndex(val string) {
	s.Index = val
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *GetNextWithdrawalsOKApplicationJSONDataItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetAddress sets the value of Address.
func (s *GetNextWithdrawalsOKApplicationJSONDataItem) SetAddress(val string) {
	s.Address = val
}

// SetAmount sets the value of Amount.
func (s *GetNextWithdrawalsOKApplicationJSONDataItem) SetAmount(val string) {
	s.Amount = val
}

// SSZ serialized Withdrawals list. Use Accept header to choose this response type.
type GetNextWithdrawalsOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetNextWithdrawalsOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetNextWithdrawalsOKApplicationOctetStream) getNextWithdrawalsRes() {}

type GetNodeVersionInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetNodeVersionInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetNodeVersionInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetNodeVersionInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetNodeVersionInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetNodeVersionInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetNodeVersionInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetNodeVersionInternalServerError) getNodeVersionRes() {}

type GetNodeVersionOK struct {
	Data GetNodeVersionOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetNodeVersionOK) GetData() GetNodeVersionOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetNodeVersionOK) SetData(val GetNodeVersionOKData) {
	s.Data = val
}

func (*GetNodeVersionOK) getNodeVersionRes() {}

type GetNodeVersionOKData struct {
	// A string which uniquely identifies the client implementation and its version; similar to [HTTP
	// User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).
	Version string `json:"version"`
}

// GetVersion returns the value of Version.
func (s *GetNodeVersionOKData) GetVersion() string {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *GetNodeVersionOKData) SetVersion(val string) {
	s.Version = val
}

type GetPeerBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPeerBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPeerBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPeerBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPeerBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPeerBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPeerBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPeerBadRequest) getPeerRes() {}

type GetPeerCountInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPeerCountInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPeerCountInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPeerCountInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPeerCountInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPeerCountInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPeerCountInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPeerCountInternalServerError) getPeerCountRes() {}

type GetPeerCountOK struct {
	Data GetPeerCountOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPeerCountOK) GetData() GetPeerCountOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPeerCountOK) SetData(val GetPeerCountOKData) {
	s.Data = val
}

func (*GetPeerCountOK) getPeerCountRes() {}

type GetPeerCountOKData struct {
	Disconnected  string `json:"disconnected"`
	Connecting    string `json:"connecting"`
	Connected     string `json:"connected"`
	Disconnecting string `json:"disconnecting"`
}

// GetDisconnected returns the value of Disconnected.
func (s *GetPeerCountOKData) GetDisconnected() string {
	return s.Disconnected
}

// GetConnecting returns the value of Connecting.
func (s *GetPeerCountOKData) GetConnecting() string {
	return s.Connecting
}

// GetConnected returns the value of Connected.
func (s *GetPeerCountOKData) GetConnected() string {
	return s.Connected
}

// GetDisconnecting returns the value of Disconnecting.
func (s *GetPeerCountOKData) GetDisconnecting() string {
	return s.Disconnecting
}

// SetDisconnected sets the value of Disconnected.
func (s *GetPeerCountOKData) SetDisconnected(val string) {
	s.Disconnected = val
}

// SetConnecting sets the value of Connecting.
func (s *GetPeerCountOKData) SetConnecting(val string) {
	s.Connecting = val
}

// SetConnected sets the value of Connected.
func (s *GetPeerCountOKData) SetConnected(val string) {
	s.Connected = val
}

// SetDisconnecting sets the value of Disconnecting.
func (s *GetPeerCountOKData) SetDisconnecting(val string) {
	s.Disconnecting = val
}

type GetPeerInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPeerInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPeerInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPeerInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPeerInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPeerInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPeerInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPeerInternalServerError) getPeerRes() {}

type GetPeerNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPeerNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPeerNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPeerNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPeerNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPeerNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPeerNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPeerNotFound) getPeerRes() {}

type GetPeerOK struct {
	Data GetPeerOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPeerOK) GetData() GetPeerOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPeerOK) SetData(val GetPeerOKData) {
	s.Data = val
}

func (*GetPeerOK) getPeerRes() {}

type GetPeerOKData struct {
	// Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/).
	PeerID string           `json:"peer_id"`
	Enr    GetPeerOKDataEnr `json:"enr"`
	// Multiaddrs used in last peer connection.
	LastSeenP2PAddress string                 `json:"last_seen_p2p_address"`
	State              GetPeerOKDataState     `json:"state"`
	Direction          GetPeerOKDataDirection `json:"direction"`
}

// GetPeerID returns the value of PeerID.
func (s *GetPeerOKData) GetPeerID() string {
	return s.PeerID
}

// GetEnr returns the value of Enr.
func (s *GetPeerOKData) GetEnr() GetPeerOKDataEnr {
	return s.Enr
}

// GetLastSeenP2PAddress returns the value of LastSeenP2PAddress.
func (s *GetPeerOKData) GetLastSeenP2PAddress() string {
	return s.LastSeenP2PAddress
}

// GetState returns the value of State.
func (s *GetPeerOKData) GetState() GetPeerOKDataState {
	return s.State
}

// GetDirection returns the value of Direction.
func (s *GetPeerOKData) GetDirection() GetPeerOKDataDirection {
	return s.Direction
}

// SetPeerID sets the value of PeerID.
func (s *GetPeerOKData) SetPeerID(val string) {
	s.PeerID = val
}

// SetEnr sets the value of Enr.
func (s *GetPeerOKData) SetEnr(val GetPeerOKDataEnr) {
	s.Enr = val
}

// SetLastSeenP2PAddress sets the value of LastSeenP2PAddress.
func (s *GetPeerOKData) SetLastSeenP2PAddress(val string) {
	s.LastSeenP2PAddress = val
}

// SetState sets the value of State.
func (s *GetPeerOKData) SetState(val GetPeerOKDataState) {
	s.State = val
}

// SetDirection sets the value of Direction.
func (s *GetPeerOKData) SetDirection(val GetPeerOKDataDirection) {
	s.Direction = val
}

type GetPeerOKDataDirection string

const (
	GetPeerOKDataDirectionInbound  GetPeerOKDataDirection = "inbound"
	GetPeerOKDataDirectionOutbound GetPeerOKDataDirection = "outbound"
)

// AllValues returns all GetPeerOKDataDirection values.
func (GetPeerOKDataDirection) AllValues() []GetPeerOKDataDirection {
	return []GetPeerOKDataDirection{
		GetPeerOKDataDirectionInbound,
		GetPeerOKDataDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPeerOKDataDirection) MarshalText() ([]byte, error) {
	switch s {
	case GetPeerOKDataDirectionInbound:
		return []byte(s), nil
	case GetPeerOKDataDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPeerOKDataDirection) UnmarshalText(data []byte) error {
	switch GetPeerOKDataDirection(data) {
	case GetPeerOKDataDirectionInbound:
		*s = GetPeerOKDataDirectionInbound
		return nil
	case GetPeerOKDataDirectionOutbound:
		*s = GetPeerOKDataDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetPeerOKDataEnr represents sum type.
type GetPeerOKDataEnr struct {
	Type   GetPeerOKDataEnrType // switch on this field
	Null   struct{}
	String string
}

// GetPeerOKDataEnrType is oneOf type of GetPeerOKDataEnr.
type GetPeerOKDataEnrType string

// Possible values for GetPeerOKDataEnrType.
const (
	NullGetPeerOKDataEnr   GetPeerOKDataEnrType = "struct{}"
	StringGetPeerOKDataEnr GetPeerOKDataEnrType = "string"
)

// IsNull reports whether GetPeerOKDataEnr is struct{}.
func (s GetPeerOKDataEnr) IsNull() bool { return s.Type == NullGetPeerOKDataEnr }

// IsString reports whether GetPeerOKDataEnr is string.
func (s GetPeerOKDataEnr) IsString() bool { return s.Type == StringGetPeerOKDataEnr }

// SetNull sets GetPeerOKDataEnr to struct{}.
func (s *GetPeerOKDataEnr) SetNull(v struct{}) {
	s.Type = NullGetPeerOKDataEnr
	s.Null = v
}

// GetNull returns struct{} and true boolean if GetPeerOKDataEnr is struct{}.
func (s GetPeerOKDataEnr) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullGetPeerOKDataEnr returns new GetPeerOKDataEnr from struct{}.
func NewNullGetPeerOKDataEnr(v struct{}) GetPeerOKDataEnr {
	var s GetPeerOKDataEnr
	s.SetNull(v)
	return s
}

// SetString sets GetPeerOKDataEnr to string.
func (s *GetPeerOKDataEnr) SetString(v string) {
	s.Type = StringGetPeerOKDataEnr
	s.String = v
}

// GetString returns string and true boolean if GetPeerOKDataEnr is string.
func (s GetPeerOKDataEnr) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetPeerOKDataEnr returns new GetPeerOKDataEnr from string.
func NewStringGetPeerOKDataEnr(v string) GetPeerOKDataEnr {
	var s GetPeerOKDataEnr
	s.SetString(v)
	return s
}

type GetPeerOKDataState string

const (
	GetPeerOKDataStateDisconnected  GetPeerOKDataState = "disconnected"
	GetPeerOKDataStateConnecting    GetPeerOKDataState = "connecting"
	GetPeerOKDataStateConnected     GetPeerOKDataState = "connected"
	GetPeerOKDataStateDisconnecting GetPeerOKDataState = "disconnecting"
)

// AllValues returns all GetPeerOKDataState values.
func (GetPeerOKDataState) AllValues() []GetPeerOKDataState {
	return []GetPeerOKDataState{
		GetPeerOKDataStateDisconnected,
		GetPeerOKDataStateConnecting,
		GetPeerOKDataStateConnected,
		GetPeerOKDataStateDisconnecting,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPeerOKDataState) MarshalText() ([]byte, error) {
	switch s {
	case GetPeerOKDataStateDisconnected:
		return []byte(s), nil
	case GetPeerOKDataStateConnecting:
		return []byte(s), nil
	case GetPeerOKDataStateConnected:
		return []byte(s), nil
	case GetPeerOKDataStateDisconnecting:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPeerOKDataState) UnmarshalText(data []byte) error {
	switch GetPeerOKDataState(data) {
	case GetPeerOKDataStateDisconnected:
		*s = GetPeerOKDataStateDisconnected
		return nil
	case GetPeerOKDataStateConnecting:
		*s = GetPeerOKDataStateConnecting
		return nil
	case GetPeerOKDataStateConnected:
		*s = GetPeerOKDataStateConnected
		return nil
	case GetPeerOKDataStateDisconnecting:
		*s = GetPeerOKDataStateDisconnecting
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPeersDirectionItem string

const (
	GetPeersDirectionItemInbound  GetPeersDirectionItem = "inbound"
	GetPeersDirectionItemOutbound GetPeersDirectionItem = "outbound"
)

// AllValues returns all GetPeersDirectionItem values.
func (GetPeersDirectionItem) AllValues() []GetPeersDirectionItem {
	return []GetPeersDirectionItem{
		GetPeersDirectionItemInbound,
		GetPeersDirectionItemOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPeersDirectionItem) MarshalText() ([]byte, error) {
	switch s {
	case GetPeersDirectionItemInbound:
		return []byte(s), nil
	case GetPeersDirectionItemOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPeersDirectionItem) UnmarshalText(data []byte) error {
	switch GetPeersDirectionItem(data) {
	case GetPeersDirectionItemInbound:
		*s = GetPeersDirectionItemInbound
		return nil
	case GetPeersDirectionItemOutbound:
		*s = GetPeersDirectionItemOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPeersInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPeersInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPeersInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPeersInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPeersInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPeersInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPeersInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPeersInternalServerError) getPeersRes() {}

type GetPeersOK struct {
	Data []GetPeersOKDataItem `json:"data"`
	Meta GetPeersOKMeta       `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetPeersOK) GetData() []GetPeersOKDataItem {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetPeersOK) GetMeta() GetPeersOKMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetPeersOK) SetData(val []GetPeersOKDataItem) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetPeersOK) SetMeta(val GetPeersOKMeta) {
	s.Meta = val
}

func (*GetPeersOK) getPeersRes() {}

type GetPeersOKDataItem struct {
	// Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/).
	PeerID string                `json:"peer_id"`
	Enr    GetPeersOKDataItemEnr `json:"enr"`
	// Multiaddrs used in last peer connection.
	LastSeenP2PAddress string                      `json:"last_seen_p2p_address"`
	State              GetPeersOKDataItemState     `json:"state"`
	Direction          GetPeersOKDataItemDirection `json:"direction"`
}

// GetPeerID returns the value of PeerID.
func (s *GetPeersOKDataItem) GetPeerID() string {
	return s.PeerID
}

// GetEnr returns the value of Enr.
func (s *GetPeersOKDataItem) GetEnr() GetPeersOKDataItemEnr {
	return s.Enr
}

// GetLastSeenP2PAddress returns the value of LastSeenP2PAddress.
func (s *GetPeersOKDataItem) GetLastSeenP2PAddress() string {
	return s.LastSeenP2PAddress
}

// GetState returns the value of State.
func (s *GetPeersOKDataItem) GetState() GetPeersOKDataItemState {
	return s.State
}

// GetDirection returns the value of Direction.
func (s *GetPeersOKDataItem) GetDirection() GetPeersOKDataItemDirection {
	return s.Direction
}

// SetPeerID sets the value of PeerID.
func (s *GetPeersOKDataItem) SetPeerID(val string) {
	s.PeerID = val
}

// SetEnr sets the value of Enr.
func (s *GetPeersOKDataItem) SetEnr(val GetPeersOKDataItemEnr) {
	s.Enr = val
}

// SetLastSeenP2PAddress sets the value of LastSeenP2PAddress.
func (s *GetPeersOKDataItem) SetLastSeenP2PAddress(val string) {
	s.LastSeenP2PAddress = val
}

// SetState sets the value of State.
func (s *GetPeersOKDataItem) SetState(val GetPeersOKDataItemState) {
	s.State = val
}

// SetDirection sets the value of Direction.
func (s *GetPeersOKDataItem) SetDirection(val GetPeersOKDataItemDirection) {
	s.Direction = val
}

type GetPeersOKDataItemDirection string

const (
	GetPeersOKDataItemDirectionInbound  GetPeersOKDataItemDirection = "inbound"
	GetPeersOKDataItemDirectionOutbound GetPeersOKDataItemDirection = "outbound"
)

// AllValues returns all GetPeersOKDataItemDirection values.
func (GetPeersOKDataItemDirection) AllValues() []GetPeersOKDataItemDirection {
	return []GetPeersOKDataItemDirection{
		GetPeersOKDataItemDirectionInbound,
		GetPeersOKDataItemDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPeersOKDataItemDirection) MarshalText() ([]byte, error) {
	switch s {
	case GetPeersOKDataItemDirectionInbound:
		return []byte(s), nil
	case GetPeersOKDataItemDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPeersOKDataItemDirection) UnmarshalText(data []byte) error {
	switch GetPeersOKDataItemDirection(data) {
	case GetPeersOKDataItemDirectionInbound:
		*s = GetPeersOKDataItemDirectionInbound
		return nil
	case GetPeersOKDataItemDirectionOutbound:
		*s = GetPeersOKDataItemDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetPeersOKDataItemEnr represents sum type.
type GetPeersOKDataItemEnr struct {
	Type   GetPeersOKDataItemEnrType // switch on this field
	Null   struct{}
	String string
}

// GetPeersOKDataItemEnrType is oneOf type of GetPeersOKDataItemEnr.
type GetPeersOKDataItemEnrType string

// Possible values for GetPeersOKDataItemEnrType.
const (
	NullGetPeersOKDataItemEnr   GetPeersOKDataItemEnrType = "struct{}"
	StringGetPeersOKDataItemEnr GetPeersOKDataItemEnrType = "string"
)

// IsNull reports whether GetPeersOKDataItemEnr is struct{}.
func (s GetPeersOKDataItemEnr) IsNull() bool { return s.Type == NullGetPeersOKDataItemEnr }

// IsString reports whether GetPeersOKDataItemEnr is string.
func (s GetPeersOKDataItemEnr) IsString() bool { return s.Type == StringGetPeersOKDataItemEnr }

// SetNull sets GetPeersOKDataItemEnr to struct{}.
func (s *GetPeersOKDataItemEnr) SetNull(v struct{}) {
	s.Type = NullGetPeersOKDataItemEnr
	s.Null = v
}

// GetNull returns struct{} and true boolean if GetPeersOKDataItemEnr is struct{}.
func (s GetPeersOKDataItemEnr) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullGetPeersOKDataItemEnr returns new GetPeersOKDataItemEnr from struct{}.
func NewNullGetPeersOKDataItemEnr(v struct{}) GetPeersOKDataItemEnr {
	var s GetPeersOKDataItemEnr
	s.SetNull(v)
	return s
}

// SetString sets GetPeersOKDataItemEnr to string.
func (s *GetPeersOKDataItemEnr) SetString(v string) {
	s.Type = StringGetPeersOKDataItemEnr
	s.String = v
}

// GetString returns string and true boolean if GetPeersOKDataItemEnr is string.
func (s GetPeersOKDataItemEnr) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetPeersOKDataItemEnr returns new GetPeersOKDataItemEnr from string.
func NewStringGetPeersOKDataItemEnr(v string) GetPeersOKDataItemEnr {
	var s GetPeersOKDataItemEnr
	s.SetString(v)
	return s
}

type GetPeersOKDataItemState string

const (
	GetPeersOKDataItemStateDisconnected  GetPeersOKDataItemState = "disconnected"
	GetPeersOKDataItemStateConnecting    GetPeersOKDataItemState = "connecting"
	GetPeersOKDataItemStateConnected     GetPeersOKDataItemState = "connected"
	GetPeersOKDataItemStateDisconnecting GetPeersOKDataItemState = "disconnecting"
)

// AllValues returns all GetPeersOKDataItemState values.
func (GetPeersOKDataItemState) AllValues() []GetPeersOKDataItemState {
	return []GetPeersOKDataItemState{
		GetPeersOKDataItemStateDisconnected,
		GetPeersOKDataItemStateConnecting,
		GetPeersOKDataItemStateConnected,
		GetPeersOKDataItemStateDisconnecting,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPeersOKDataItemState) MarshalText() ([]byte, error) {
	switch s {
	case GetPeersOKDataItemStateDisconnected:
		return []byte(s), nil
	case GetPeersOKDataItemStateConnecting:
		return []byte(s), nil
	case GetPeersOKDataItemStateConnected:
		return []byte(s), nil
	case GetPeersOKDataItemStateDisconnecting:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPeersOKDataItemState) UnmarshalText(data []byte) error {
	switch GetPeersOKDataItemState(data) {
	case GetPeersOKDataItemStateDisconnected:
		*s = GetPeersOKDataItemStateDisconnected
		return nil
	case GetPeersOKDataItemStateConnecting:
		*s = GetPeersOKDataItemStateConnecting
		return nil
	case GetPeersOKDataItemStateConnected:
		*s = GetPeersOKDataItemStateConnected
		return nil
	case GetPeersOKDataItemStateDisconnecting:
		*s = GetPeersOKDataItemStateDisconnecting
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPeersOKMeta struct {
	// Total number of items.
	Count float64 `json:"count"`
}

// GetCount returns the value of Count.
func (s *GetPeersOKMeta) GetCount() float64 {
	return s.Count
}

// SetCount sets the value of Count.
func (s *GetPeersOKMeta) SetCount(val float64) {
	s.Count = val
}

type GetPeersStateItem string

const (
	GetPeersStateItemDisconnected  GetPeersStateItem = "disconnected"
	GetPeersStateItemConnecting    GetPeersStateItem = "connecting"
	GetPeersStateItemConnected     GetPeersStateItem = "connected"
	GetPeersStateItemDisconnecting GetPeersStateItem = "disconnecting"
)

// AllValues returns all GetPeersStateItem values.
func (GetPeersStateItem) AllValues() []GetPeersStateItem {
	return []GetPeersStateItem{
		GetPeersStateItemDisconnected,
		GetPeersStateItemConnecting,
		GetPeersStateItemConnected,
		GetPeersStateItemDisconnecting,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPeersStateItem) MarshalText() ([]byte, error) {
	switch s {
	case GetPeersStateItemDisconnected:
		return []byte(s), nil
	case GetPeersStateItemConnecting:
		return []byte(s), nil
	case GetPeersStateItemConnected:
		return []byte(s), nil
	case GetPeersStateItemDisconnecting:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPeersStateItem) UnmarshalText(data []byte) error {
	switch GetPeersStateItem(data) {
	case GetPeersStateItemDisconnected:
		*s = GetPeersStateItemDisconnected
		return nil
	case GetPeersStateItemConnecting:
		*s = GetPeersStateItemConnecting
		return nil
	case GetPeersStateItemConnected:
		*s = GetPeersStateItemConnected
		return nil
	case GetPeersStateItemDisconnecting:
		*s = GetPeersStateItemDisconnecting
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPoolAttestationsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPoolAttestationsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPoolAttestationsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPoolAttestationsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPoolAttestationsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPoolAttestationsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPoolAttestationsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPoolAttestationsBadRequest) getPoolAttestationsRes() {}

type GetPoolAttestationsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPoolAttestationsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPoolAttestationsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPoolAttestationsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPoolAttestationsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPoolAttestationsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPoolAttestationsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPoolAttestationsInternalServerError) getPoolAttestationsRes() {}

type GetPoolAttestationsOK struct {
	Data []GetPoolAttestationsOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPoolAttestationsOK) GetData() []GetPoolAttestationsOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPoolAttestationsOK) SetData(val []GetPoolAttestationsOKDataItem) {
	s.Data = val
}

func (*GetPoolAttestationsOK) getPoolAttestationsRes() {}

// The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestation) object from the CL spec.
type GetPoolAttestationsOKDataItem struct {
	// Attester aggregation bits.
	AggregationBits string `json:"aggregation_bits"`
	// BLS aggregate signature.
	Signature string `json:"signature"`
	// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
	Data GetPoolAttestationsOKDataItemData `json:"data"`
}

// GetAggregationBits returns the value of AggregationBits.
func (s *GetPoolAttestationsOKDataItem) GetAggregationBits() string {
	return s.AggregationBits
}

// GetSignature returns the value of Signature.
func (s *GetPoolAttestationsOKDataItem) GetSignature() string {
	return s.Signature
}

// GetData returns the value of Data.
func (s *GetPoolAttestationsOKDataItem) GetData() GetPoolAttestationsOKDataItemData {
	return s.Data
}

// SetAggregationBits sets the value of AggregationBits.
func (s *GetPoolAttestationsOKDataItem) SetAggregationBits(val string) {
	s.AggregationBits = val
}

// SetSignature sets the value of Signature.
func (s *GetPoolAttestationsOKDataItem) SetSignature(val string) {
	s.Signature = val
}

// SetData sets the value of Data.
func (s *GetPoolAttestationsOKDataItem) SetData(val GetPoolAttestationsOKDataItemData) {
	s.Data = val
}

// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
type GetPoolAttestationsOKDataItemData struct {
	Slot  string `json:"slot"`
	Index string `json:"index"`
	// LMD GHOST vote.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Source GetPoolAttestationsOKDataItemDataSource `json:"source"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Target GetPoolAttestationsOKDataItemDataTarget `json:"target"`
}

// GetSlot returns the value of Slot.
func (s *GetPoolAttestationsOKDataItemData) GetSlot() string {
	return s.Slot
}

// GetIndex returns the value of Index.
func (s *GetPoolAttestationsOKDataItemData) GetIndex() string {
	return s.Index
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *GetPoolAttestationsOKDataItemData) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSource returns the value of Source.
func (s *GetPoolAttestationsOKDataItemData) GetSource() GetPoolAttestationsOKDataItemDataSource {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *GetPoolAttestationsOKDataItemData) GetTarget() GetPoolAttestationsOKDataItemDataTarget {
	return s.Target
}

// SetSlot sets the value of Slot.
func (s *GetPoolAttestationsOKDataItemData) SetSlot(val string) {
	s.Slot = val
}

// SetIndex sets the value of Index.
func (s *GetPoolAttestationsOKDataItemData) SetIndex(val string) {
	s.Index = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *GetPoolAttestationsOKDataItemData) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSource sets the value of Source.
func (s *GetPoolAttestationsOKDataItemData) SetSource(val GetPoolAttestationsOKDataItemDataSource) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *GetPoolAttestationsOKDataItemData) SetTarget(val GetPoolAttestationsOKDataItemDataTarget) {
	s.Target = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetPoolAttestationsOKDataItemDataSource struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetPoolAttestationsOKDataItemDataSource) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetPoolAttestationsOKDataItemDataSource) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetPoolAttestationsOKDataItemDataSource) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetPoolAttestationsOKDataItemDataSource) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetPoolAttestationsOKDataItemDataTarget struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetPoolAttestationsOKDataItemDataTarget) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetPoolAttestationsOKDataItemDataTarget) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetPoolAttestationsOKDataItemDataTarget) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetPoolAttestationsOKDataItemDataTarget) SetRoot(val string) {
	s.Root = val
}

type GetPoolAttesterSlashingsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPoolAttesterSlashingsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPoolAttesterSlashingsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPoolAttesterSlashingsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPoolAttesterSlashingsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPoolAttesterSlashingsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPoolAttesterSlashingsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPoolAttesterSlashingsInternalServerError) getPoolAttesterSlashingsRes() {}

type GetPoolAttesterSlashingsOK struct {
	Data []GetPoolAttesterSlashingsOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPoolAttesterSlashingsOK) GetData() []GetPoolAttesterSlashingsOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPoolAttesterSlashingsOK) SetData(val []GetPoolAttesterSlashingsOKDataItem) {
	s.Data = val
}

func (*GetPoolAttesterSlashingsOK) getPoolAttesterSlashingsRes() {}

// The [`AttesterSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attesterslashing) object from the CL spec.
type GetPoolAttesterSlashingsOKDataItem struct {
	// The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec.
	Attestation1 GetPoolAttesterSlashingsOKDataItemAttestation1 `json:"attestation_1"`
	// The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec.
	Attestation2 GetPoolAttesterSlashingsOKDataItemAttestation2 `json:"attestation_2"`
}

// GetAttestation1 returns the value of Attestation1.
func (s *GetPoolAttesterSlashingsOKDataItem) GetAttestation1() GetPoolAttesterSlashingsOKDataItemAttestation1 {
	return s.Attestation1
}

// GetAttestation2 returns the value of Attestation2.
func (s *GetPoolAttesterSlashingsOKDataItem) GetAttestation2() GetPoolAttesterSlashingsOKDataItemAttestation2 {
	return s.Attestation2
}

// SetAttestation1 sets the value of Attestation1.
func (s *GetPoolAttesterSlashingsOKDataItem) SetAttestation1(val GetPoolAttesterSlashingsOKDataItemAttestation1) {
	s.Attestation1 = val
}

// SetAttestation2 sets the value of Attestation2.
func (s *GetPoolAttesterSlashingsOKDataItem) SetAttestation2(val GetPoolAttesterSlashingsOKDataItemAttestation2) {
	s.Attestation2 = val
}

// The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec.
type GetPoolAttesterSlashingsOKDataItemAttestation1 struct {
	// Attesting validator indices.
	AttestingIndices []string `json:"attesting_indices"`
	// The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
	Signature OptString `json:"signature"`
	// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
	Data OptGetPoolAttesterSlashingsOKDataItemAttestation1Data `json:"data"`
}

// GetAttestingIndices returns the value of AttestingIndices.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1) GetAttestingIndices() []string {
	return s.AttestingIndices
}

// GetSignature returns the value of Signature.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1) GetSignature() OptString {
	return s.Signature
}

// GetData returns the value of Data.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1) GetData() OptGetPoolAttesterSlashingsOKDataItemAttestation1Data {
	return s.Data
}

// SetAttestingIndices sets the value of AttestingIndices.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1) SetAttestingIndices(val []string) {
	s.AttestingIndices = val
}

// SetSignature sets the value of Signature.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1) SetSignature(val OptString) {
	s.Signature = val
}

// SetData sets the value of Data.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1) SetData(val OptGetPoolAttesterSlashingsOKDataItemAttestation1Data) {
	s.Data = val
}

// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
type GetPoolAttesterSlashingsOKDataItemAttestation1Data struct {
	Slot  string `json:"slot"`
	Index string `json:"index"`
	// LMD GHOST vote.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Source GetPoolAttesterSlashingsOKDataItemAttestation1DataSource `json:"source"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Target GetPoolAttesterSlashingsOKDataItemAttestation1DataTarget `json:"target"`
}

// GetSlot returns the value of Slot.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1Data) GetSlot() string {
	return s.Slot
}

// GetIndex returns the value of Index.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1Data) GetIndex() string {
	return s.Index
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1Data) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSource returns the value of Source.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1Data) GetSource() GetPoolAttesterSlashingsOKDataItemAttestation1DataSource {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1Data) GetTarget() GetPoolAttesterSlashingsOKDataItemAttestation1DataTarget {
	return s.Target
}

// SetSlot sets the value of Slot.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1Data) SetSlot(val string) {
	s.Slot = val
}

// SetIndex sets the value of Index.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1Data) SetIndex(val string) {
	s.Index = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1Data) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSource sets the value of Source.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1Data) SetSource(val GetPoolAttesterSlashingsOKDataItemAttestation1DataSource) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1Data) SetTarget(val GetPoolAttesterSlashingsOKDataItemAttestation1DataTarget) {
	s.Target = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetPoolAttesterSlashingsOKDataItemAttestation1DataSource struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1DataSource) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1DataSource) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1DataSource) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1DataSource) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetPoolAttesterSlashingsOKDataItemAttestation1DataTarget struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1DataTarget) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1DataTarget) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1DataTarget) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation1DataTarget) SetRoot(val string) {
	s.Root = val
}

// The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec.
type GetPoolAttesterSlashingsOKDataItemAttestation2 struct {
	// Attesting validator indices.
	AttestingIndices []string `json:"attesting_indices"`
	// The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
	Signature OptString `json:"signature"`
	// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
	Data OptGetPoolAttesterSlashingsOKDataItemAttestation2Data `json:"data"`
}

// GetAttestingIndices returns the value of AttestingIndices.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2) GetAttestingIndices() []string {
	return s.AttestingIndices
}

// GetSignature returns the value of Signature.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2) GetSignature() OptString {
	return s.Signature
}

// GetData returns the value of Data.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2) GetData() OptGetPoolAttesterSlashingsOKDataItemAttestation2Data {
	return s.Data
}

// SetAttestingIndices sets the value of AttestingIndices.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2) SetAttestingIndices(val []string) {
	s.AttestingIndices = val
}

// SetSignature sets the value of Signature.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2) SetSignature(val OptString) {
	s.Signature = val
}

// SetData sets the value of Data.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2) SetData(val OptGetPoolAttesterSlashingsOKDataItemAttestation2Data) {
	s.Data = val
}

// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
type GetPoolAttesterSlashingsOKDataItemAttestation2Data struct {
	Slot  string `json:"slot"`
	Index string `json:"index"`
	// LMD GHOST vote.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Source GetPoolAttesterSlashingsOKDataItemAttestation2DataSource `json:"source"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Target GetPoolAttesterSlashingsOKDataItemAttestation2DataTarget `json:"target"`
}

// GetSlot returns the value of Slot.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2Data) GetSlot() string {
	return s.Slot
}

// GetIndex returns the value of Index.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2Data) GetIndex() string {
	return s.Index
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2Data) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSource returns the value of Source.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2Data) GetSource() GetPoolAttesterSlashingsOKDataItemAttestation2DataSource {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2Data) GetTarget() GetPoolAttesterSlashingsOKDataItemAttestation2DataTarget {
	return s.Target
}

// SetSlot sets the value of Slot.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2Data) SetSlot(val string) {
	s.Slot = val
}

// SetIndex sets the value of Index.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2Data) SetIndex(val string) {
	s.Index = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2Data) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSource sets the value of Source.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2Data) SetSource(val GetPoolAttesterSlashingsOKDataItemAttestation2DataSource) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2Data) SetTarget(val GetPoolAttesterSlashingsOKDataItemAttestation2DataTarget) {
	s.Target = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetPoolAttesterSlashingsOKDataItemAttestation2DataSource struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2DataSource) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2DataSource) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2DataSource) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2DataSource) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetPoolAttesterSlashingsOKDataItemAttestation2DataTarget struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2DataTarget) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2DataTarget) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2DataTarget) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetPoolAttesterSlashingsOKDataItemAttestation2DataTarget) SetRoot(val string) {
	s.Root = val
}

type GetPoolBLSToExecutionChangesInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPoolBLSToExecutionChangesInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPoolBLSToExecutionChangesInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPoolBLSToExecutionChangesInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPoolBLSToExecutionChangesInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPoolBLSToExecutionChangesInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPoolBLSToExecutionChangesInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPoolBLSToExecutionChangesInternalServerError) getPoolBLSToExecutionChangesRes() {}

type GetPoolBLSToExecutionChangesOK struct {
	Data []GetPoolBLSToExecutionChangesOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPoolBLSToExecutionChangesOK) GetData() []GetPoolBLSToExecutionChangesOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPoolBLSToExecutionChangesOK) SetData(val []GetPoolBLSToExecutionChangesOKDataItem) {
	s.Data = val
}

func (*GetPoolBLSToExecutionChangesOK) getPoolBLSToExecutionChangesRes() {}

// The [`SignedBLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/capella/beacon-chain.md#signedblstoexecutionchange) object from the CL spec.
type GetPoolBLSToExecutionChangesOKDataItem struct {
	// The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec.
	Message   GetPoolBLSToExecutionChangesOKDataItemMessage `json:"message"`
	Signature string                                        `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *GetPoolBLSToExecutionChangesOKDataItem) GetMessage() GetPoolBLSToExecutionChangesOKDataItemMessage {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *GetPoolBLSToExecutionChangesOKDataItem) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *GetPoolBLSToExecutionChangesOKDataItem) SetMessage(val GetPoolBLSToExecutionChangesOKDataItemMessage) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *GetPoolBLSToExecutionChangesOKDataItem) SetSignature(val string) {
	s.Signature = val
}

// The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec.
type GetPoolBLSToExecutionChangesOKDataItemMessage struct {
	// Index of the validator for which credentials will be changed.
	ValidatorIndex string `json:"validator_index"`
	// Public key of existing credentials.
	FromBlsPubkey string `json:"from_bls_pubkey"`
	// Execution address to which the credentials will be changed.
	ToExecutionAddress string `json:"to_execution_address"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *GetPoolBLSToExecutionChangesOKDataItemMessage) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetFromBlsPubkey returns the value of FromBlsPubkey.
func (s *GetPoolBLSToExecutionChangesOKDataItemMessage) GetFromBlsPubkey() string {
	return s.FromBlsPubkey
}

// GetToExecutionAddress returns the value of ToExecutionAddress.
func (s *GetPoolBLSToExecutionChangesOKDataItemMessage) GetToExecutionAddress() string {
	return s.ToExecutionAddress
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *GetPoolBLSToExecutionChangesOKDataItemMessage) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetFromBlsPubkey sets the value of FromBlsPubkey.
func (s *GetPoolBLSToExecutionChangesOKDataItemMessage) SetFromBlsPubkey(val string) {
	s.FromBlsPubkey = val
}

// SetToExecutionAddress sets the value of ToExecutionAddress.
func (s *GetPoolBLSToExecutionChangesOKDataItemMessage) SetToExecutionAddress(val string) {
	s.ToExecutionAddress = val
}

type GetPoolProposerSlashingsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPoolProposerSlashingsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPoolProposerSlashingsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPoolProposerSlashingsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPoolProposerSlashingsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPoolProposerSlashingsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPoolProposerSlashingsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPoolProposerSlashingsInternalServerError) getPoolProposerSlashingsRes() {}

type GetPoolProposerSlashingsOK struct {
	Data []GetPoolProposerSlashingsOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPoolProposerSlashingsOK) GetData() []GetPoolProposerSlashingsOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPoolProposerSlashingsOK) SetData(val []GetPoolProposerSlashingsOKDataItem) {
	s.Data = val
}

func (*GetPoolProposerSlashingsOK) getPoolProposerSlashingsRes() {}

// The [`ProposerSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#proposerslashing) object from the CL spec.
type GetPoolProposerSlashingsOKDataItem struct {
	// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
	SignedHeader1 GetPoolProposerSlashingsOKDataItemSignedHeader1 `json:"signed_header_1"`
	// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
	SignedHeader2 GetPoolProposerSlashingsOKDataItemSignedHeader2 `json:"signed_header_2"`
}

// GetSignedHeader1 returns the value of SignedHeader1.
func (s *GetPoolProposerSlashingsOKDataItem) GetSignedHeader1() GetPoolProposerSlashingsOKDataItemSignedHeader1 {
	return s.SignedHeader1
}

// GetSignedHeader2 returns the value of SignedHeader2.
func (s *GetPoolProposerSlashingsOKDataItem) GetSignedHeader2() GetPoolProposerSlashingsOKDataItemSignedHeader2 {
	return s.SignedHeader2
}

// SetSignedHeader1 sets the value of SignedHeader1.
func (s *GetPoolProposerSlashingsOKDataItem) SetSignedHeader1(val GetPoolProposerSlashingsOKDataItemSignedHeader1) {
	s.SignedHeader1 = val
}

// SetSignedHeader2 sets the value of SignedHeader2.
func (s *GetPoolProposerSlashingsOKDataItem) SetSignedHeader2(val GetPoolProposerSlashingsOKDataItemSignedHeader2) {
	s.SignedHeader2 = val
}

// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
type GetPoolProposerSlashingsOKDataItemSignedHeader1 struct {
	// The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec.
	Message   GetPoolProposerSlashingsOKDataItemSignedHeader1Message `json:"message"`
	Signature string                                                 `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1) GetMessage() GetPoolProposerSlashingsOKDataItemSignedHeader1Message {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1) SetMessage(val GetPoolProposerSlashingsOKDataItemSignedHeader1Message) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1) SetSignature(val string) {
	s.Signature = val
}

// Merged schema.
type GetPoolProposerSlashingsOKDataItemSignedHeader1Message struct {
	// The slot to which this block corresponds.
	Slot string `json:"slot"`
	// Index of validator in validator registry.
	ProposerIndex string `json:"proposer_index"`
	// The signing merkle root of the parent `BeaconBlock`.
	ParentRoot string `json:"parent_root"`
	// The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
	StateRoot string `json:"state_root"`
	// The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`.
	BodyRoot string `json:"body_root"`
}

// GetSlot returns the value of Slot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1Message) GetSlot() string {
	return s.Slot
}

// GetProposerIndex returns the value of ProposerIndex.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1Message) GetProposerIndex() string {
	return s.ProposerIndex
}

// GetParentRoot returns the value of ParentRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1Message) GetParentRoot() string {
	return s.ParentRoot
}

// GetStateRoot returns the value of StateRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1Message) GetStateRoot() string {
	return s.StateRoot
}

// GetBodyRoot returns the value of BodyRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1Message) GetBodyRoot() string {
	return s.BodyRoot
}

// SetSlot sets the value of Slot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1Message) SetSlot(val string) {
	s.Slot = val
}

// SetProposerIndex sets the value of ProposerIndex.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1Message) SetProposerIndex(val string) {
	s.ProposerIndex = val
}

// SetParentRoot sets the value of ParentRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1Message) SetParentRoot(val string) {
	s.ParentRoot = val
}

// SetStateRoot sets the value of StateRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1Message) SetStateRoot(val string) {
	s.StateRoot = val
}

// SetBodyRoot sets the value of BodyRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader1Message) SetBodyRoot(val string) {
	s.BodyRoot = val
}

// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
type GetPoolProposerSlashingsOKDataItemSignedHeader2 struct {
	// The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec.
	Message   GetPoolProposerSlashingsOKDataItemSignedHeader2Message `json:"message"`
	Signature string                                                 `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2) GetMessage() GetPoolProposerSlashingsOKDataItemSignedHeader2Message {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2) SetMessage(val GetPoolProposerSlashingsOKDataItemSignedHeader2Message) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2) SetSignature(val string) {
	s.Signature = val
}

// Merged schema.
type GetPoolProposerSlashingsOKDataItemSignedHeader2Message struct {
	// The slot to which this block corresponds.
	Slot string `json:"slot"`
	// Index of validator in validator registry.
	ProposerIndex string `json:"proposer_index"`
	// The signing merkle root of the parent `BeaconBlock`.
	ParentRoot string `json:"parent_root"`
	// The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
	StateRoot string `json:"state_root"`
	// The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`.
	BodyRoot string `json:"body_root"`
}

// GetSlot returns the value of Slot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2Message) GetSlot() string {
	return s.Slot
}

// GetProposerIndex returns the value of ProposerIndex.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2Message) GetProposerIndex() string {
	return s.ProposerIndex
}

// GetParentRoot returns the value of ParentRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2Message) GetParentRoot() string {
	return s.ParentRoot
}

// GetStateRoot returns the value of StateRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2Message) GetStateRoot() string {
	return s.StateRoot
}

// GetBodyRoot returns the value of BodyRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2Message) GetBodyRoot() string {
	return s.BodyRoot
}

// SetSlot sets the value of Slot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2Message) SetSlot(val string) {
	s.Slot = val
}

// SetProposerIndex sets the value of ProposerIndex.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2Message) SetProposerIndex(val string) {
	s.ProposerIndex = val
}

// SetParentRoot sets the value of ParentRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2Message) SetParentRoot(val string) {
	s.ParentRoot = val
}

// SetStateRoot sets the value of StateRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2Message) SetStateRoot(val string) {
	s.StateRoot = val
}

// SetBodyRoot sets the value of BodyRoot.
func (s *GetPoolProposerSlashingsOKDataItemSignedHeader2Message) SetBodyRoot(val string) {
	s.BodyRoot = val
}

type GetPoolVoluntaryExitsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetPoolVoluntaryExitsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetPoolVoluntaryExitsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetPoolVoluntaryExitsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetPoolVoluntaryExitsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetPoolVoluntaryExitsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetPoolVoluntaryExitsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetPoolVoluntaryExitsInternalServerError) getPoolVoluntaryExitsRes() {}

type GetPoolVoluntaryExitsOK struct {
	Data []GetPoolVoluntaryExitsOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPoolVoluntaryExitsOK) GetData() []GetPoolVoluntaryExitsOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPoolVoluntaryExitsOK) SetData(val []GetPoolVoluntaryExitsOKDataItem) {
	s.Data = val
}

func (*GetPoolVoluntaryExitsOK) getPoolVoluntaryExitsRes() {}

// The [`SignedVoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the CL spec.
type GetPoolVoluntaryExitsOKDataItem struct {
	// The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec.
	Message   GetPoolVoluntaryExitsOKDataItemMessage `json:"message"`
	Signature string                                 `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *GetPoolVoluntaryExitsOKDataItem) GetMessage() GetPoolVoluntaryExitsOKDataItemMessage {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *GetPoolVoluntaryExitsOKDataItem) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *GetPoolVoluntaryExitsOKDataItem) SetMessage(val GetPoolVoluntaryExitsOKDataItemMessage) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *GetPoolVoluntaryExitsOKDataItem) SetSignature(val string) {
	s.Signature = val
}

// The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec.
type GetPoolVoluntaryExitsOKDataItemMessage struct {
	// Minimum epoch for processing exit.
	Epoch string `json:"epoch"`
	// Index of the exiting validator.
	ValidatorIndex string `json:"validator_index"`
}

// GetEpoch returns the value of Epoch.
func (s *GetPoolVoluntaryExitsOKDataItemMessage) GetEpoch() string {
	return s.Epoch
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *GetPoolVoluntaryExitsOKDataItemMessage) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// SetEpoch sets the value of Epoch.
func (s *GetPoolVoluntaryExitsOKDataItemMessage) SetEpoch(val string) {
	s.Epoch = val
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *GetPoolVoluntaryExitsOKDataItemMessage) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

type GetProposerDutiesBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetProposerDutiesBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetProposerDutiesBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetProposerDutiesBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetProposerDutiesBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetProposerDutiesBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetProposerDutiesBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetProposerDutiesBadRequest) getProposerDutiesRes() {}

type GetProposerDutiesInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetProposerDutiesInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetProposerDutiesInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetProposerDutiesInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetProposerDutiesInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetProposerDutiesInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetProposerDutiesInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetProposerDutiesInternalServerError) getProposerDutiesRes() {}

type GetProposerDutiesOK struct {
	// The block root that this response is dependent on.
	DependentRoot string `json:"dependent_root"`
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool                          `json:"execution_optimistic"`
	Data                []GetProposerDutiesOKDataItem `json:"data"`
}

// GetDependentRoot returns the value of DependentRoot.
func (s *GetProposerDutiesOK) GetDependentRoot() string {
	return s.DependentRoot
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetProposerDutiesOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetData returns the value of Data.
func (s *GetProposerDutiesOK) GetData() []GetProposerDutiesOKDataItem {
	return s.Data
}

// SetDependentRoot sets the value of DependentRoot.
func (s *GetProposerDutiesOK) SetDependentRoot(val string) {
	s.DependentRoot = val
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetProposerDutiesOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetData sets the value of Data.
func (s *GetProposerDutiesOK) SetData(val []GetProposerDutiesOKDataItem) {
	s.Data = val
}

func (*GetProposerDutiesOK) getProposerDutiesRes() {}

type GetProposerDutiesOKDataItem struct {
	// The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix,
	// case insensitive._.
	Pubkey string `json:"pubkey"`
	// Index of validator in validator registry.
	ValidatorIndex string `json:"validator_index"`
	// The slot at which the validator must propose block.
	Slot string `json:"slot"`
}

// GetPubkey returns the value of Pubkey.
func (s *GetProposerDutiesOKDataItem) GetPubkey() string {
	return s.Pubkey
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *GetProposerDutiesOKDataItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetSlot returns the value of Slot.
func (s *GetProposerDutiesOKDataItem) GetSlot() string {
	return s.Slot
}

// SetPubkey sets the value of Pubkey.
func (s *GetProposerDutiesOKDataItem) SetPubkey(val string) {
	s.Pubkey = val
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *GetProposerDutiesOKDataItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetSlot sets the value of Slot.
func (s *GetProposerDutiesOKDataItem) SetSlot(val string) {
	s.Slot = val
}

type GetProposerDutiesServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetProposerDutiesServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetProposerDutiesServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetProposerDutiesServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetProposerDutiesServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetProposerDutiesServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetProposerDutiesServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetProposerDutiesServiceUnavailable) getProposerDutiesRes() {}

type GetSpecInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetSpecInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetSpecInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetSpecInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetSpecInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetSpecInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetSpecInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetSpecInternalServerError) getSpecRes() {}

type GetSpecOK struct {
	// Key value mapping of all constants, presets and configuration values for all known hard forks
	// Values are returned with following format:
	// - any value starting with 0x in the spec is returned as a hex string
	// - numeric values are returned as a quoted integer.
	Data GetSpecOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetSpecOK) GetData() GetSpecOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetSpecOK) SetData(val GetSpecOKData) {
	s.Data = val
}

func (*GetSpecOK) getSpecRes() {}

// Key value mapping of all constants, presets and configuration values for all known hard forks
// Values are returned with following format:
// - any value starting with 0x in the spec is returned as a hex string
// - numeric values are returned as a quoted integer.
type GetSpecOKData struct{}

type GetStateFinalityCheckpointsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateFinalityCheckpointsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateFinalityCheckpointsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateFinalityCheckpointsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateFinalityCheckpointsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateFinalityCheckpointsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateFinalityCheckpointsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateFinalityCheckpointsBadRequest) getStateFinalityCheckpointsRes() {}

type GetStateFinalityCheckpointsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateFinalityCheckpointsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateFinalityCheckpointsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateFinalityCheckpointsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateFinalityCheckpointsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateFinalityCheckpointsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateFinalityCheckpointsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateFinalityCheckpointsInternalServerError) getStateFinalityCheckpointsRes() {}

type GetStateFinalityCheckpointsNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateFinalityCheckpointsNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateFinalityCheckpointsNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateFinalityCheckpointsNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateFinalityCheckpointsNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateFinalityCheckpointsNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateFinalityCheckpointsNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateFinalityCheckpointsNotFound) getStateFinalityCheckpointsRes() {}

type GetStateFinalityCheckpointsOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                              `json:"finalized"`
	Data      GetStateFinalityCheckpointsOKData `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetStateFinalityCheckpointsOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetStateFinalityCheckpointsOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetStateFinalityCheckpointsOK) GetData() GetStateFinalityCheckpointsOKData {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetStateFinalityCheckpointsOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetStateFinalityCheckpointsOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetStateFinalityCheckpointsOK) SetData(val GetStateFinalityCheckpointsOKData) {
	s.Data = val
}

func (*GetStateFinalityCheckpointsOK) getStateFinalityCheckpointsRes() {}

type GetStateFinalityCheckpointsOKData struct {
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	PreviousJustified GetStateFinalityCheckpointsOKDataPreviousJustified `json:"previous_justified"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	CurrentJustified GetStateFinalityCheckpointsOKDataCurrentJustified `json:"current_justified"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Finalized GetStateFinalityCheckpointsOKDataFinalized `json:"finalized"`
}

// GetPreviousJustified returns the value of PreviousJustified.
func (s *GetStateFinalityCheckpointsOKData) GetPreviousJustified() GetStateFinalityCheckpointsOKDataPreviousJustified {
	return s.PreviousJustified
}

// GetCurrentJustified returns the value of CurrentJustified.
func (s *GetStateFinalityCheckpointsOKData) GetCurrentJustified() GetStateFinalityCheckpointsOKDataCurrentJustified {
	return s.CurrentJustified
}

// GetFinalized returns the value of Finalized.
func (s *GetStateFinalityCheckpointsOKData) GetFinalized() GetStateFinalityCheckpointsOKDataFinalized {
	return s.Finalized
}

// SetPreviousJustified sets the value of PreviousJustified.
func (s *GetStateFinalityCheckpointsOKData) SetPreviousJustified(val GetStateFinalityCheckpointsOKDataPreviousJustified) {
	s.PreviousJustified = val
}

// SetCurrentJustified sets the value of CurrentJustified.
func (s *GetStateFinalityCheckpointsOKData) SetCurrentJustified(val GetStateFinalityCheckpointsOKDataCurrentJustified) {
	s.CurrentJustified = val
}

// SetFinalized sets the value of Finalized.
func (s *GetStateFinalityCheckpointsOKData) SetFinalized(val GetStateFinalityCheckpointsOKDataFinalized) {
	s.Finalized = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetStateFinalityCheckpointsOKDataCurrentJustified struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetStateFinalityCheckpointsOKDataCurrentJustified) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetStateFinalityCheckpointsOKDataCurrentJustified) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetStateFinalityCheckpointsOKDataCurrentJustified) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetStateFinalityCheckpointsOKDataCurrentJustified) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetStateFinalityCheckpointsOKDataFinalized struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetStateFinalityCheckpointsOKDataFinalized) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetStateFinalityCheckpointsOKDataFinalized) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetStateFinalityCheckpointsOKDataFinalized) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetStateFinalityCheckpointsOKDataFinalized) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type GetStateFinalityCheckpointsOKDataPreviousJustified struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *GetStateFinalityCheckpointsOKDataPreviousJustified) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *GetStateFinalityCheckpointsOKDataPreviousJustified) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *GetStateFinalityCheckpointsOKDataPreviousJustified) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *GetStateFinalityCheckpointsOKDataPreviousJustified) SetRoot(val string) {
	s.Root = val
}

type GetStateForkBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateForkBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateForkBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateForkBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateForkBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateForkBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateForkBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateForkBadRequest) getStateForkRes() {}

type GetStateForkInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateForkInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateForkInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateForkInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateForkInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateForkInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateForkInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateForkInternalServerError) getStateForkRes() {}

type GetStateForkNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateForkNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateForkNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateForkNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateForkNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateForkNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateForkNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateForkNotFound) getStateForkRes() {}

type GetStateForkOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool `json:"finalized"`
	// The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.
	// md#fork) object from the CL spec.
	Data GetStateForkOKData `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetStateForkOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetStateForkOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetStateForkOK) GetData() GetStateForkOKData {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetStateForkOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetStateForkOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetStateForkOK) SetData(val GetStateForkOKData) {
	s.Data = val
}

func (*GetStateForkOK) getStateForkRes() {}

// The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.
// md#fork) object from the CL spec.
type GetStateForkOKData struct {
	// A fork version number.
	PreviousVersion string `json:"previous_version"`
	// A fork version number.
	CurrentVersion string `json:"current_version"`
	Epoch          string `json:"epoch"`
}

// GetPreviousVersion returns the value of PreviousVersion.
func (s *GetStateForkOKData) GetPreviousVersion() string {
	return s.PreviousVersion
}

// GetCurrentVersion returns the value of CurrentVersion.
func (s *GetStateForkOKData) GetCurrentVersion() string {
	return s.CurrentVersion
}

// GetEpoch returns the value of Epoch.
func (s *GetStateForkOKData) GetEpoch() string {
	return s.Epoch
}

// SetPreviousVersion sets the value of PreviousVersion.
func (s *GetStateForkOKData) SetPreviousVersion(val string) {
	s.PreviousVersion = val
}

// SetCurrentVersion sets the value of CurrentVersion.
func (s *GetStateForkOKData) SetCurrentVersion(val string) {
	s.CurrentVersion = val
}

// SetEpoch sets the value of Epoch.
func (s *GetStateForkOKData) SetEpoch(val string) {
	s.Epoch = val
}

type GetStateRandaoBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateRandaoBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateRandaoBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateRandaoBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateRandaoBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateRandaoBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateRandaoBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateRandaoBadRequest) getStateRandaoRes() {}

type GetStateRandaoInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateRandaoInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateRandaoInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateRandaoInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateRandaoInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateRandaoInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateRandaoInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateRandaoInternalServerError) getStateRandaoRes() {}

type GetStateRandaoNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateRandaoNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateRandaoNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateRandaoNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateRandaoNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateRandaoNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateRandaoNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateRandaoNotFound) getStateRandaoRes() {}

type GetStateRandaoOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                 `json:"finalized"`
	Data      GetStateRandaoOKData `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetStateRandaoOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetStateRandaoOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetStateRandaoOK) GetData() GetStateRandaoOKData {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetStateRandaoOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetStateRandaoOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetStateRandaoOK) SetData(val GetStateRandaoOKData) {
	s.Data = val
}

func (*GetStateRandaoOK) getStateRandaoRes() {}

type GetStateRandaoOKData struct {
	// RANDAO mix for requested epoch in state.
	Randao string `json:"randao"`
}

// GetRandao returns the value of Randao.
func (s *GetStateRandaoOKData) GetRandao() string {
	return s.Randao
}

// SetRandao sets the value of Randao.
func (s *GetStateRandaoOKData) SetRandao(val string) {
	s.Randao = val
}

type GetStateRootBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateRootBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateRootBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateRootBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateRootBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateRootBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateRootBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateRootBadRequest) getStateRootRes() {}

type GetStateRootInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateRootInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateRootInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateRootInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateRootInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateRootInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateRootInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateRootInternalServerError) getStateRootRes() {}

type GetStateRootNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateRootNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateRootNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateRootNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateRootNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateRootNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateRootNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateRootNotFound) getStateRootRes() {}

type GetStateRootOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool               `json:"finalized"`
	Data      GetStateRootOKData `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetStateRootOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetStateRootOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetStateRootOK) GetData() GetStateRootOKData {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetStateRootOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetStateRootOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetStateRootOK) SetData(val GetStateRootOKData) {
	s.Data = val
}

func (*GetStateRootOK) getStateRootRes() {}

type GetStateRootOKData struct {
	// HashTreeRoot of BeaconState object.
	Root string `json:"root"`
}

// GetRoot returns the value of Root.
func (s *GetStateRootOKData) GetRoot() string {
	return s.Root
}

// SetRoot sets the value of Root.
func (s *GetStateRootOKData) SetRoot(val string) {
	s.Root = val
}

type GetStateV2BadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateV2BadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateV2BadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateV2BadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateV2BadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateV2BadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateV2BadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateV2BadRequest) getStateV2Res() {}

type GetStateV2InternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateV2InternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateV2InternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateV2InternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateV2InternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateV2InternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateV2InternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateV2InternalServerError) getStateV2Res() {}

type GetStateV2NotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateV2NotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateV2NotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateV2NotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateV2NotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateV2NotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateV2NotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateV2NotFound) getStateV2Res() {}

// SSZ serialized state bytes. Use Accept header to choose this response type.
type GetStateV2OKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetStateV2OKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetStateV2OKApplicationOctetStreamHeaders wraps GetStateV2OKApplicationOctetStream with response headers.
type GetStateV2OKApplicationOctetStreamHeaders struct {
	EthConsensusVersion GetStateV2OKEthConsensusVersion
	Response            GetStateV2OKApplicationOctetStream
}

// GetEthConsensusVersion returns the value of EthConsensusVersion.
func (s *GetStateV2OKApplicationOctetStreamHeaders) GetEthConsensusVersion() GetStateV2OKEthConsensusVersion {
	return s.EthConsensusVersion
}

// GetResponse returns the value of Response.
func (s *GetStateV2OKApplicationOctetStreamHeaders) GetResponse() GetStateV2OKApplicationOctetStream {
	return s.Response
}

// SetEthConsensusVersion sets the value of EthConsensusVersion.
func (s *GetStateV2OKApplicationOctetStreamHeaders) SetEthConsensusVersion(val GetStateV2OKEthConsensusVersion) {
	s.EthConsensusVersion = val
}

// SetResponse sets the value of Response.
func (s *GetStateV2OKApplicationOctetStreamHeaders) SetResponse(val GetStateV2OKApplicationOctetStream) {
	s.Response = val
}

func (*GetStateV2OKApplicationOctetStreamHeaders) getStateV2Res() {}

type GetStateV2OKEthConsensusVersion string

const (
	GetStateV2OKEthConsensusVersionPhase0    GetStateV2OKEthConsensusVersion = "phase0"
	GetStateV2OKEthConsensusVersionAltair    GetStateV2OKEthConsensusVersion = "altair"
	GetStateV2OKEthConsensusVersionBellatrix GetStateV2OKEthConsensusVersion = "bellatrix"
	GetStateV2OKEthConsensusVersionCapella   GetStateV2OKEthConsensusVersion = "capella"
	GetStateV2OKEthConsensusVersionDeneb     GetStateV2OKEthConsensusVersion = "deneb"
)

// AllValues returns all GetStateV2OKEthConsensusVersion values.
func (GetStateV2OKEthConsensusVersion) AllValues() []GetStateV2OKEthConsensusVersion {
	return []GetStateV2OKEthConsensusVersion{
		GetStateV2OKEthConsensusVersionPhase0,
		GetStateV2OKEthConsensusVersionAltair,
		GetStateV2OKEthConsensusVersionBellatrix,
		GetStateV2OKEthConsensusVersionCapella,
		GetStateV2OKEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetStateV2OKEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case GetStateV2OKEthConsensusVersionPhase0:
		return []byte(s), nil
	case GetStateV2OKEthConsensusVersionAltair:
		return []byte(s), nil
	case GetStateV2OKEthConsensusVersionBellatrix:
		return []byte(s), nil
	case GetStateV2OKEthConsensusVersionCapella:
		return []byte(s), nil
	case GetStateV2OKEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetStateV2OKEthConsensusVersion) UnmarshalText(data []byte) error {
	switch GetStateV2OKEthConsensusVersion(data) {
	case GetStateV2OKEthConsensusVersionPhase0:
		*s = GetStateV2OKEthConsensusVersionPhase0
		return nil
	case GetStateV2OKEthConsensusVersionAltair:
		*s = GetStateV2OKEthConsensusVersionAltair
		return nil
	case GetStateV2OKEthConsensusVersionBellatrix:
		*s = GetStateV2OKEthConsensusVersionBellatrix
		return nil
	case GetStateV2OKEthConsensusVersionCapella:
		*s = GetStateV2OKEthConsensusVersionCapella
		return nil
	case GetStateV2OKEthConsensusVersionDeneb:
		*s = GetStateV2OKEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetStateValidatorBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorBadRequest) getStateValidatorRes() {}

type GetStateValidatorBalancesBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorBalancesBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorBalancesBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorBalancesBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorBalancesBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorBalancesBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorBalancesBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorBalancesBadRequest) getStateValidatorBalancesRes() {}

type GetStateValidatorBalancesInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorBalancesInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorBalancesInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorBalancesInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorBalancesInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorBalancesInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorBalancesInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorBalancesInternalServerError) getStateValidatorBalancesRes() {}

type GetStateValidatorBalancesNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorBalancesNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorBalancesNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorBalancesNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorBalancesNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorBalancesNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorBalancesNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorBalancesNotFound) getStateValidatorBalancesRes() {}

type GetStateValidatorBalancesOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                                  `json:"finalized"`
	Data      []GetStateValidatorBalancesOKDataItem `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetStateValidatorBalancesOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetStateValidatorBalancesOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetStateValidatorBalancesOK) GetData() []GetStateValidatorBalancesOKDataItem {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetStateValidatorBalancesOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetStateValidatorBalancesOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetStateValidatorBalancesOK) SetData(val []GetStateValidatorBalancesOKDataItem) {
	s.Data = val
}

func (*GetStateValidatorBalancesOK) getStateValidatorBalancesRes() {}

type GetStateValidatorBalancesOKDataItem struct {
	// Index of validator in validator registry.
	Index string `json:"index"`
	// Current validator balance in gwei.
	Balance string `json:"balance"`
}

// GetIndex returns the value of Index.
func (s *GetStateValidatorBalancesOKDataItem) GetIndex() string {
	return s.Index
}

// GetBalance returns the value of Balance.
func (s *GetStateValidatorBalancesOKDataItem) GetBalance() string {
	return s.Balance
}

// SetIndex sets the value of Index.
func (s *GetStateValidatorBalancesOKDataItem) SetIndex(val string) {
	s.Index = val
}

// SetBalance sets the value of Balance.
func (s *GetStateValidatorBalancesOKDataItem) SetBalance(val string) {
	s.Balance = val
}

type GetStateValidatorBalancesRequestURITooLong struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorBalancesRequestURITooLong) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorBalancesRequestURITooLong) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorBalancesRequestURITooLong) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorBalancesRequestURITooLong) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorBalancesRequestURITooLong) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorBalancesRequestURITooLong) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorBalancesRequestURITooLong) getStateValidatorBalancesRes() {}

type GetStateValidatorInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorInternalServerError) getStateValidatorRes() {}

type GetStateValidatorNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorNotFound) getStateValidatorRes() {}

type GetStateValidatorOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                    `json:"finalized"`
	Data      GetStateValidatorOKData `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetStateValidatorOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetStateValidatorOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetStateValidatorOK) GetData() GetStateValidatorOKData {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetStateValidatorOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetStateValidatorOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetStateValidatorOK) SetData(val GetStateValidatorOKData) {
	s.Data = val
}

func (*GetStateValidatorOK) getStateValidatorRes() {}

type GetStateValidatorOKData struct {
	// Index of validator in validator registry.
	Index string `json:"index"`
	// Current validator balance in gwei.
	Balance string `json:"balance"`
	// Possible statuses:
	// - **pending_initialized** - When the first deposit is processed, but not enough funds are
	// available (or not yet the end of the first epoch) to get validator into the activation queue.
	// - **pending_queued** - When validator is waiting to get activated, and have enough funds etc.
	// while in the queue, validator activation epoch keeps changing until it gets to the front and make
	// it through (finalization is a requirement here too).
	// - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
	// - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
	// - **active_slashed** - When validator is still active, but have a slashed status and is scheduled
	// to exit.
	// - **exited_unslashed** - When validator has reached regular exit epoch, not being slashed, and
	// doesn't have to attest any more, but cannot withdraw yet.
	// - **exited_slashed** - When validator has reached regular exit epoch, but was slashed, have to
	// wait for a longer withdrawal period.
	// - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds,
	// and is truly out of the system.
	// - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having
	// moved funds away
	// [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ).
	Status    jx.Raw                           `json:"status"`
	Validator GetStateValidatorOKDataValidator `json:"validator"`
}

// GetIndex returns the value of Index.
func (s *GetStateValidatorOKData) GetIndex() string {
	return s.Index
}

// GetBalance returns the value of Balance.
func (s *GetStateValidatorOKData) GetBalance() string {
	return s.Balance
}

// GetStatus returns the value of Status.
func (s *GetStateValidatorOKData) GetStatus() jx.Raw {
	return s.Status
}

// GetValidator returns the value of Validator.
func (s *GetStateValidatorOKData) GetValidator() GetStateValidatorOKDataValidator {
	return s.Validator
}

// SetIndex sets the value of Index.
func (s *GetStateValidatorOKData) SetIndex(val string) {
	s.Index = val
}

// SetBalance sets the value of Balance.
func (s *GetStateValidatorOKData) SetBalance(val string) {
	s.Balance = val
}

// SetStatus sets the value of Status.
func (s *GetStateValidatorOKData) SetStatus(val jx.Raw) {
	s.Status = val
}

// SetValidator sets the value of Validator.
func (s *GetStateValidatorOKData) SetValidator(val GetStateValidatorOKDataValidator) {
	s.Validator = val
}

type GetStateValidatorOKDataValidator struct {
	// The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix,
	// case insensitive._.
	Pubkey string `json:"pubkey"`
	// Root of withdrawal credentials.
	WithdrawalCredentials string `json:"withdrawal_credentials"`
	// Balance at stake in Gwei.
	EffectiveBalance string `json:"effective_balance"`
	// Was validator slashed (not longer active).
	Slashed bool `json:"slashed"`
	// When criteria for activation were met.
	ActivationEligibilityEpoch string `json:"activation_eligibility_epoch"`
	// Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated.
	ActivationEpoch string `json:"activation_epoch"`
	// Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
	ExitEpoch string `json:"exit_epoch"`
	// When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined.
	WithdrawableEpoch string `json:"withdrawable_epoch"`
}

// GetPubkey returns the value of Pubkey.
func (s *GetStateValidatorOKDataValidator) GetPubkey() string {
	return s.Pubkey
}

// GetWithdrawalCredentials returns the value of WithdrawalCredentials.
func (s *GetStateValidatorOKDataValidator) GetWithdrawalCredentials() string {
	return s.WithdrawalCredentials
}

// GetEffectiveBalance returns the value of EffectiveBalance.
func (s *GetStateValidatorOKDataValidator) GetEffectiveBalance() string {
	return s.EffectiveBalance
}

// GetSlashed returns the value of Slashed.
func (s *GetStateValidatorOKDataValidator) GetSlashed() bool {
	return s.Slashed
}

// GetActivationEligibilityEpoch returns the value of ActivationEligibilityEpoch.
func (s *GetStateValidatorOKDataValidator) GetActivationEligibilityEpoch() string {
	return s.ActivationEligibilityEpoch
}

// GetActivationEpoch returns the value of ActivationEpoch.
func (s *GetStateValidatorOKDataValidator) GetActivationEpoch() string {
	return s.ActivationEpoch
}

// GetExitEpoch returns the value of ExitEpoch.
func (s *GetStateValidatorOKDataValidator) GetExitEpoch() string {
	return s.ExitEpoch
}

// GetWithdrawableEpoch returns the value of WithdrawableEpoch.
func (s *GetStateValidatorOKDataValidator) GetWithdrawableEpoch() string {
	return s.WithdrawableEpoch
}

// SetPubkey sets the value of Pubkey.
func (s *GetStateValidatorOKDataValidator) SetPubkey(val string) {
	s.Pubkey = val
}

// SetWithdrawalCredentials sets the value of WithdrawalCredentials.
func (s *GetStateValidatorOKDataValidator) SetWithdrawalCredentials(val string) {
	s.WithdrawalCredentials = val
}

// SetEffectiveBalance sets the value of EffectiveBalance.
func (s *GetStateValidatorOKDataValidator) SetEffectiveBalance(val string) {
	s.EffectiveBalance = val
}

// SetSlashed sets the value of Slashed.
func (s *GetStateValidatorOKDataValidator) SetSlashed(val bool) {
	s.Slashed = val
}

// SetActivationEligibilityEpoch sets the value of ActivationEligibilityEpoch.
func (s *GetStateValidatorOKDataValidator) SetActivationEligibilityEpoch(val string) {
	s.ActivationEligibilityEpoch = val
}

// SetActivationEpoch sets the value of ActivationEpoch.
func (s *GetStateValidatorOKDataValidator) SetActivationEpoch(val string) {
	s.ActivationEpoch = val
}

// SetExitEpoch sets the value of ExitEpoch.
func (s *GetStateValidatorOKDataValidator) SetExitEpoch(val string) {
	s.ExitEpoch = val
}

// SetWithdrawableEpoch sets the value of WithdrawableEpoch.
func (s *GetStateValidatorOKDataValidator) SetWithdrawableEpoch(val string) {
	s.WithdrawableEpoch = val
}

type GetStateValidatorsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorsBadRequest) getStateValidatorsRes() {}

type GetStateValidatorsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorsInternalServerError) getStateValidatorsRes() {}

type GetStateValidatorsNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorsNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorsNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorsNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorsNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorsNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorsNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorsNotFound) getStateValidatorsRes() {}

type GetStateValidatorsOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                           `json:"finalized"`
	Data      []GetStateValidatorsOKDataItem `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetStateValidatorsOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetStateValidatorsOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetStateValidatorsOK) GetData() []GetStateValidatorsOKDataItem {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetStateValidatorsOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetStateValidatorsOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetStateValidatorsOK) SetData(val []GetStateValidatorsOKDataItem) {
	s.Data = val
}

func (*GetStateValidatorsOK) getStateValidatorsRes() {}

type GetStateValidatorsOKDataItem struct {
	// Index of validator in validator registry.
	Index string `json:"index"`
	// Current validator balance in gwei.
	Balance string `json:"balance"`
	// Possible statuses:
	// - **pending_initialized** - When the first deposit is processed, but not enough funds are
	// available (or not yet the end of the first epoch) to get validator into the activation queue.
	// - **pending_queued** - When validator is waiting to get activated, and have enough funds etc.
	// while in the queue, validator activation epoch keeps changing until it gets to the front and make
	// it through (finalization is a requirement here too).
	// - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
	// - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
	// - **active_slashed** - When validator is still active, but have a slashed status and is scheduled
	// to exit.
	// - **exited_unslashed** - When validator has reached regular exit epoch, not being slashed, and
	// doesn't have to attest any more, but cannot withdraw yet.
	// - **exited_slashed** - When validator has reached regular exit epoch, but was slashed, have to
	// wait for a longer withdrawal period.
	// - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds,
	// and is truly out of the system.
	// - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having
	// moved funds away
	// [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ).
	Status    jx.Raw                                `json:"status"`
	Validator GetStateValidatorsOKDataItemValidator `json:"validator"`
}

// GetIndex returns the value of Index.
func (s *GetStateValidatorsOKDataItem) GetIndex() string {
	return s.Index
}

// GetBalance returns the value of Balance.
func (s *GetStateValidatorsOKDataItem) GetBalance() string {
	return s.Balance
}

// GetStatus returns the value of Status.
func (s *GetStateValidatorsOKDataItem) GetStatus() jx.Raw {
	return s.Status
}

// GetValidator returns the value of Validator.
func (s *GetStateValidatorsOKDataItem) GetValidator() GetStateValidatorsOKDataItemValidator {
	return s.Validator
}

// SetIndex sets the value of Index.
func (s *GetStateValidatorsOKDataItem) SetIndex(val string) {
	s.Index = val
}

// SetBalance sets the value of Balance.
func (s *GetStateValidatorsOKDataItem) SetBalance(val string) {
	s.Balance = val
}

// SetStatus sets the value of Status.
func (s *GetStateValidatorsOKDataItem) SetStatus(val jx.Raw) {
	s.Status = val
}

// SetValidator sets the value of Validator.
func (s *GetStateValidatorsOKDataItem) SetValidator(val GetStateValidatorsOKDataItemValidator) {
	s.Validator = val
}

type GetStateValidatorsOKDataItemValidator struct {
	// The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix,
	// case insensitive._.
	Pubkey string `json:"pubkey"`
	// Root of withdrawal credentials.
	WithdrawalCredentials string `json:"withdrawal_credentials"`
	// Balance at stake in Gwei.
	EffectiveBalance string `json:"effective_balance"`
	// Was validator slashed (not longer active).
	Slashed bool `json:"slashed"`
	// When criteria for activation were met.
	ActivationEligibilityEpoch string `json:"activation_eligibility_epoch"`
	// Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated.
	ActivationEpoch string `json:"activation_epoch"`
	// Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
	ExitEpoch string `json:"exit_epoch"`
	// When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined.
	WithdrawableEpoch string `json:"withdrawable_epoch"`
}

// GetPubkey returns the value of Pubkey.
func (s *GetStateValidatorsOKDataItemValidator) GetPubkey() string {
	return s.Pubkey
}

// GetWithdrawalCredentials returns the value of WithdrawalCredentials.
func (s *GetStateValidatorsOKDataItemValidator) GetWithdrawalCredentials() string {
	return s.WithdrawalCredentials
}

// GetEffectiveBalance returns the value of EffectiveBalance.
func (s *GetStateValidatorsOKDataItemValidator) GetEffectiveBalance() string {
	return s.EffectiveBalance
}

// GetSlashed returns the value of Slashed.
func (s *GetStateValidatorsOKDataItemValidator) GetSlashed() bool {
	return s.Slashed
}

// GetActivationEligibilityEpoch returns the value of ActivationEligibilityEpoch.
func (s *GetStateValidatorsOKDataItemValidator) GetActivationEligibilityEpoch() string {
	return s.ActivationEligibilityEpoch
}

// GetActivationEpoch returns the value of ActivationEpoch.
func (s *GetStateValidatorsOKDataItemValidator) GetActivationEpoch() string {
	return s.ActivationEpoch
}

// GetExitEpoch returns the value of ExitEpoch.
func (s *GetStateValidatorsOKDataItemValidator) GetExitEpoch() string {
	return s.ExitEpoch
}

// GetWithdrawableEpoch returns the value of WithdrawableEpoch.
func (s *GetStateValidatorsOKDataItemValidator) GetWithdrawableEpoch() string {
	return s.WithdrawableEpoch
}

// SetPubkey sets the value of Pubkey.
func (s *GetStateValidatorsOKDataItemValidator) SetPubkey(val string) {
	s.Pubkey = val
}

// SetWithdrawalCredentials sets the value of WithdrawalCredentials.
func (s *GetStateValidatorsOKDataItemValidator) SetWithdrawalCredentials(val string) {
	s.WithdrawalCredentials = val
}

// SetEffectiveBalance sets the value of EffectiveBalance.
func (s *GetStateValidatorsOKDataItemValidator) SetEffectiveBalance(val string) {
	s.EffectiveBalance = val
}

// SetSlashed sets the value of Slashed.
func (s *GetStateValidatorsOKDataItemValidator) SetSlashed(val bool) {
	s.Slashed = val
}

// SetActivationEligibilityEpoch sets the value of ActivationEligibilityEpoch.
func (s *GetStateValidatorsOKDataItemValidator) SetActivationEligibilityEpoch(val string) {
	s.ActivationEligibilityEpoch = val
}

// SetActivationEpoch sets the value of ActivationEpoch.
func (s *GetStateValidatorsOKDataItemValidator) SetActivationEpoch(val string) {
	s.ActivationEpoch = val
}

// SetExitEpoch sets the value of ExitEpoch.
func (s *GetStateValidatorsOKDataItemValidator) SetExitEpoch(val string) {
	s.ExitEpoch = val
}

// SetWithdrawableEpoch sets the value of WithdrawableEpoch.
func (s *GetStateValidatorsOKDataItemValidator) SetWithdrawableEpoch(val string) {
	s.WithdrawableEpoch = val
}

type GetStateValidatorsRequestURITooLong struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetStateValidatorsRequestURITooLong) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetStateValidatorsRequestURITooLong) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetStateValidatorsRequestURITooLong) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetStateValidatorsRequestURITooLong) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetStateValidatorsRequestURITooLong) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetStateValidatorsRequestURITooLong) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetStateValidatorsRequestURITooLong) getStateValidatorsRes() {}

type GetSyncCommitteeDutiesBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetSyncCommitteeDutiesBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetSyncCommitteeDutiesBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetSyncCommitteeDutiesBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetSyncCommitteeDutiesBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetSyncCommitteeDutiesBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetSyncCommitteeDutiesBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetSyncCommitteeDutiesBadRequest) getSyncCommitteeDutiesRes() {}

type GetSyncCommitteeDutiesInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetSyncCommitteeDutiesInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetSyncCommitteeDutiesInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetSyncCommitteeDutiesInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetSyncCommitteeDutiesInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetSyncCommitteeDutiesInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetSyncCommitteeDutiesInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetSyncCommitteeDutiesInternalServerError) getSyncCommitteeDutiesRes() {}

type GetSyncCommitteeDutiesOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool                               `json:"execution_optimistic"`
	Data                []GetSyncCommitteeDutiesOKDataItem `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetSyncCommitteeDutiesOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetData returns the value of Data.
func (s *GetSyncCommitteeDutiesOK) GetData() []GetSyncCommitteeDutiesOKDataItem {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetSyncCommitteeDutiesOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetData sets the value of Data.
func (s *GetSyncCommitteeDutiesOK) SetData(val []GetSyncCommitteeDutiesOKDataItem) {
	s.Data = val
}

func (*GetSyncCommitteeDutiesOK) getSyncCommitteeDutiesRes() {}

type GetSyncCommitteeDutiesOKDataItem struct {
	// The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix,
	// case insensitive._.
	Pubkey string `json:"pubkey"`
	// Index of validator in validator registry.
	ValidatorIndex string `json:"validator_index"`
	// The indices of the validator in the sync committee.
	ValidatorSyncCommitteeIndices []string `json:"validator_sync_committee_indices"`
}

// GetPubkey returns the value of Pubkey.
func (s *GetSyncCommitteeDutiesOKDataItem) GetPubkey() string {
	return s.Pubkey
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *GetSyncCommitteeDutiesOKDataItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetValidatorSyncCommitteeIndices returns the value of ValidatorSyncCommitteeIndices.
func (s *GetSyncCommitteeDutiesOKDataItem) GetValidatorSyncCommitteeIndices() []string {
	return s.ValidatorSyncCommitteeIndices
}

// SetPubkey sets the value of Pubkey.
func (s *GetSyncCommitteeDutiesOKDataItem) SetPubkey(val string) {
	s.Pubkey = val
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *GetSyncCommitteeDutiesOKDataItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetValidatorSyncCommitteeIndices sets the value of ValidatorSyncCommitteeIndices.
func (s *GetSyncCommitteeDutiesOKDataItem) SetValidatorSyncCommitteeIndices(val []string) {
	s.ValidatorSyncCommitteeIndices = val
}

type GetSyncCommitteeDutiesServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetSyncCommitteeDutiesServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetSyncCommitteeDutiesServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetSyncCommitteeDutiesServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetSyncCommitteeDutiesServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetSyncCommitteeDutiesServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetSyncCommitteeDutiesServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetSyncCommitteeDutiesServiceUnavailable) getSyncCommitteeDutiesRes() {}

type GetSyncCommitteeRewardsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetSyncCommitteeRewardsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetSyncCommitteeRewardsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetSyncCommitteeRewardsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetSyncCommitteeRewardsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetSyncCommitteeRewardsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetSyncCommitteeRewardsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetSyncCommitteeRewardsBadRequest) getSyncCommitteeRewardsRes() {}

type GetSyncCommitteeRewardsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetSyncCommitteeRewardsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetSyncCommitteeRewardsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetSyncCommitteeRewardsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetSyncCommitteeRewardsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetSyncCommitteeRewardsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetSyncCommitteeRewardsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetSyncCommitteeRewardsInternalServerError) getSyncCommitteeRewardsRes() {}

type GetSyncCommitteeRewardsNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetSyncCommitteeRewardsNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetSyncCommitteeRewardsNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetSyncCommitteeRewardsNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetSyncCommitteeRewardsNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetSyncCommitteeRewardsNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetSyncCommitteeRewardsNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetSyncCommitteeRewardsNotFound) getSyncCommitteeRewardsRes() {}

type GetSyncCommitteeRewardsOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool `json:"finalized"`
	// Rewards info for sync committee members.
	Data []GetSyncCommitteeRewardsOKDataItem `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *GetSyncCommitteeRewardsOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *GetSyncCommitteeRewardsOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *GetSyncCommitteeRewardsOK) GetData() []GetSyncCommitteeRewardsOKDataItem {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *GetSyncCommitteeRewardsOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *GetSyncCommitteeRewardsOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *GetSyncCommitteeRewardsOK) SetData(val []GetSyncCommitteeRewardsOKDataItem) {
	s.Data = val
}

func (*GetSyncCommitteeRewardsOK) getSyncCommitteeRewardsRes() {}

// Rewards info for a single sync committee member.
type GetSyncCommitteeRewardsOKDataItem struct {
	// One entry for every validator participating in the sync committee.
	ValidatorIndex string `json:"validator_index"`
	// Sync committee reward in gwei for the validator.
	Reward string `json:"reward"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *GetSyncCommitteeRewardsOKDataItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetReward returns the value of Reward.
func (s *GetSyncCommitteeRewardsOKDataItem) GetReward() string {
	return s.Reward
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *GetSyncCommitteeRewardsOKDataItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetReward sets the value of Reward.
func (s *GetSyncCommitteeRewardsOKDataItem) SetReward(val string) {
	s.Reward = val
}

type GetSyncingStatusInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *GetSyncingStatusInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GetSyncingStatusInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *GetSyncingStatusInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *GetSyncingStatusInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GetSyncingStatusInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *GetSyncingStatusInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*GetSyncingStatusInternalServerError) getSyncingStatusRes() {}

type GetSyncingStatusOK struct {
	Data GetSyncingStatusOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetSyncingStatusOK) GetData() GetSyncingStatusOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetSyncingStatusOK) SetData(val GetSyncingStatusOKData) {
	s.Data = val
}

func (*GetSyncingStatusOK) getSyncingStatusRes() {}

type GetSyncingStatusOKData struct {
	// Head slot node is trying to reach.
	HeadSlot string `json:"head_slot"`
	// How many slots node needs to process to reach head. 0 if synced.
	SyncDistance string `json:"sync_distance"`
	// Set to true if the node is syncing, false if the node is synced.
	IsSyncing bool `json:"is_syncing"`
	// Set to true if the node is optimistically tracking head.
	IsOptimistic bool `json:"is_optimistic"`
	// Set to true if the execution client is offline.
	ElOffline bool `json:"el_offline"`
}

// GetHeadSlot returns the value of HeadSlot.
func (s *GetSyncingStatusOKData) GetHeadSlot() string {
	return s.HeadSlot
}

// GetSyncDistance returns the value of SyncDistance.
func (s *GetSyncingStatusOKData) GetSyncDistance() string {
	return s.SyncDistance
}

// GetIsSyncing returns the value of IsSyncing.
func (s *GetSyncingStatusOKData) GetIsSyncing() bool {
	return s.IsSyncing
}

// GetIsOptimistic returns the value of IsOptimistic.
func (s *GetSyncingStatusOKData) GetIsOptimistic() bool {
	return s.IsOptimistic
}

// GetElOffline returns the value of ElOffline.
func (s *GetSyncingStatusOKData) GetElOffline() bool {
	return s.ElOffline
}

// SetHeadSlot sets the value of HeadSlot.
func (s *GetSyncingStatusOKData) SetHeadSlot(val string) {
	s.HeadSlot = val
}

// SetSyncDistance sets the value of SyncDistance.
func (s *GetSyncingStatusOKData) SetSyncDistance(val string) {
	s.SyncDistance = val
}

// SetIsSyncing sets the value of IsSyncing.
func (s *GetSyncingStatusOKData) SetIsSyncing(val bool) {
	s.IsSyncing = val
}

// SetIsOptimistic sets the value of IsOptimistic.
func (s *GetSyncingStatusOKData) SetIsOptimistic(val bool) {
	s.IsOptimistic = val
}

// SetElOffline sets the value of ElOffline.
func (s *GetSyncingStatusOKData) SetElOffline(val bool) {
	s.ElOffline = val
}

// NewOptGetPoolAttesterSlashingsOKDataItemAttestation1Data returns new OptGetPoolAttesterSlashingsOKDataItemAttestation1Data with value set to v.
func NewOptGetPoolAttesterSlashingsOKDataItemAttestation1Data(v GetPoolAttesterSlashingsOKDataItemAttestation1Data) OptGetPoolAttesterSlashingsOKDataItemAttestation1Data {
	return OptGetPoolAttesterSlashingsOKDataItemAttestation1Data{
		Value: v,
		Set:   true,
	}
}

// OptGetPoolAttesterSlashingsOKDataItemAttestation1Data is optional GetPoolAttesterSlashingsOKDataItemAttestation1Data.
type OptGetPoolAttesterSlashingsOKDataItemAttestation1Data struct {
	Value GetPoolAttesterSlashingsOKDataItemAttestation1Data
	Set   bool
}

// IsSet returns true if OptGetPoolAttesterSlashingsOKDataItemAttestation1Data was set.
func (o OptGetPoolAttesterSlashingsOKDataItemAttestation1Data) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPoolAttesterSlashingsOKDataItemAttestation1Data) Reset() {
	var v GetPoolAttesterSlashingsOKDataItemAttestation1Data
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPoolAttesterSlashingsOKDataItemAttestation1Data) SetTo(v GetPoolAttesterSlashingsOKDataItemAttestation1Data) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPoolAttesterSlashingsOKDataItemAttestation1Data) Get() (v GetPoolAttesterSlashingsOKDataItemAttestation1Data, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPoolAttesterSlashingsOKDataItemAttestation1Data) Or(d GetPoolAttesterSlashingsOKDataItemAttestation1Data) GetPoolAttesterSlashingsOKDataItemAttestation1Data {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPoolAttesterSlashingsOKDataItemAttestation2Data returns new OptGetPoolAttesterSlashingsOKDataItemAttestation2Data with value set to v.
func NewOptGetPoolAttesterSlashingsOKDataItemAttestation2Data(v GetPoolAttesterSlashingsOKDataItemAttestation2Data) OptGetPoolAttesterSlashingsOKDataItemAttestation2Data {
	return OptGetPoolAttesterSlashingsOKDataItemAttestation2Data{
		Value: v,
		Set:   true,
	}
}

// OptGetPoolAttesterSlashingsOKDataItemAttestation2Data is optional GetPoolAttesterSlashingsOKDataItemAttestation2Data.
type OptGetPoolAttesterSlashingsOKDataItemAttestation2Data struct {
	Value GetPoolAttesterSlashingsOKDataItemAttestation2Data
	Set   bool
}

// IsSet returns true if OptGetPoolAttesterSlashingsOKDataItemAttestation2Data was set.
func (o OptGetPoolAttesterSlashingsOKDataItemAttestation2Data) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPoolAttesterSlashingsOKDataItemAttestation2Data) Reset() {
	var v GetPoolAttesterSlashingsOKDataItemAttestation2Data
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPoolAttesterSlashingsOKDataItemAttestation2Data) SetTo(v GetPoolAttesterSlashingsOKDataItemAttestation2Data) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPoolAttesterSlashingsOKDataItemAttestation2Data) Get() (v GetPoolAttesterSlashingsOKDataItemAttestation2Data, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPoolAttesterSlashingsOKDataItemAttestation2Data) Or(d GetPoolAttesterSlashingsOKDataItemAttestation2Data) GetPoolAttesterSlashingsOKDataItemAttestation2Data {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublishBlindedBlockEthConsensusVersion returns new OptPublishBlindedBlockEthConsensusVersion with value set to v.
func NewOptPublishBlindedBlockEthConsensusVersion(v PublishBlindedBlockEthConsensusVersion) OptPublishBlindedBlockEthConsensusVersion {
	return OptPublishBlindedBlockEthConsensusVersion{
		Value: v,
		Set:   true,
	}
}

// OptPublishBlindedBlockEthConsensusVersion is optional PublishBlindedBlockEthConsensusVersion.
type OptPublishBlindedBlockEthConsensusVersion struct {
	Value PublishBlindedBlockEthConsensusVersion
	Set   bool
}

// IsSet returns true if OptPublishBlindedBlockEthConsensusVersion was set.
func (o OptPublishBlindedBlockEthConsensusVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublishBlindedBlockEthConsensusVersion) Reset() {
	var v PublishBlindedBlockEthConsensusVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublishBlindedBlockEthConsensusVersion) SetTo(v PublishBlindedBlockEthConsensusVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublishBlindedBlockEthConsensusVersion) Get() (v PublishBlindedBlockEthConsensusVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublishBlindedBlockEthConsensusVersion) Or(d PublishBlindedBlockEthConsensusVersion) PublishBlindedBlockEthConsensusVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublishBlindedBlockV2BroadcastValidation returns new OptPublishBlindedBlockV2BroadcastValidation with value set to v.
func NewOptPublishBlindedBlockV2BroadcastValidation(v PublishBlindedBlockV2BroadcastValidation) OptPublishBlindedBlockV2BroadcastValidation {
	return OptPublishBlindedBlockV2BroadcastValidation{
		Value: v,
		Set:   true,
	}
}

// OptPublishBlindedBlockV2BroadcastValidation is optional PublishBlindedBlockV2BroadcastValidation.
type OptPublishBlindedBlockV2BroadcastValidation struct {
	Value PublishBlindedBlockV2BroadcastValidation
	Set   bool
}

// IsSet returns true if OptPublishBlindedBlockV2BroadcastValidation was set.
func (o OptPublishBlindedBlockV2BroadcastValidation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublishBlindedBlockV2BroadcastValidation) Reset() {
	var v PublishBlindedBlockV2BroadcastValidation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublishBlindedBlockV2BroadcastValidation) SetTo(v PublishBlindedBlockV2BroadcastValidation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublishBlindedBlockV2BroadcastValidation) Get() (v PublishBlindedBlockV2BroadcastValidation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublishBlindedBlockV2BroadcastValidation) Or(d PublishBlindedBlockV2BroadcastValidation) PublishBlindedBlockV2BroadcastValidation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublishBlockEthConsensusVersion returns new OptPublishBlockEthConsensusVersion with value set to v.
func NewOptPublishBlockEthConsensusVersion(v PublishBlockEthConsensusVersion) OptPublishBlockEthConsensusVersion {
	return OptPublishBlockEthConsensusVersion{
		Value: v,
		Set:   true,
	}
}

// OptPublishBlockEthConsensusVersion is optional PublishBlockEthConsensusVersion.
type OptPublishBlockEthConsensusVersion struct {
	Value PublishBlockEthConsensusVersion
	Set   bool
}

// IsSet returns true if OptPublishBlockEthConsensusVersion was set.
func (o OptPublishBlockEthConsensusVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublishBlockEthConsensusVersion) Reset() {
	var v PublishBlockEthConsensusVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublishBlockEthConsensusVersion) SetTo(v PublishBlockEthConsensusVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublishBlockEthConsensusVersion) Get() (v PublishBlockEthConsensusVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublishBlockEthConsensusVersion) Or(d PublishBlockEthConsensusVersion) PublishBlockEthConsensusVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublishBlockV2BroadcastValidation returns new OptPublishBlockV2BroadcastValidation with value set to v.
func NewOptPublishBlockV2BroadcastValidation(v PublishBlockV2BroadcastValidation) OptPublishBlockV2BroadcastValidation {
	return OptPublishBlockV2BroadcastValidation{
		Value: v,
		Set:   true,
	}
}

// OptPublishBlockV2BroadcastValidation is optional PublishBlockV2BroadcastValidation.
type OptPublishBlockV2BroadcastValidation struct {
	Value PublishBlockV2BroadcastValidation
	Set   bool
}

// IsSet returns true if OptPublishBlockV2BroadcastValidation was set.
func (o OptPublishBlockV2BroadcastValidation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublishBlockV2BroadcastValidation) Reset() {
	var v PublishBlockV2BroadcastValidation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublishBlockV2BroadcastValidation) SetTo(v PublishBlockV2BroadcastValidation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublishBlockV2BroadcastValidation) Get() (v PublishBlockV2BroadcastValidation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublishBlockV2BroadcastValidation) Or(d PublishBlockV2BroadcastValidation) PublishBlockV2BroadcastValidation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubmitPoolAttesterSlashingsReqAttestation1Data returns new OptSubmitPoolAttesterSlashingsReqAttestation1Data with value set to v.
func NewOptSubmitPoolAttesterSlashingsReqAttestation1Data(v SubmitPoolAttesterSlashingsReqAttestation1Data) OptSubmitPoolAttesterSlashingsReqAttestation1Data {
	return OptSubmitPoolAttesterSlashingsReqAttestation1Data{
		Value: v,
		Set:   true,
	}
}

// OptSubmitPoolAttesterSlashingsReqAttestation1Data is optional SubmitPoolAttesterSlashingsReqAttestation1Data.
type OptSubmitPoolAttesterSlashingsReqAttestation1Data struct {
	Value SubmitPoolAttesterSlashingsReqAttestation1Data
	Set   bool
}

// IsSet returns true if OptSubmitPoolAttesterSlashingsReqAttestation1Data was set.
func (o OptSubmitPoolAttesterSlashingsReqAttestation1Data) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubmitPoolAttesterSlashingsReqAttestation1Data) Reset() {
	var v SubmitPoolAttesterSlashingsReqAttestation1Data
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubmitPoolAttesterSlashingsReqAttestation1Data) SetTo(v SubmitPoolAttesterSlashingsReqAttestation1Data) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubmitPoolAttesterSlashingsReqAttestation1Data) Get() (v SubmitPoolAttesterSlashingsReqAttestation1Data, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubmitPoolAttesterSlashingsReqAttestation1Data) Or(d SubmitPoolAttesterSlashingsReqAttestation1Data) SubmitPoolAttesterSlashingsReqAttestation1Data {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubmitPoolAttesterSlashingsReqAttestation2Data returns new OptSubmitPoolAttesterSlashingsReqAttestation2Data with value set to v.
func NewOptSubmitPoolAttesterSlashingsReqAttestation2Data(v SubmitPoolAttesterSlashingsReqAttestation2Data) OptSubmitPoolAttesterSlashingsReqAttestation2Data {
	return OptSubmitPoolAttesterSlashingsReqAttestation2Data{
		Value: v,
		Set:   true,
	}
}

// OptSubmitPoolAttesterSlashingsReqAttestation2Data is optional SubmitPoolAttesterSlashingsReqAttestation2Data.
type OptSubmitPoolAttesterSlashingsReqAttestation2Data struct {
	Value SubmitPoolAttesterSlashingsReqAttestation2Data
	Set   bool
}

// IsSet returns true if OptSubmitPoolAttesterSlashingsReqAttestation2Data was set.
func (o OptSubmitPoolAttesterSlashingsReqAttestation2Data) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubmitPoolAttesterSlashingsReqAttestation2Data) Reset() {
	var v SubmitPoolAttesterSlashingsReqAttestation2Data
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubmitPoolAttesterSlashingsReqAttestation2Data) SetTo(v SubmitPoolAttesterSlashingsReqAttestation2Data) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubmitPoolAttesterSlashingsReqAttestation2Data) Get() (v SubmitPoolAttesterSlashingsReqAttestation2Data, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubmitPoolAttesterSlashingsReqAttestation2Data) Or(d SubmitPoolAttesterSlashingsReqAttestation2Data) SubmitPoolAttesterSlashingsReqAttestation2Data {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PostStateValidatorBalancesBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PostStateValidatorBalancesBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PostStateValidatorBalancesBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PostStateValidatorBalancesBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PostStateValidatorBalancesBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PostStateValidatorBalancesBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PostStateValidatorBalancesBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PostStateValidatorBalancesBadRequest) postStateValidatorBalancesRes() {}

type PostStateValidatorBalancesInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PostStateValidatorBalancesInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PostStateValidatorBalancesInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PostStateValidatorBalancesInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PostStateValidatorBalancesInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PostStateValidatorBalancesInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PostStateValidatorBalancesInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PostStateValidatorBalancesInternalServerError) postStateValidatorBalancesRes() {}

type PostStateValidatorBalancesNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PostStateValidatorBalancesNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PostStateValidatorBalancesNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PostStateValidatorBalancesNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PostStateValidatorBalancesNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PostStateValidatorBalancesNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PostStateValidatorBalancesNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PostStateValidatorBalancesNotFound) postStateValidatorBalancesRes() {}

type PostStateValidatorBalancesOK struct {
	// True if the response references an unverified execution payload. Optimistic information may be
	// invalidated at a later time. If the field is not present, assume the False value.
	ExecutionOptimistic bool `json:"execution_optimistic"`
	// True if the response references the finalized history of the chain, as determined by fork choice.
	// If the field is not present, additional calls are necessary to compare the epoch of the requested
	// information with the finalized checkpoint.
	Finalized bool                                   `json:"finalized"`
	Data      []PostStateValidatorBalancesOKDataItem `json:"data"`
}

// GetExecutionOptimistic returns the value of ExecutionOptimistic.
func (s *PostStateValidatorBalancesOK) GetExecutionOptimistic() bool {
	return s.ExecutionOptimistic
}

// GetFinalized returns the value of Finalized.
func (s *PostStateValidatorBalancesOK) GetFinalized() bool {
	return s.Finalized
}

// GetData returns the value of Data.
func (s *PostStateValidatorBalancesOK) GetData() []PostStateValidatorBalancesOKDataItem {
	return s.Data
}

// SetExecutionOptimistic sets the value of ExecutionOptimistic.
func (s *PostStateValidatorBalancesOK) SetExecutionOptimistic(val bool) {
	s.ExecutionOptimistic = val
}

// SetFinalized sets the value of Finalized.
func (s *PostStateValidatorBalancesOK) SetFinalized(val bool) {
	s.Finalized = val
}

// SetData sets the value of Data.
func (s *PostStateValidatorBalancesOK) SetData(val []PostStateValidatorBalancesOKDataItem) {
	s.Data = val
}

func (*PostStateValidatorBalancesOK) postStateValidatorBalancesRes() {}

type PostStateValidatorBalancesOKDataItem struct {
	// Index of validator in validator registry.
	Index string `json:"index"`
	// Current validator balance in gwei.
	Balance string `json:"balance"`
}

// GetIndex returns the value of Index.
func (s *PostStateValidatorBalancesOKDataItem) GetIndex() string {
	return s.Index
}

// GetBalance returns the value of Balance.
func (s *PostStateValidatorBalancesOKDataItem) GetBalance() string {
	return s.Balance
}

// SetIndex sets the value of Index.
func (s *PostStateValidatorBalancesOKDataItem) SetIndex(val string) {
	s.Index = val
}

// SetBalance sets the value of Balance.
func (s *PostStateValidatorBalancesOKDataItem) SetBalance(val string) {
	s.Balance = val
}

type PrepareBeaconCommitteeSubnetBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PrepareBeaconCommitteeSubnetBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PrepareBeaconCommitteeSubnetBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PrepareBeaconCommitteeSubnetBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PrepareBeaconCommitteeSubnetBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PrepareBeaconCommitteeSubnetBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PrepareBeaconCommitteeSubnetBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PrepareBeaconCommitteeSubnetBadRequest) prepareBeaconCommitteeSubnetRes() {}

type PrepareBeaconCommitteeSubnetInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PrepareBeaconCommitteeSubnetInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PrepareBeaconCommitteeSubnetInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PrepareBeaconCommitteeSubnetInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PrepareBeaconCommitteeSubnetInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PrepareBeaconCommitteeSubnetInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PrepareBeaconCommitteeSubnetInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PrepareBeaconCommitteeSubnetInternalServerError) prepareBeaconCommitteeSubnetRes() {}

// PrepareBeaconCommitteeSubnetOK is response for PrepareBeaconCommitteeSubnet operation.
type PrepareBeaconCommitteeSubnetOK struct{}

func (*PrepareBeaconCommitteeSubnetOK) prepareBeaconCommitteeSubnetRes() {}

type PrepareBeaconCommitteeSubnetReqItem struct {
	ValidatorIndex string `json:"validator_index"`
	CommitteeIndex string `json:"committee_index"`
	// Number of committees at the returned slot.
	CommitteesAtSlot string `json:"committees_at_slot"`
	// Should be slot at which validator is assigned to attest.
	Slot string `json:"slot"`
	// Signals to BN that a validator on the VC has been chosen for aggregator role.
	IsAggregator bool `json:"is_aggregator"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *PrepareBeaconCommitteeSubnetReqItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetCommitteeIndex returns the value of CommitteeIndex.
func (s *PrepareBeaconCommitteeSubnetReqItem) GetCommitteeIndex() string {
	return s.CommitteeIndex
}

// GetCommitteesAtSlot returns the value of CommitteesAtSlot.
func (s *PrepareBeaconCommitteeSubnetReqItem) GetCommitteesAtSlot() string {
	return s.CommitteesAtSlot
}

// GetSlot returns the value of Slot.
func (s *PrepareBeaconCommitteeSubnetReqItem) GetSlot() string {
	return s.Slot
}

// GetIsAggregator returns the value of IsAggregator.
func (s *PrepareBeaconCommitteeSubnetReqItem) GetIsAggregator() bool {
	return s.IsAggregator
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *PrepareBeaconCommitteeSubnetReqItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetCommitteeIndex sets the value of CommitteeIndex.
func (s *PrepareBeaconCommitteeSubnetReqItem) SetCommitteeIndex(val string) {
	s.CommitteeIndex = val
}

// SetCommitteesAtSlot sets the value of CommitteesAtSlot.
func (s *PrepareBeaconCommitteeSubnetReqItem) SetCommitteesAtSlot(val string) {
	s.CommitteesAtSlot = val
}

// SetSlot sets the value of Slot.
func (s *PrepareBeaconCommitteeSubnetReqItem) SetSlot(val string) {
	s.Slot = val
}

// SetIsAggregator sets the value of IsAggregator.
func (s *PrepareBeaconCommitteeSubnetReqItem) SetIsAggregator(val bool) {
	s.IsAggregator = val
}

type PrepareBeaconCommitteeSubnetServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PrepareBeaconCommitteeSubnetServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PrepareBeaconCommitteeSubnetServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PrepareBeaconCommitteeSubnetServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PrepareBeaconCommitteeSubnetServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PrepareBeaconCommitteeSubnetServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PrepareBeaconCommitteeSubnetServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PrepareBeaconCommitteeSubnetServiceUnavailable) prepareBeaconCommitteeSubnetRes() {}

type PrepareBeaconProposerBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PrepareBeaconProposerBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PrepareBeaconProposerBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PrepareBeaconProposerBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PrepareBeaconProposerBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PrepareBeaconProposerBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PrepareBeaconProposerBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PrepareBeaconProposerBadRequest) prepareBeaconProposerRes() {}

type PrepareBeaconProposerInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PrepareBeaconProposerInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PrepareBeaconProposerInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PrepareBeaconProposerInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PrepareBeaconProposerInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PrepareBeaconProposerInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PrepareBeaconProposerInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PrepareBeaconProposerInternalServerError) prepareBeaconProposerRes() {}

// PrepareBeaconProposerOK is response for PrepareBeaconProposer operation.
type PrepareBeaconProposerOK struct{}

func (*PrepareBeaconProposerOK) prepareBeaconProposerRes() {}

type PrepareBeaconProposerReqItem struct {
	ValidatorIndex string `json:"validator_index"`
	// An address on the execution (Ethereum 1) network.
	FeeRecipient string `json:"fee_recipient"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *PrepareBeaconProposerReqItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetFeeRecipient returns the value of FeeRecipient.
func (s *PrepareBeaconProposerReqItem) GetFeeRecipient() string {
	return s.FeeRecipient
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *PrepareBeaconProposerReqItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetFeeRecipient sets the value of FeeRecipient.
func (s *PrepareBeaconProposerReqItem) SetFeeRecipient(val string) {
	s.FeeRecipient = val
}

type PrepareSyncCommitteeSubnetsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PrepareSyncCommitteeSubnetsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PrepareSyncCommitteeSubnetsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PrepareSyncCommitteeSubnetsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PrepareSyncCommitteeSubnetsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PrepareSyncCommitteeSubnetsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PrepareSyncCommitteeSubnetsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PrepareSyncCommitteeSubnetsBadRequest) prepareSyncCommitteeSubnetsRes() {}

type PrepareSyncCommitteeSubnetsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PrepareSyncCommitteeSubnetsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PrepareSyncCommitteeSubnetsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PrepareSyncCommitteeSubnetsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PrepareSyncCommitteeSubnetsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PrepareSyncCommitteeSubnetsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PrepareSyncCommitteeSubnetsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PrepareSyncCommitteeSubnetsInternalServerError) prepareSyncCommitteeSubnetsRes() {}

// PrepareSyncCommitteeSubnetsOK is response for PrepareSyncCommitteeSubnets operation.
type PrepareSyncCommitteeSubnetsOK struct{}

func (*PrepareSyncCommitteeSubnetsOK) prepareSyncCommitteeSubnetsRes() {}

type PrepareSyncCommitteeSubnetsReqItem struct {
	ValidatorIndex       string   `json:"validator_index"`
	SyncCommitteeIndices []string `json:"sync_committee_indices"`
	// The final epoch (exclusive value) that the specified validator requires the subscription for.
	UntilEpoch string `json:"until_epoch"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *PrepareSyncCommitteeSubnetsReqItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetSyncCommitteeIndices returns the value of SyncCommitteeIndices.
func (s *PrepareSyncCommitteeSubnetsReqItem) GetSyncCommitteeIndices() []string {
	return s.SyncCommitteeIndices
}

// GetUntilEpoch returns the value of UntilEpoch.
func (s *PrepareSyncCommitteeSubnetsReqItem) GetUntilEpoch() string {
	return s.UntilEpoch
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *PrepareSyncCommitteeSubnetsReqItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetSyncCommitteeIndices sets the value of SyncCommitteeIndices.
func (s *PrepareSyncCommitteeSubnetsReqItem) SetSyncCommitteeIndices(val []string) {
	s.SyncCommitteeIndices = val
}

// SetUntilEpoch sets the value of UntilEpoch.
func (s *PrepareSyncCommitteeSubnetsReqItem) SetUntilEpoch(val string) {
	s.UntilEpoch = val
}

type ProduceAttestationDataBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceAttestationDataBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceAttestationDataBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceAttestationDataBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceAttestationDataBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceAttestationDataBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceAttestationDataBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceAttestationDataBadRequest) produceAttestationDataRes() {}

type ProduceAttestationDataInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceAttestationDataInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceAttestationDataInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceAttestationDataInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceAttestationDataInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceAttestationDataInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceAttestationDataInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceAttestationDataInternalServerError) produceAttestationDataRes() {}

type ProduceAttestationDataOK struct {
	// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
	Data ProduceAttestationDataOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *ProduceAttestationDataOK) GetData() ProduceAttestationDataOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ProduceAttestationDataOK) SetData(val ProduceAttestationDataOKData) {
	s.Data = val
}

func (*ProduceAttestationDataOK) produceAttestationDataRes() {}

// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
type ProduceAttestationDataOKData struct {
	Slot  string `json:"slot"`
	Index string `json:"index"`
	// LMD GHOST vote.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Source ProduceAttestationDataOKDataSource `json:"source"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Target ProduceAttestationDataOKDataTarget `json:"target"`
}

// GetSlot returns the value of Slot.
func (s *ProduceAttestationDataOKData) GetSlot() string {
	return s.Slot
}

// GetIndex returns the value of Index.
func (s *ProduceAttestationDataOKData) GetIndex() string {
	return s.Index
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *ProduceAttestationDataOKData) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSource returns the value of Source.
func (s *ProduceAttestationDataOKData) GetSource() ProduceAttestationDataOKDataSource {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *ProduceAttestationDataOKData) GetTarget() ProduceAttestationDataOKDataTarget {
	return s.Target
}

// SetSlot sets the value of Slot.
func (s *ProduceAttestationDataOKData) SetSlot(val string) {
	s.Slot = val
}

// SetIndex sets the value of Index.
func (s *ProduceAttestationDataOKData) SetIndex(val string) {
	s.Index = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *ProduceAttestationDataOKData) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSource sets the value of Source.
func (s *ProduceAttestationDataOKData) SetSource(val ProduceAttestationDataOKDataSource) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *ProduceAttestationDataOKData) SetTarget(val ProduceAttestationDataOKDataTarget) {
	s.Target = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type ProduceAttestationDataOKDataSource struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *ProduceAttestationDataOKDataSource) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *ProduceAttestationDataOKDataSource) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *ProduceAttestationDataOKDataSource) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *ProduceAttestationDataOKDataSource) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type ProduceAttestationDataOKDataTarget struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *ProduceAttestationDataOKDataTarget) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *ProduceAttestationDataOKDataTarget) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *ProduceAttestationDataOKDataTarget) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *ProduceAttestationDataOKDataTarget) SetRoot(val string) {
	s.Root = val
}

type ProduceAttestationDataServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceAttestationDataServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceAttestationDataServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceAttestationDataServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceAttestationDataServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceAttestationDataServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceAttestationDataServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceAttestationDataServiceUnavailable) produceAttestationDataRes() {}

type ProduceBlindedBlockBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceBlindedBlockBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceBlindedBlockBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceBlindedBlockBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceBlindedBlockBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceBlindedBlockBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceBlindedBlockBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceBlindedBlockBadRequest) produceBlindedBlockRes() {}

type ProduceBlindedBlockInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceBlindedBlockInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceBlindedBlockInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceBlindedBlockInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceBlindedBlockInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceBlindedBlockInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceBlindedBlockInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceBlindedBlockInternalServerError) produceBlindedBlockRes() {}

// SSZ serialized block bytes. Use Accept header to choose this response type, version string is sent
// in header `Eth-Consensus-Version`.
type ProduceBlindedBlockOKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ProduceBlindedBlockOKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ProduceBlindedBlockOKApplicationOctetStreamHeaders wraps ProduceBlindedBlockOKApplicationOctetStream with response headers.
type ProduceBlindedBlockOKApplicationOctetStreamHeaders struct {
	EthConsensusVersion ProduceBlindedBlockOKEthConsensusVersion
	Response            ProduceBlindedBlockOKApplicationOctetStream
}

// GetEthConsensusVersion returns the value of EthConsensusVersion.
func (s *ProduceBlindedBlockOKApplicationOctetStreamHeaders) GetEthConsensusVersion() ProduceBlindedBlockOKEthConsensusVersion {
	return s.EthConsensusVersion
}

// GetResponse returns the value of Response.
func (s *ProduceBlindedBlockOKApplicationOctetStreamHeaders) GetResponse() ProduceBlindedBlockOKApplicationOctetStream {
	return s.Response
}

// SetEthConsensusVersion sets the value of EthConsensusVersion.
func (s *ProduceBlindedBlockOKApplicationOctetStreamHeaders) SetEthConsensusVersion(val ProduceBlindedBlockOKEthConsensusVersion) {
	s.EthConsensusVersion = val
}

// SetResponse sets the value of Response.
func (s *ProduceBlindedBlockOKApplicationOctetStreamHeaders) SetResponse(val ProduceBlindedBlockOKApplicationOctetStream) {
	s.Response = val
}

func (*ProduceBlindedBlockOKApplicationOctetStreamHeaders) produceBlindedBlockRes() {}

type ProduceBlindedBlockOKEthConsensusVersion string

const (
	ProduceBlindedBlockOKEthConsensusVersionPhase0    ProduceBlindedBlockOKEthConsensusVersion = "phase0"
	ProduceBlindedBlockOKEthConsensusVersionAltair    ProduceBlindedBlockOKEthConsensusVersion = "altair"
	ProduceBlindedBlockOKEthConsensusVersionBellatrix ProduceBlindedBlockOKEthConsensusVersion = "bellatrix"
	ProduceBlindedBlockOKEthConsensusVersionCapella   ProduceBlindedBlockOKEthConsensusVersion = "capella"
	ProduceBlindedBlockOKEthConsensusVersionDeneb     ProduceBlindedBlockOKEthConsensusVersion = "deneb"
)

// AllValues returns all ProduceBlindedBlockOKEthConsensusVersion values.
func (ProduceBlindedBlockOKEthConsensusVersion) AllValues() []ProduceBlindedBlockOKEthConsensusVersion {
	return []ProduceBlindedBlockOKEthConsensusVersion{
		ProduceBlindedBlockOKEthConsensusVersionPhase0,
		ProduceBlindedBlockOKEthConsensusVersionAltair,
		ProduceBlindedBlockOKEthConsensusVersionBellatrix,
		ProduceBlindedBlockOKEthConsensusVersionCapella,
		ProduceBlindedBlockOKEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProduceBlindedBlockOKEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case ProduceBlindedBlockOKEthConsensusVersionPhase0:
		return []byte(s), nil
	case ProduceBlindedBlockOKEthConsensusVersionAltair:
		return []byte(s), nil
	case ProduceBlindedBlockOKEthConsensusVersionBellatrix:
		return []byte(s), nil
	case ProduceBlindedBlockOKEthConsensusVersionCapella:
		return []byte(s), nil
	case ProduceBlindedBlockOKEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProduceBlindedBlockOKEthConsensusVersion) UnmarshalText(data []byte) error {
	switch ProduceBlindedBlockOKEthConsensusVersion(data) {
	case ProduceBlindedBlockOKEthConsensusVersionPhase0:
		*s = ProduceBlindedBlockOKEthConsensusVersionPhase0
		return nil
	case ProduceBlindedBlockOKEthConsensusVersionAltair:
		*s = ProduceBlindedBlockOKEthConsensusVersionAltair
		return nil
	case ProduceBlindedBlockOKEthConsensusVersionBellatrix:
		*s = ProduceBlindedBlockOKEthConsensusVersionBellatrix
		return nil
	case ProduceBlindedBlockOKEthConsensusVersionCapella:
		*s = ProduceBlindedBlockOKEthConsensusVersionCapella
		return nil
	case ProduceBlindedBlockOKEthConsensusVersionDeneb:
		*s = ProduceBlindedBlockOKEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProduceBlindedBlockServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceBlindedBlockServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceBlindedBlockServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceBlindedBlockServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceBlindedBlockServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceBlindedBlockServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceBlindedBlockServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceBlindedBlockServiceUnavailable) produceBlindedBlockRes() {}

type ProduceBlockV2BadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceBlockV2BadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceBlockV2BadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceBlockV2BadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceBlockV2BadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceBlockV2BadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceBlockV2BadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceBlockV2BadRequest) produceBlockV2Res() {}

type ProduceBlockV2InternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceBlockV2InternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceBlockV2InternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceBlockV2InternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceBlockV2InternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceBlockV2InternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceBlockV2InternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceBlockV2InternalServerError) produceBlockV2Res() {}

// SSZ serialized block bytes. Use Accept header to choose this response type, version string is sent
// in header `Eth-Consensus-Version`.
type ProduceBlockV2OKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ProduceBlockV2OKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ProduceBlockV2OKApplicationOctetStreamHeaders wraps ProduceBlockV2OKApplicationOctetStream with response headers.
type ProduceBlockV2OKApplicationOctetStreamHeaders struct {
	EthConsensusVersion ProduceBlockV2OKEthConsensusVersion
	Response            ProduceBlockV2OKApplicationOctetStream
}

// GetEthConsensusVersion returns the value of EthConsensusVersion.
func (s *ProduceBlockV2OKApplicationOctetStreamHeaders) GetEthConsensusVersion() ProduceBlockV2OKEthConsensusVersion {
	return s.EthConsensusVersion
}

// GetResponse returns the value of Response.
func (s *ProduceBlockV2OKApplicationOctetStreamHeaders) GetResponse() ProduceBlockV2OKApplicationOctetStream {
	return s.Response
}

// SetEthConsensusVersion sets the value of EthConsensusVersion.
func (s *ProduceBlockV2OKApplicationOctetStreamHeaders) SetEthConsensusVersion(val ProduceBlockV2OKEthConsensusVersion) {
	s.EthConsensusVersion = val
}

// SetResponse sets the value of Response.
func (s *ProduceBlockV2OKApplicationOctetStreamHeaders) SetResponse(val ProduceBlockV2OKApplicationOctetStream) {
	s.Response = val
}

func (*ProduceBlockV2OKApplicationOctetStreamHeaders) produceBlockV2Res() {}

type ProduceBlockV2OKEthConsensusVersion string

const (
	ProduceBlockV2OKEthConsensusVersionPhase0    ProduceBlockV2OKEthConsensusVersion = "phase0"
	ProduceBlockV2OKEthConsensusVersionAltair    ProduceBlockV2OKEthConsensusVersion = "altair"
	ProduceBlockV2OKEthConsensusVersionBellatrix ProduceBlockV2OKEthConsensusVersion = "bellatrix"
	ProduceBlockV2OKEthConsensusVersionCapella   ProduceBlockV2OKEthConsensusVersion = "capella"
	ProduceBlockV2OKEthConsensusVersionDeneb     ProduceBlockV2OKEthConsensusVersion = "deneb"
)

// AllValues returns all ProduceBlockV2OKEthConsensusVersion values.
func (ProduceBlockV2OKEthConsensusVersion) AllValues() []ProduceBlockV2OKEthConsensusVersion {
	return []ProduceBlockV2OKEthConsensusVersion{
		ProduceBlockV2OKEthConsensusVersionPhase0,
		ProduceBlockV2OKEthConsensusVersionAltair,
		ProduceBlockV2OKEthConsensusVersionBellatrix,
		ProduceBlockV2OKEthConsensusVersionCapella,
		ProduceBlockV2OKEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProduceBlockV2OKEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case ProduceBlockV2OKEthConsensusVersionPhase0:
		return []byte(s), nil
	case ProduceBlockV2OKEthConsensusVersionAltair:
		return []byte(s), nil
	case ProduceBlockV2OKEthConsensusVersionBellatrix:
		return []byte(s), nil
	case ProduceBlockV2OKEthConsensusVersionCapella:
		return []byte(s), nil
	case ProduceBlockV2OKEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProduceBlockV2OKEthConsensusVersion) UnmarshalText(data []byte) error {
	switch ProduceBlockV2OKEthConsensusVersion(data) {
	case ProduceBlockV2OKEthConsensusVersionPhase0:
		*s = ProduceBlockV2OKEthConsensusVersionPhase0
		return nil
	case ProduceBlockV2OKEthConsensusVersionAltair:
		*s = ProduceBlockV2OKEthConsensusVersionAltair
		return nil
	case ProduceBlockV2OKEthConsensusVersionBellatrix:
		*s = ProduceBlockV2OKEthConsensusVersionBellatrix
		return nil
	case ProduceBlockV2OKEthConsensusVersionCapella:
		*s = ProduceBlockV2OKEthConsensusVersionCapella
		return nil
	case ProduceBlockV2OKEthConsensusVersionDeneb:
		*s = ProduceBlockV2OKEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProduceBlockV2ServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceBlockV2ServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceBlockV2ServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceBlockV2ServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceBlockV2ServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceBlockV2ServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceBlockV2ServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceBlockV2ServiceUnavailable) produceBlockV2Res() {}

type ProduceBlockV3BadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceBlockV3BadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceBlockV3BadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceBlockV3BadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceBlockV3BadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceBlockV3BadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceBlockV3BadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceBlockV3BadRequest) produceBlockV3Res() {}

type ProduceBlockV3InternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceBlockV3InternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceBlockV3InternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceBlockV3InternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceBlockV3InternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceBlockV3InternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceBlockV3InternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceBlockV3InternalServerError) produceBlockV3Res() {}

// SSZ serialized block or blinded block bytes. Use Accept header to choose this response type,
// version string is sent in header `Eth-Consensus-Version` and block type in `Eth-Blinded-Payload`.
type ProduceBlockV3OKApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ProduceBlockV3OKApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ProduceBlockV3OKApplicationOctetStreamHeaders wraps ProduceBlockV3OKApplicationOctetStream with response headers.
type ProduceBlockV3OKApplicationOctetStreamHeaders struct {
	EthConsensusBlockValue     string
	EthConsensusVersion        ProduceBlockV3OKEthConsensusVersion
	EthExecutionPayloadBlinded bool
	EthExecutionPayloadValue   string
	Response                   ProduceBlockV3OKApplicationOctetStream
}

// GetEthConsensusBlockValue returns the value of EthConsensusBlockValue.
func (s *ProduceBlockV3OKApplicationOctetStreamHeaders) GetEthConsensusBlockValue() string {
	return s.EthConsensusBlockValue
}

// GetEthConsensusVersion returns the value of EthConsensusVersion.
func (s *ProduceBlockV3OKApplicationOctetStreamHeaders) GetEthConsensusVersion() ProduceBlockV3OKEthConsensusVersion {
	return s.EthConsensusVersion
}

// GetEthExecutionPayloadBlinded returns the value of EthExecutionPayloadBlinded.
func (s *ProduceBlockV3OKApplicationOctetStreamHeaders) GetEthExecutionPayloadBlinded() bool {
	return s.EthExecutionPayloadBlinded
}

// GetEthExecutionPayloadValue returns the value of EthExecutionPayloadValue.
func (s *ProduceBlockV3OKApplicationOctetStreamHeaders) GetEthExecutionPayloadValue() string {
	return s.EthExecutionPayloadValue
}

// GetResponse returns the value of Response.
func (s *ProduceBlockV3OKApplicationOctetStreamHeaders) GetResponse() ProduceBlockV3OKApplicationOctetStream {
	return s.Response
}

// SetEthConsensusBlockValue sets the value of EthConsensusBlockValue.
func (s *ProduceBlockV3OKApplicationOctetStreamHeaders) SetEthConsensusBlockValue(val string) {
	s.EthConsensusBlockValue = val
}

// SetEthConsensusVersion sets the value of EthConsensusVersion.
func (s *ProduceBlockV3OKApplicationOctetStreamHeaders) SetEthConsensusVersion(val ProduceBlockV3OKEthConsensusVersion) {
	s.EthConsensusVersion = val
}

// SetEthExecutionPayloadBlinded sets the value of EthExecutionPayloadBlinded.
func (s *ProduceBlockV3OKApplicationOctetStreamHeaders) SetEthExecutionPayloadBlinded(val bool) {
	s.EthExecutionPayloadBlinded = val
}

// SetEthExecutionPayloadValue sets the value of EthExecutionPayloadValue.
func (s *ProduceBlockV3OKApplicationOctetStreamHeaders) SetEthExecutionPayloadValue(val string) {
	s.EthExecutionPayloadValue = val
}

// SetResponse sets the value of Response.
func (s *ProduceBlockV3OKApplicationOctetStreamHeaders) SetResponse(val ProduceBlockV3OKApplicationOctetStream) {
	s.Response = val
}

func (*ProduceBlockV3OKApplicationOctetStreamHeaders) produceBlockV3Res() {}

type ProduceBlockV3OKEthConsensusVersion string

const (
	ProduceBlockV3OKEthConsensusVersionPhase0    ProduceBlockV3OKEthConsensusVersion = "phase0"
	ProduceBlockV3OKEthConsensusVersionAltair    ProduceBlockV3OKEthConsensusVersion = "altair"
	ProduceBlockV3OKEthConsensusVersionBellatrix ProduceBlockV3OKEthConsensusVersion = "bellatrix"
	ProduceBlockV3OKEthConsensusVersionCapella   ProduceBlockV3OKEthConsensusVersion = "capella"
	ProduceBlockV3OKEthConsensusVersionDeneb     ProduceBlockV3OKEthConsensusVersion = "deneb"
)

// AllValues returns all ProduceBlockV3OKEthConsensusVersion values.
func (ProduceBlockV3OKEthConsensusVersion) AllValues() []ProduceBlockV3OKEthConsensusVersion {
	return []ProduceBlockV3OKEthConsensusVersion{
		ProduceBlockV3OKEthConsensusVersionPhase0,
		ProduceBlockV3OKEthConsensusVersionAltair,
		ProduceBlockV3OKEthConsensusVersionBellatrix,
		ProduceBlockV3OKEthConsensusVersionCapella,
		ProduceBlockV3OKEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProduceBlockV3OKEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case ProduceBlockV3OKEthConsensusVersionPhase0:
		return []byte(s), nil
	case ProduceBlockV3OKEthConsensusVersionAltair:
		return []byte(s), nil
	case ProduceBlockV3OKEthConsensusVersionBellatrix:
		return []byte(s), nil
	case ProduceBlockV3OKEthConsensusVersionCapella:
		return []byte(s), nil
	case ProduceBlockV3OKEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProduceBlockV3OKEthConsensusVersion) UnmarshalText(data []byte) error {
	switch ProduceBlockV3OKEthConsensusVersion(data) {
	case ProduceBlockV3OKEthConsensusVersionPhase0:
		*s = ProduceBlockV3OKEthConsensusVersionPhase0
		return nil
	case ProduceBlockV3OKEthConsensusVersionAltair:
		*s = ProduceBlockV3OKEthConsensusVersionAltair
		return nil
	case ProduceBlockV3OKEthConsensusVersionBellatrix:
		*s = ProduceBlockV3OKEthConsensusVersionBellatrix
		return nil
	case ProduceBlockV3OKEthConsensusVersionCapella:
		*s = ProduceBlockV3OKEthConsensusVersionCapella
		return nil
	case ProduceBlockV3OKEthConsensusVersionDeneb:
		*s = ProduceBlockV3OKEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProduceBlockV3ServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceBlockV3ServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceBlockV3ServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceBlockV3ServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceBlockV3ServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceBlockV3ServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceBlockV3ServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceBlockV3ServiceUnavailable) produceBlockV3Res() {}

type ProduceSyncCommitteeContributionBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceSyncCommitteeContributionBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceSyncCommitteeContributionBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceSyncCommitteeContributionBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceSyncCommitteeContributionBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceSyncCommitteeContributionBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceSyncCommitteeContributionBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceSyncCommitteeContributionBadRequest) produceSyncCommitteeContributionRes() {}

type ProduceSyncCommitteeContributionInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceSyncCommitteeContributionInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceSyncCommitteeContributionInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceSyncCommitteeContributionInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceSyncCommitteeContributionInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceSyncCommitteeContributionInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceSyncCommitteeContributionInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceSyncCommitteeContributionInternalServerError) produceSyncCommitteeContributionRes() {}

type ProduceSyncCommitteeContributionNotFound struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceSyncCommitteeContributionNotFound) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceSyncCommitteeContributionNotFound) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceSyncCommitteeContributionNotFound) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceSyncCommitteeContributionNotFound) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceSyncCommitteeContributionNotFound) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceSyncCommitteeContributionNotFound) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceSyncCommitteeContributionNotFound) produceSyncCommitteeContributionRes() {}

type ProduceSyncCommitteeContributionOK struct {
	Data ProduceSyncCommitteeContributionOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *ProduceSyncCommitteeContributionOK) GetData() ProduceSyncCommitteeContributionOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ProduceSyncCommitteeContributionOK) SetData(val ProduceSyncCommitteeContributionOKData) {
	s.Data = val
}

func (*ProduceSyncCommitteeContributionOK) produceSyncCommitteeContributionRes() {}

type ProduceSyncCommitteeContributionOKData struct {
	// The slot at which the validator is providing a sync committee contribution.
	Slot string `json:"slot"`
	// Block root for this contribution.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The index of the subcommittee that the contribution pertains to.
	SubcommitteeIndex string `json:"subcommittee_index"`
	// A bit is set if a signature from the validator at the corresponding index in the subcommittee is
	// present in the aggregate `signature`.
	AggregationBits string `json:"aggregation_bits"`
	// Signature by the validator(s) over the block root of `slot`.
	Signature string `json:"signature"`
}

// GetSlot returns the value of Slot.
func (s *ProduceSyncCommitteeContributionOKData) GetSlot() string {
	return s.Slot
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *ProduceSyncCommitteeContributionOKData) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSubcommitteeIndex returns the value of SubcommitteeIndex.
func (s *ProduceSyncCommitteeContributionOKData) GetSubcommitteeIndex() string {
	return s.SubcommitteeIndex
}

// GetAggregationBits returns the value of AggregationBits.
func (s *ProduceSyncCommitteeContributionOKData) GetAggregationBits() string {
	return s.AggregationBits
}

// GetSignature returns the value of Signature.
func (s *ProduceSyncCommitteeContributionOKData) GetSignature() string {
	return s.Signature
}

// SetSlot sets the value of Slot.
func (s *ProduceSyncCommitteeContributionOKData) SetSlot(val string) {
	s.Slot = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *ProduceSyncCommitteeContributionOKData) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSubcommitteeIndex sets the value of SubcommitteeIndex.
func (s *ProduceSyncCommitteeContributionOKData) SetSubcommitteeIndex(val string) {
	s.SubcommitteeIndex = val
}

// SetAggregationBits sets the value of AggregationBits.
func (s *ProduceSyncCommitteeContributionOKData) SetAggregationBits(val string) {
	s.AggregationBits = val
}

// SetSignature sets the value of Signature.
func (s *ProduceSyncCommitteeContributionOKData) SetSignature(val string) {
	s.Signature = val
}

type ProduceSyncCommitteeContributionServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *ProduceSyncCommitteeContributionServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProduceSyncCommitteeContributionServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *ProduceSyncCommitteeContributionServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *ProduceSyncCommitteeContributionServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProduceSyncCommitteeContributionServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *ProduceSyncCommitteeContributionServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*ProduceSyncCommitteeContributionServiceUnavailable) produceSyncCommitteeContributionRes() {}

type PublishAggregateAndProofsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishAggregateAndProofsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishAggregateAndProofsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishAggregateAndProofsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishAggregateAndProofsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishAggregateAndProofsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishAggregateAndProofsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishAggregateAndProofsBadRequest) publishAggregateAndProofsRes() {}

type PublishAggregateAndProofsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishAggregateAndProofsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishAggregateAndProofsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishAggregateAndProofsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishAggregateAndProofsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishAggregateAndProofsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishAggregateAndProofsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishAggregateAndProofsInternalServerError) publishAggregateAndProofsRes() {}

// PublishAggregateAndProofsOK is response for PublishAggregateAndProofs operation.
type PublishAggregateAndProofsOK struct{}

func (*PublishAggregateAndProofsOK) publishAggregateAndProofsRes() {}

// The [`SignedAggregateAndProof`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/validator.md#signedaggregateandproof) object.
type PublishAggregateAndProofsReqItem struct {
	Message   PublishAggregateAndProofsReqItemMessage `json:"message"`
	Signature string                                  `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *PublishAggregateAndProofsReqItem) GetMessage() PublishAggregateAndProofsReqItemMessage {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *PublishAggregateAndProofsReqItem) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *PublishAggregateAndProofsReqItem) SetMessage(val PublishAggregateAndProofsReqItemMessage) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *PublishAggregateAndProofsReqItem) SetSignature(val string) {
	s.Signature = val
}

// Merged schema.
type PublishAggregateAndProofsReqItemMessage struct {
	AggregatorIndex string `json:"aggregator_index"`
	// The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestation) object from the CL spec.
	Aggregate      PublishAggregateAndProofsReqItemMessageAggregate `json:"aggregate"`
	SelectionProof string                                           `json:"selection_proof"`
}

// GetAggregatorIndex returns the value of AggregatorIndex.
func (s *PublishAggregateAndProofsReqItemMessage) GetAggregatorIndex() string {
	return s.AggregatorIndex
}

// GetAggregate returns the value of Aggregate.
func (s *PublishAggregateAndProofsReqItemMessage) GetAggregate() PublishAggregateAndProofsReqItemMessageAggregate {
	return s.Aggregate
}

// GetSelectionProof returns the value of SelectionProof.
func (s *PublishAggregateAndProofsReqItemMessage) GetSelectionProof() string {
	return s.SelectionProof
}

// SetAggregatorIndex sets the value of AggregatorIndex.
func (s *PublishAggregateAndProofsReqItemMessage) SetAggregatorIndex(val string) {
	s.AggregatorIndex = val
}

// SetAggregate sets the value of Aggregate.
func (s *PublishAggregateAndProofsReqItemMessage) SetAggregate(val PublishAggregateAndProofsReqItemMessageAggregate) {
	s.Aggregate = val
}

// SetSelectionProof sets the value of SelectionProof.
func (s *PublishAggregateAndProofsReqItemMessage) SetSelectionProof(val string) {
	s.SelectionProof = val
}

// The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestation) object from the CL spec.
type PublishAggregateAndProofsReqItemMessageAggregate struct {
	// Attester aggregation bits.
	AggregationBits string `json:"aggregation_bits"`
	// BLS aggregate signature.
	Signature string `json:"signature"`
	// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
	Data PublishAggregateAndProofsReqItemMessageAggregateData `json:"data"`
}

// GetAggregationBits returns the value of AggregationBits.
func (s *PublishAggregateAndProofsReqItemMessageAggregate) GetAggregationBits() string {
	return s.AggregationBits
}

// GetSignature returns the value of Signature.
func (s *PublishAggregateAndProofsReqItemMessageAggregate) GetSignature() string {
	return s.Signature
}

// GetData returns the value of Data.
func (s *PublishAggregateAndProofsReqItemMessageAggregate) GetData() PublishAggregateAndProofsReqItemMessageAggregateData {
	return s.Data
}

// SetAggregationBits sets the value of AggregationBits.
func (s *PublishAggregateAndProofsReqItemMessageAggregate) SetAggregationBits(val string) {
	s.AggregationBits = val
}

// SetSignature sets the value of Signature.
func (s *PublishAggregateAndProofsReqItemMessageAggregate) SetSignature(val string) {
	s.Signature = val
}

// SetData sets the value of Data.
func (s *PublishAggregateAndProofsReqItemMessageAggregate) SetData(val PublishAggregateAndProofsReqItemMessageAggregateData) {
	s.Data = val
}

// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
type PublishAggregateAndProofsReqItemMessageAggregateData struct {
	Slot  string `json:"slot"`
	Index string `json:"index"`
	// LMD GHOST vote.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Source PublishAggregateAndProofsReqItemMessageAggregateDataSource `json:"source"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Target PublishAggregateAndProofsReqItemMessageAggregateDataTarget `json:"target"`
}

// GetSlot returns the value of Slot.
func (s *PublishAggregateAndProofsReqItemMessageAggregateData) GetSlot() string {
	return s.Slot
}

// GetIndex returns the value of Index.
func (s *PublishAggregateAndProofsReqItemMessageAggregateData) GetIndex() string {
	return s.Index
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *PublishAggregateAndProofsReqItemMessageAggregateData) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSource returns the value of Source.
func (s *PublishAggregateAndProofsReqItemMessageAggregateData) GetSource() PublishAggregateAndProofsReqItemMessageAggregateDataSource {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *PublishAggregateAndProofsReqItemMessageAggregateData) GetTarget() PublishAggregateAndProofsReqItemMessageAggregateDataTarget {
	return s.Target
}

// SetSlot sets the value of Slot.
func (s *PublishAggregateAndProofsReqItemMessageAggregateData) SetSlot(val string) {
	s.Slot = val
}

// SetIndex sets the value of Index.
func (s *PublishAggregateAndProofsReqItemMessageAggregateData) SetIndex(val string) {
	s.Index = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *PublishAggregateAndProofsReqItemMessageAggregateData) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSource sets the value of Source.
func (s *PublishAggregateAndProofsReqItemMessageAggregateData) SetSource(val PublishAggregateAndProofsReqItemMessageAggregateDataSource) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *PublishAggregateAndProofsReqItemMessageAggregateData) SetTarget(val PublishAggregateAndProofsReqItemMessageAggregateDataTarget) {
	s.Target = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type PublishAggregateAndProofsReqItemMessageAggregateDataSource struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *PublishAggregateAndProofsReqItemMessageAggregateDataSource) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *PublishAggregateAndProofsReqItemMessageAggregateDataSource) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *PublishAggregateAndProofsReqItemMessageAggregateDataSource) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *PublishAggregateAndProofsReqItemMessageAggregateDataSource) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type PublishAggregateAndProofsReqItemMessageAggregateDataTarget struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *PublishAggregateAndProofsReqItemMessageAggregateDataTarget) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *PublishAggregateAndProofsReqItemMessageAggregateDataTarget) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *PublishAggregateAndProofsReqItemMessageAggregateDataTarget) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *PublishAggregateAndProofsReqItemMessageAggregateDataTarget) SetRoot(val string) {
	s.Root = val
}

// PublishBlindedBlockAccepted is response for PublishBlindedBlock operation.
type PublishBlindedBlockAccepted struct{}

func (*PublishBlindedBlockAccepted) publishBlindedBlockRes() {}

type PublishBlindedBlockBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlindedBlockBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlindedBlockBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlindedBlockBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlindedBlockBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlindedBlockBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlindedBlockBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlindedBlockBadRequest) publishBlindedBlockRes() {}

type PublishBlindedBlockEthConsensusVersion string

const (
	PublishBlindedBlockEthConsensusVersionPhase0    PublishBlindedBlockEthConsensusVersion = "phase0"
	PublishBlindedBlockEthConsensusVersionAltair    PublishBlindedBlockEthConsensusVersion = "altair"
	PublishBlindedBlockEthConsensusVersionBellatrix PublishBlindedBlockEthConsensusVersion = "bellatrix"
	PublishBlindedBlockEthConsensusVersionCapella   PublishBlindedBlockEthConsensusVersion = "capella"
	PublishBlindedBlockEthConsensusVersionDeneb     PublishBlindedBlockEthConsensusVersion = "deneb"
)

// AllValues returns all PublishBlindedBlockEthConsensusVersion values.
func (PublishBlindedBlockEthConsensusVersion) AllValues() []PublishBlindedBlockEthConsensusVersion {
	return []PublishBlindedBlockEthConsensusVersion{
		PublishBlindedBlockEthConsensusVersionPhase0,
		PublishBlindedBlockEthConsensusVersionAltair,
		PublishBlindedBlockEthConsensusVersionBellatrix,
		PublishBlindedBlockEthConsensusVersionCapella,
		PublishBlindedBlockEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PublishBlindedBlockEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case PublishBlindedBlockEthConsensusVersionPhase0:
		return []byte(s), nil
	case PublishBlindedBlockEthConsensusVersionAltair:
		return []byte(s), nil
	case PublishBlindedBlockEthConsensusVersionBellatrix:
		return []byte(s), nil
	case PublishBlindedBlockEthConsensusVersionCapella:
		return []byte(s), nil
	case PublishBlindedBlockEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublishBlindedBlockEthConsensusVersion) UnmarshalText(data []byte) error {
	switch PublishBlindedBlockEthConsensusVersion(data) {
	case PublishBlindedBlockEthConsensusVersionPhase0:
		*s = PublishBlindedBlockEthConsensusVersionPhase0
		return nil
	case PublishBlindedBlockEthConsensusVersionAltair:
		*s = PublishBlindedBlockEthConsensusVersionAltair
		return nil
	case PublishBlindedBlockEthConsensusVersionBellatrix:
		*s = PublishBlindedBlockEthConsensusVersionBellatrix
		return nil
	case PublishBlindedBlockEthConsensusVersionCapella:
		*s = PublishBlindedBlockEthConsensusVersionCapella
		return nil
	case PublishBlindedBlockEthConsensusVersionDeneb:
		*s = PublishBlindedBlockEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PublishBlindedBlockInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlindedBlockInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlindedBlockInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlindedBlockInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlindedBlockInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlindedBlockInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlindedBlockInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlindedBlockInternalServerError) publishBlindedBlockRes() {}

// PublishBlindedBlockOK is response for PublishBlindedBlock operation.
type PublishBlindedBlockOK struct{}

func (*PublishBlindedBlockOK) publishBlindedBlockRes() {}

// SSZ serialized block bytes. Use content type header to indicate that SSZ data is contained in the
// request body.
type PublishBlindedBlockReqApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PublishBlindedBlockReqApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type PublishBlindedBlockServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlindedBlockServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlindedBlockServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlindedBlockServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlindedBlockServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlindedBlockServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlindedBlockServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlindedBlockServiceUnavailable) publishBlindedBlockRes() {}

type PublishBlindedBlockUnsupportedMediaType struct {
	// The media type supplied is unsupported, and the request has been rejected. This occurs when a HTTP
	// request supplies a payload in a content-type that the service is not able to accept.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlindedBlockUnsupportedMediaType) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlindedBlockUnsupportedMediaType) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlindedBlockUnsupportedMediaType) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlindedBlockUnsupportedMediaType) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlindedBlockUnsupportedMediaType) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlindedBlockUnsupportedMediaType) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlindedBlockUnsupportedMediaType) publishBlindedBlockRes() {}

// PublishBlindedBlockV2Accepted is response for PublishBlindedBlockV2 operation.
type PublishBlindedBlockV2Accepted struct{}

func (*PublishBlindedBlockV2Accepted) publishBlindedBlockV2Res() {}

type PublishBlindedBlockV2BadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlindedBlockV2BadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlindedBlockV2BadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlindedBlockV2BadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlindedBlockV2BadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlindedBlockV2BadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlindedBlockV2BadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlindedBlockV2BadRequest) publishBlindedBlockV2Res() {}

// Level of validation that must be applied to a block before it is broadcast.
type PublishBlindedBlockV2BroadcastValidation string

const (
	PublishBlindedBlockV2BroadcastValidationGossip                   PublishBlindedBlockV2BroadcastValidation = "gossip"
	PublishBlindedBlockV2BroadcastValidationConsensus                PublishBlindedBlockV2BroadcastValidation = "consensus"
	PublishBlindedBlockV2BroadcastValidationConsensusAndEquivocation PublishBlindedBlockV2BroadcastValidation = "consensus_and_equivocation"
)

// AllValues returns all PublishBlindedBlockV2BroadcastValidation values.
func (PublishBlindedBlockV2BroadcastValidation) AllValues() []PublishBlindedBlockV2BroadcastValidation {
	return []PublishBlindedBlockV2BroadcastValidation{
		PublishBlindedBlockV2BroadcastValidationGossip,
		PublishBlindedBlockV2BroadcastValidationConsensus,
		PublishBlindedBlockV2BroadcastValidationConsensusAndEquivocation,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PublishBlindedBlockV2BroadcastValidation) MarshalText() ([]byte, error) {
	switch s {
	case PublishBlindedBlockV2BroadcastValidationGossip:
		return []byte(s), nil
	case PublishBlindedBlockV2BroadcastValidationConsensus:
		return []byte(s), nil
	case PublishBlindedBlockV2BroadcastValidationConsensusAndEquivocation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublishBlindedBlockV2BroadcastValidation) UnmarshalText(data []byte) error {
	switch PublishBlindedBlockV2BroadcastValidation(data) {
	case PublishBlindedBlockV2BroadcastValidationGossip:
		*s = PublishBlindedBlockV2BroadcastValidationGossip
		return nil
	case PublishBlindedBlockV2BroadcastValidationConsensus:
		*s = PublishBlindedBlockV2BroadcastValidationConsensus
		return nil
	case PublishBlindedBlockV2BroadcastValidationConsensusAndEquivocation:
		*s = PublishBlindedBlockV2BroadcastValidationConsensusAndEquivocation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PublishBlindedBlockV2EthConsensusVersion string

const (
	PublishBlindedBlockV2EthConsensusVersionPhase0    PublishBlindedBlockV2EthConsensusVersion = "phase0"
	PublishBlindedBlockV2EthConsensusVersionAltair    PublishBlindedBlockV2EthConsensusVersion = "altair"
	PublishBlindedBlockV2EthConsensusVersionBellatrix PublishBlindedBlockV2EthConsensusVersion = "bellatrix"
	PublishBlindedBlockV2EthConsensusVersionCapella   PublishBlindedBlockV2EthConsensusVersion = "capella"
	PublishBlindedBlockV2EthConsensusVersionDeneb     PublishBlindedBlockV2EthConsensusVersion = "deneb"
)

// AllValues returns all PublishBlindedBlockV2EthConsensusVersion values.
func (PublishBlindedBlockV2EthConsensusVersion) AllValues() []PublishBlindedBlockV2EthConsensusVersion {
	return []PublishBlindedBlockV2EthConsensusVersion{
		PublishBlindedBlockV2EthConsensusVersionPhase0,
		PublishBlindedBlockV2EthConsensusVersionAltair,
		PublishBlindedBlockV2EthConsensusVersionBellatrix,
		PublishBlindedBlockV2EthConsensusVersionCapella,
		PublishBlindedBlockV2EthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PublishBlindedBlockV2EthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case PublishBlindedBlockV2EthConsensusVersionPhase0:
		return []byte(s), nil
	case PublishBlindedBlockV2EthConsensusVersionAltair:
		return []byte(s), nil
	case PublishBlindedBlockV2EthConsensusVersionBellatrix:
		return []byte(s), nil
	case PublishBlindedBlockV2EthConsensusVersionCapella:
		return []byte(s), nil
	case PublishBlindedBlockV2EthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublishBlindedBlockV2EthConsensusVersion) UnmarshalText(data []byte) error {
	switch PublishBlindedBlockV2EthConsensusVersion(data) {
	case PublishBlindedBlockV2EthConsensusVersionPhase0:
		*s = PublishBlindedBlockV2EthConsensusVersionPhase0
		return nil
	case PublishBlindedBlockV2EthConsensusVersionAltair:
		*s = PublishBlindedBlockV2EthConsensusVersionAltair
		return nil
	case PublishBlindedBlockV2EthConsensusVersionBellatrix:
		*s = PublishBlindedBlockV2EthConsensusVersionBellatrix
		return nil
	case PublishBlindedBlockV2EthConsensusVersionCapella:
		*s = PublishBlindedBlockV2EthConsensusVersionCapella
		return nil
	case PublishBlindedBlockV2EthConsensusVersionDeneb:
		*s = PublishBlindedBlockV2EthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PublishBlindedBlockV2InternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlindedBlockV2InternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlindedBlockV2InternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlindedBlockV2InternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlindedBlockV2InternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlindedBlockV2InternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlindedBlockV2InternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlindedBlockV2InternalServerError) publishBlindedBlockV2Res() {}

// PublishBlindedBlockV2OK is response for PublishBlindedBlockV2 operation.
type PublishBlindedBlockV2OK struct{}

func (*PublishBlindedBlockV2OK) publishBlindedBlockV2Res() {}

// SSZ serialized block bytes. Use content type header to indicate that SSZ data is contained in the
// request body.
type PublishBlindedBlockV2ReqApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PublishBlindedBlockV2ReqApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type PublishBlindedBlockV2ServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlindedBlockV2ServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlindedBlockV2ServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlindedBlockV2ServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlindedBlockV2ServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlindedBlockV2ServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlindedBlockV2ServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlindedBlockV2ServiceUnavailable) publishBlindedBlockV2Res() {}

type PublishBlindedBlockV2UnsupportedMediaType struct {
	// The media type supplied is unsupported, and the request has been rejected. This occurs when a HTTP
	// request supplies a payload in a content-type that the service is not able to accept.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlindedBlockV2UnsupportedMediaType) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlindedBlockV2UnsupportedMediaType) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlindedBlockV2UnsupportedMediaType) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlindedBlockV2UnsupportedMediaType) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlindedBlockV2UnsupportedMediaType) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlindedBlockV2UnsupportedMediaType) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlindedBlockV2UnsupportedMediaType) publishBlindedBlockV2Res() {}

// PublishBlockAccepted is response for PublishBlock operation.
type PublishBlockAccepted struct{}

func (*PublishBlockAccepted) publishBlockRes() {}

type PublishBlockBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlockBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlockBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlockBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlockBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlockBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlockBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlockBadRequest) publishBlockRes() {}

type PublishBlockEthConsensusVersion string

const (
	PublishBlockEthConsensusVersionPhase0    PublishBlockEthConsensusVersion = "phase0"
	PublishBlockEthConsensusVersionAltair    PublishBlockEthConsensusVersion = "altair"
	PublishBlockEthConsensusVersionBellatrix PublishBlockEthConsensusVersion = "bellatrix"
	PublishBlockEthConsensusVersionCapella   PublishBlockEthConsensusVersion = "capella"
	PublishBlockEthConsensusVersionDeneb     PublishBlockEthConsensusVersion = "deneb"
)

// AllValues returns all PublishBlockEthConsensusVersion values.
func (PublishBlockEthConsensusVersion) AllValues() []PublishBlockEthConsensusVersion {
	return []PublishBlockEthConsensusVersion{
		PublishBlockEthConsensusVersionPhase0,
		PublishBlockEthConsensusVersionAltair,
		PublishBlockEthConsensusVersionBellatrix,
		PublishBlockEthConsensusVersionCapella,
		PublishBlockEthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PublishBlockEthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case PublishBlockEthConsensusVersionPhase0:
		return []byte(s), nil
	case PublishBlockEthConsensusVersionAltair:
		return []byte(s), nil
	case PublishBlockEthConsensusVersionBellatrix:
		return []byte(s), nil
	case PublishBlockEthConsensusVersionCapella:
		return []byte(s), nil
	case PublishBlockEthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublishBlockEthConsensusVersion) UnmarshalText(data []byte) error {
	switch PublishBlockEthConsensusVersion(data) {
	case PublishBlockEthConsensusVersionPhase0:
		*s = PublishBlockEthConsensusVersionPhase0
		return nil
	case PublishBlockEthConsensusVersionAltair:
		*s = PublishBlockEthConsensusVersionAltair
		return nil
	case PublishBlockEthConsensusVersionBellatrix:
		*s = PublishBlockEthConsensusVersionBellatrix
		return nil
	case PublishBlockEthConsensusVersionCapella:
		*s = PublishBlockEthConsensusVersionCapella
		return nil
	case PublishBlockEthConsensusVersionDeneb:
		*s = PublishBlockEthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PublishBlockInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlockInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlockInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlockInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlockInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlockInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlockInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlockInternalServerError) publishBlockRes() {}

// PublishBlockOK is response for PublishBlock operation.
type PublishBlockOK struct{}

func (*PublishBlockOK) publishBlockRes() {}

// SSZ serialized block bytes. Use content type header to indicate that SSZ data is contained in the
// request body.
type PublishBlockReqApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PublishBlockReqApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type PublishBlockServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlockServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlockServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlockServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlockServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlockServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlockServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlockServiceUnavailable) publishBlockRes() {}

type PublishBlockUnsupportedMediaType struct {
	// The media type supplied is unsupported, and the request has been rejected. This occurs when a HTTP
	// request supplies a payload in a content-type that the service is not able to accept.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlockUnsupportedMediaType) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlockUnsupportedMediaType) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlockUnsupportedMediaType) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlockUnsupportedMediaType) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlockUnsupportedMediaType) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlockUnsupportedMediaType) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlockUnsupportedMediaType) publishBlockRes() {}

// PublishBlockV2Accepted is response for PublishBlockV2 operation.
type PublishBlockV2Accepted struct{}

func (*PublishBlockV2Accepted) publishBlockV2Res() {}

type PublishBlockV2BadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlockV2BadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlockV2BadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlockV2BadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlockV2BadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlockV2BadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlockV2BadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlockV2BadRequest) publishBlockV2Res() {}

// Level of validation that must be applied to a block before it is broadcast.
type PublishBlockV2BroadcastValidation string

const (
	PublishBlockV2BroadcastValidationGossip                   PublishBlockV2BroadcastValidation = "gossip"
	PublishBlockV2BroadcastValidationConsensus                PublishBlockV2BroadcastValidation = "consensus"
	PublishBlockV2BroadcastValidationConsensusAndEquivocation PublishBlockV2BroadcastValidation = "consensus_and_equivocation"
)

// AllValues returns all PublishBlockV2BroadcastValidation values.
func (PublishBlockV2BroadcastValidation) AllValues() []PublishBlockV2BroadcastValidation {
	return []PublishBlockV2BroadcastValidation{
		PublishBlockV2BroadcastValidationGossip,
		PublishBlockV2BroadcastValidationConsensus,
		PublishBlockV2BroadcastValidationConsensusAndEquivocation,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PublishBlockV2BroadcastValidation) MarshalText() ([]byte, error) {
	switch s {
	case PublishBlockV2BroadcastValidationGossip:
		return []byte(s), nil
	case PublishBlockV2BroadcastValidationConsensus:
		return []byte(s), nil
	case PublishBlockV2BroadcastValidationConsensusAndEquivocation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublishBlockV2BroadcastValidation) UnmarshalText(data []byte) error {
	switch PublishBlockV2BroadcastValidation(data) {
	case PublishBlockV2BroadcastValidationGossip:
		*s = PublishBlockV2BroadcastValidationGossip
		return nil
	case PublishBlockV2BroadcastValidationConsensus:
		*s = PublishBlockV2BroadcastValidationConsensus
		return nil
	case PublishBlockV2BroadcastValidationConsensusAndEquivocation:
		*s = PublishBlockV2BroadcastValidationConsensusAndEquivocation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PublishBlockV2EthConsensusVersion string

const (
	PublishBlockV2EthConsensusVersionPhase0    PublishBlockV2EthConsensusVersion = "phase0"
	PublishBlockV2EthConsensusVersionAltair    PublishBlockV2EthConsensusVersion = "altair"
	PublishBlockV2EthConsensusVersionBellatrix PublishBlockV2EthConsensusVersion = "bellatrix"
	PublishBlockV2EthConsensusVersionCapella   PublishBlockV2EthConsensusVersion = "capella"
	PublishBlockV2EthConsensusVersionDeneb     PublishBlockV2EthConsensusVersion = "deneb"
)

// AllValues returns all PublishBlockV2EthConsensusVersion values.
func (PublishBlockV2EthConsensusVersion) AllValues() []PublishBlockV2EthConsensusVersion {
	return []PublishBlockV2EthConsensusVersion{
		PublishBlockV2EthConsensusVersionPhase0,
		PublishBlockV2EthConsensusVersionAltair,
		PublishBlockV2EthConsensusVersionBellatrix,
		PublishBlockV2EthConsensusVersionCapella,
		PublishBlockV2EthConsensusVersionDeneb,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PublishBlockV2EthConsensusVersion) MarshalText() ([]byte, error) {
	switch s {
	case PublishBlockV2EthConsensusVersionPhase0:
		return []byte(s), nil
	case PublishBlockV2EthConsensusVersionAltair:
		return []byte(s), nil
	case PublishBlockV2EthConsensusVersionBellatrix:
		return []byte(s), nil
	case PublishBlockV2EthConsensusVersionCapella:
		return []byte(s), nil
	case PublishBlockV2EthConsensusVersionDeneb:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PublishBlockV2EthConsensusVersion) UnmarshalText(data []byte) error {
	switch PublishBlockV2EthConsensusVersion(data) {
	case PublishBlockV2EthConsensusVersionPhase0:
		*s = PublishBlockV2EthConsensusVersionPhase0
		return nil
	case PublishBlockV2EthConsensusVersionAltair:
		*s = PublishBlockV2EthConsensusVersionAltair
		return nil
	case PublishBlockV2EthConsensusVersionBellatrix:
		*s = PublishBlockV2EthConsensusVersionBellatrix
		return nil
	case PublishBlockV2EthConsensusVersionCapella:
		*s = PublishBlockV2EthConsensusVersionCapella
		return nil
	case PublishBlockV2EthConsensusVersionDeneb:
		*s = PublishBlockV2EthConsensusVersionDeneb
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PublishBlockV2InternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlockV2InternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlockV2InternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlockV2InternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlockV2InternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlockV2InternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlockV2InternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlockV2InternalServerError) publishBlockV2Res() {}

// PublishBlockV2OK is response for PublishBlockV2 operation.
type PublishBlockV2OK struct{}

func (*PublishBlockV2OK) publishBlockV2Res() {}

// SSZ serialized block bytes. Use content type header to indicate that SSZ data is contained in the
// request body.
type PublishBlockV2ReqApplicationOctetStream struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s PublishBlockV2ReqApplicationOctetStream) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type PublishBlockV2ServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlockV2ServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlockV2ServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlockV2ServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlockV2ServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlockV2ServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlockV2ServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlockV2ServiceUnavailable) publishBlockV2Res() {}

type PublishBlockV2UnsupportedMediaType struct {
	// The media type supplied is unsupported, and the request has been rejected. This occurs when a HTTP
	// request supplies a payload in a content-type that the service is not able to accept.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishBlockV2UnsupportedMediaType) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishBlockV2UnsupportedMediaType) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishBlockV2UnsupportedMediaType) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishBlockV2UnsupportedMediaType) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishBlockV2UnsupportedMediaType) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishBlockV2UnsupportedMediaType) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishBlockV2UnsupportedMediaType) publishBlockV2Res() {}

type PublishContributionAndProofsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishContributionAndProofsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishContributionAndProofsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishContributionAndProofsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishContributionAndProofsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishContributionAndProofsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishContributionAndProofsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishContributionAndProofsBadRequest) publishContributionAndProofsRes() {}

type PublishContributionAndProofsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *PublishContributionAndProofsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *PublishContributionAndProofsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *PublishContributionAndProofsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *PublishContributionAndProofsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *PublishContributionAndProofsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *PublishContributionAndProofsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*PublishContributionAndProofsInternalServerError) publishContributionAndProofsRes() {}

// PublishContributionAndProofsOK is response for PublishContributionAndProofs operation.
type PublishContributionAndProofsOK struct{}

func (*PublishContributionAndProofsOK) publishContributionAndProofsRes() {}

type PublishContributionAndProofsReqItem struct {
	Message   PublishContributionAndProofsReqItemMessage `json:"message"`
	Signature string                                     `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *PublishContributionAndProofsReqItem) GetMessage() PublishContributionAndProofsReqItemMessage {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *PublishContributionAndProofsReqItem) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *PublishContributionAndProofsReqItem) SetMessage(val PublishContributionAndProofsReqItemMessage) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *PublishContributionAndProofsReqItem) SetSignature(val string) {
	s.Signature = val
}

type PublishContributionAndProofsReqItemMessage struct {
	// Index of validator in validator registry.
	AggregatorIndex string                                                 `json:"aggregator_index"`
	SelectionProof  string                                                 `json:"selection_proof"`
	Contribution    PublishContributionAndProofsReqItemMessageContribution `json:"contribution"`
}

// GetAggregatorIndex returns the value of AggregatorIndex.
func (s *PublishContributionAndProofsReqItemMessage) GetAggregatorIndex() string {
	return s.AggregatorIndex
}

// GetSelectionProof returns the value of SelectionProof.
func (s *PublishContributionAndProofsReqItemMessage) GetSelectionProof() string {
	return s.SelectionProof
}

// GetContribution returns the value of Contribution.
func (s *PublishContributionAndProofsReqItemMessage) GetContribution() PublishContributionAndProofsReqItemMessageContribution {
	return s.Contribution
}

// SetAggregatorIndex sets the value of AggregatorIndex.
func (s *PublishContributionAndProofsReqItemMessage) SetAggregatorIndex(val string) {
	s.AggregatorIndex = val
}

// SetSelectionProof sets the value of SelectionProof.
func (s *PublishContributionAndProofsReqItemMessage) SetSelectionProof(val string) {
	s.SelectionProof = val
}

// SetContribution sets the value of Contribution.
func (s *PublishContributionAndProofsReqItemMessage) SetContribution(val PublishContributionAndProofsReqItemMessageContribution) {
	s.Contribution = val
}

type PublishContributionAndProofsReqItemMessageContribution struct {
	// The slot at which the validator is providing a sync committee contribution.
	Slot string `json:"slot"`
	// Block root for this contribution.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The index of the subcommittee that the contribution pertains to.
	SubcommitteeIndex string `json:"subcommittee_index"`
	// A bit is set if a signature from the validator at the corresponding index in the subcommittee is
	// present in the aggregate `signature`.
	AggregationBits string `json:"aggregation_bits"`
	// Signature by the validator(s) over the block root of `slot`.
	Signature string `json:"signature"`
}

// GetSlot returns the value of Slot.
func (s *PublishContributionAndProofsReqItemMessageContribution) GetSlot() string {
	return s.Slot
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *PublishContributionAndProofsReqItemMessageContribution) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSubcommitteeIndex returns the value of SubcommitteeIndex.
func (s *PublishContributionAndProofsReqItemMessageContribution) GetSubcommitteeIndex() string {
	return s.SubcommitteeIndex
}

// GetAggregationBits returns the value of AggregationBits.
func (s *PublishContributionAndProofsReqItemMessageContribution) GetAggregationBits() string {
	return s.AggregationBits
}

// GetSignature returns the value of Signature.
func (s *PublishContributionAndProofsReqItemMessageContribution) GetSignature() string {
	return s.Signature
}

// SetSlot sets the value of Slot.
func (s *PublishContributionAndProofsReqItemMessageContribution) SetSlot(val string) {
	s.Slot = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *PublishContributionAndProofsReqItemMessageContribution) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSubcommitteeIndex sets the value of SubcommitteeIndex.
func (s *PublishContributionAndProofsReqItemMessageContribution) SetSubcommitteeIndex(val string) {
	s.SubcommitteeIndex = val
}

// SetAggregationBits sets the value of AggregationBits.
func (s *PublishContributionAndProofsReqItemMessageContribution) SetAggregationBits(val string) {
	s.AggregationBits = val
}

// SetSignature sets the value of Signature.
func (s *PublishContributionAndProofsReqItemMessageContribution) SetSignature(val string) {
	s.Signature = val
}

type RegisterValidatorBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *RegisterValidatorBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *RegisterValidatorBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *RegisterValidatorBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *RegisterValidatorBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *RegisterValidatorBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *RegisterValidatorBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*RegisterValidatorBadRequest) registerValidatorRes() {}

type RegisterValidatorInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *RegisterValidatorInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *RegisterValidatorInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *RegisterValidatorInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *RegisterValidatorInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *RegisterValidatorInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *RegisterValidatorInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*RegisterValidatorInternalServerError) registerValidatorRes() {}

// RegisterValidatorOK is response for RegisterValidator operation.
type RegisterValidatorOK struct{}

func (*RegisterValidatorOK) registerValidatorRes() {}

// The `SignedValidatorRegistration` object from the Builder API specification.
type RegisterValidatorReqItem struct {
	// The `ValidatorRegistration` object from the Builder API specification.
	Message   RegisterValidatorReqItemMessage `json:"message"`
	Signature string                          `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *RegisterValidatorReqItem) GetMessage() RegisterValidatorReqItemMessage {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *RegisterValidatorReqItem) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *RegisterValidatorReqItem) SetMessage(val RegisterValidatorReqItemMessage) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *RegisterValidatorReqItem) SetSignature(val string) {
	s.Signature = val
}

// The `ValidatorRegistration` object from the Builder API specification.
type RegisterValidatorReqItemMessage struct {
	// Address to receive fees from the block.
	FeeRecipient string `json:"fee_recipient"`
	// Preferred gas limit of validator.
	GasLimit string `json:"gas_limit"`
	// Unix timestamp of registration.
	Timestamp string `json:"timestamp"`
	// BLS public key of validator.
	Pubkey string `json:"pubkey"`
}

// GetFeeRecipient returns the value of FeeRecipient.
func (s *RegisterValidatorReqItemMessage) GetFeeRecipient() string {
	return s.FeeRecipient
}

// GetGasLimit returns the value of GasLimit.
func (s *RegisterValidatorReqItemMessage) GetGasLimit() string {
	return s.GasLimit
}

// GetTimestamp returns the value of Timestamp.
func (s *RegisterValidatorReqItemMessage) GetTimestamp() string {
	return s.Timestamp
}

// GetPubkey returns the value of Pubkey.
func (s *RegisterValidatorReqItemMessage) GetPubkey() string {
	return s.Pubkey
}

// SetFeeRecipient sets the value of FeeRecipient.
func (s *RegisterValidatorReqItemMessage) SetFeeRecipient(val string) {
	s.FeeRecipient = val
}

// SetGasLimit sets the value of GasLimit.
func (s *RegisterValidatorReqItemMessage) SetGasLimit(val string) {
	s.GasLimit = val
}

// SetTimestamp sets the value of Timestamp.
func (s *RegisterValidatorReqItemMessage) SetTimestamp(val string) {
	s.Timestamp = val
}

// SetPubkey sets the value of Pubkey.
func (s *RegisterValidatorReqItemMessage) SetPubkey(val string) {
	s.Pubkey = val
}

type SubmitBeaconCommitteeSelectionsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitBeaconCommitteeSelectionsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitBeaconCommitteeSelectionsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitBeaconCommitteeSelectionsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitBeaconCommitteeSelectionsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitBeaconCommitteeSelectionsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitBeaconCommitteeSelectionsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitBeaconCommitteeSelectionsBadRequest) submitBeaconCommitteeSelectionsRes() {}

type SubmitBeaconCommitteeSelectionsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitBeaconCommitteeSelectionsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitBeaconCommitteeSelectionsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitBeaconCommitteeSelectionsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitBeaconCommitteeSelectionsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitBeaconCommitteeSelectionsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitBeaconCommitteeSelectionsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitBeaconCommitteeSelectionsInternalServerError) submitBeaconCommitteeSelectionsRes() {}

type SubmitBeaconCommitteeSelectionsNotImplemented struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitBeaconCommitteeSelectionsNotImplemented) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitBeaconCommitteeSelectionsNotImplemented) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitBeaconCommitteeSelectionsNotImplemented) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitBeaconCommitteeSelectionsNotImplemented) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitBeaconCommitteeSelectionsNotImplemented) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitBeaconCommitteeSelectionsNotImplemented) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitBeaconCommitteeSelectionsNotImplemented) submitBeaconCommitteeSelectionsRes() {}

type SubmitBeaconCommitteeSelectionsOK struct {
	Data []SubmitBeaconCommitteeSelectionsOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *SubmitBeaconCommitteeSelectionsOK) GetData() []SubmitBeaconCommitteeSelectionsOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *SubmitBeaconCommitteeSelectionsOK) SetData(val []SubmitBeaconCommitteeSelectionsOKDataItem) {
	s.Data = val
}

func (*SubmitBeaconCommitteeSelectionsOK) submitBeaconCommitteeSelectionsRes() {}

type SubmitBeaconCommitteeSelectionsOKDataItem struct {
	// Index of the validator.
	ValidatorIndex string `json:"validator_index"`
	// The slot at which a validator is assigned to attest.
	Slot string `json:"slot"`
	// The `slot_signature` calculated by the validator for the upcoming attestation slot.
	SelectionProof string `json:"selection_proof"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *SubmitBeaconCommitteeSelectionsOKDataItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetSlot returns the value of Slot.
func (s *SubmitBeaconCommitteeSelectionsOKDataItem) GetSlot() string {
	return s.Slot
}

// GetSelectionProof returns the value of SelectionProof.
func (s *SubmitBeaconCommitteeSelectionsOKDataItem) GetSelectionProof() string {
	return s.SelectionProof
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *SubmitBeaconCommitteeSelectionsOKDataItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetSlot sets the value of Slot.
func (s *SubmitBeaconCommitteeSelectionsOKDataItem) SetSlot(val string) {
	s.Slot = val
}

// SetSelectionProof sets the value of SelectionProof.
func (s *SubmitBeaconCommitteeSelectionsOKDataItem) SetSelectionProof(val string) {
	s.SelectionProof = val
}

type SubmitBeaconCommitteeSelectionsReqItem struct {
	// Index of the validator.
	ValidatorIndex string `json:"validator_index"`
	// The slot at which a validator is assigned to attest.
	Slot string `json:"slot"`
	// The `slot_signature` calculated by the validator for the upcoming attestation slot.
	SelectionProof string `json:"selection_proof"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *SubmitBeaconCommitteeSelectionsReqItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetSlot returns the value of Slot.
func (s *SubmitBeaconCommitteeSelectionsReqItem) GetSlot() string {
	return s.Slot
}

// GetSelectionProof returns the value of SelectionProof.
func (s *SubmitBeaconCommitteeSelectionsReqItem) GetSelectionProof() string {
	return s.SelectionProof
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *SubmitBeaconCommitteeSelectionsReqItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetSlot sets the value of Slot.
func (s *SubmitBeaconCommitteeSelectionsReqItem) SetSlot(val string) {
	s.Slot = val
}

// SetSelectionProof sets the value of SelectionProof.
func (s *SubmitBeaconCommitteeSelectionsReqItem) SetSelectionProof(val string) {
	s.SelectionProof = val
}

type SubmitBeaconCommitteeSelectionsServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitBeaconCommitteeSelectionsServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitBeaconCommitteeSelectionsServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitBeaconCommitteeSelectionsServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitBeaconCommitteeSelectionsServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitBeaconCommitteeSelectionsServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitBeaconCommitteeSelectionsServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitBeaconCommitteeSelectionsServiceUnavailable) submitBeaconCommitteeSelectionsRes() {}

type SubmitPoolAttestationsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// List of individual items that have failed.
	Failures []SubmitPoolAttestationsBadRequestFailuresItem `json:"failures"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolAttestationsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolAttestationsBadRequest) GetMessage() string {
	return s.Message
}

// GetFailures returns the value of Failures.
func (s *SubmitPoolAttestationsBadRequest) GetFailures() []SubmitPoolAttestationsBadRequestFailuresItem {
	return s.Failures
}

// SetCode sets the value of Code.
func (s *SubmitPoolAttestationsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolAttestationsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetFailures sets the value of Failures.
func (s *SubmitPoolAttestationsBadRequest) SetFailures(val []SubmitPoolAttestationsBadRequestFailuresItem) {
	s.Failures = val
}

func (*SubmitPoolAttestationsBadRequest) submitPoolAttestationsRes() {}

type SubmitPoolAttestationsBadRequestFailuresItem struct {
	// Index of item in the request list that caused the error.
	Index float64 `json:"index"`
	// Message describing error.
	Message string `json:"message"`
}

// GetIndex returns the value of Index.
func (s *SubmitPoolAttestationsBadRequestFailuresItem) GetIndex() float64 {
	return s.Index
}

// GetMessage returns the value of Message.
func (s *SubmitPoolAttestationsBadRequestFailuresItem) GetMessage() string {
	return s.Message
}

// SetIndex sets the value of Index.
func (s *SubmitPoolAttestationsBadRequestFailuresItem) SetIndex(val float64) {
	s.Index = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolAttestationsBadRequestFailuresItem) SetMessage(val string) {
	s.Message = val
}

type SubmitPoolAttestationsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolAttestationsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolAttestationsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitPoolAttestationsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitPoolAttestationsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolAttestationsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitPoolAttestationsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitPoolAttestationsInternalServerError) submitPoolAttestationsRes() {}

// SubmitPoolAttestationsOK is response for SubmitPoolAttestations operation.
type SubmitPoolAttestationsOK struct{}

func (*SubmitPoolAttestationsOK) submitPoolAttestationsRes() {}

// The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestation) object from the CL spec.
type SubmitPoolAttestationsReqItem struct {
	// Attester aggregation bits.
	AggregationBits string `json:"aggregation_bits"`
	// BLS aggregate signature.
	Signature string `json:"signature"`
	// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
	Data SubmitPoolAttestationsReqItemData `json:"data"`
}

// GetAggregationBits returns the value of AggregationBits.
func (s *SubmitPoolAttestationsReqItem) GetAggregationBits() string {
	return s.AggregationBits
}

// GetSignature returns the value of Signature.
func (s *SubmitPoolAttestationsReqItem) GetSignature() string {
	return s.Signature
}

// GetData returns the value of Data.
func (s *SubmitPoolAttestationsReqItem) GetData() SubmitPoolAttestationsReqItemData {
	return s.Data
}

// SetAggregationBits sets the value of AggregationBits.
func (s *SubmitPoolAttestationsReqItem) SetAggregationBits(val string) {
	s.AggregationBits = val
}

// SetSignature sets the value of Signature.
func (s *SubmitPoolAttestationsReqItem) SetSignature(val string) {
	s.Signature = val
}

// SetData sets the value of Data.
func (s *SubmitPoolAttestationsReqItem) SetData(val SubmitPoolAttestationsReqItemData) {
	s.Data = val
}

// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
type SubmitPoolAttestationsReqItemData struct {
	Slot  string `json:"slot"`
	Index string `json:"index"`
	// LMD GHOST vote.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Source SubmitPoolAttestationsReqItemDataSource `json:"source"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Target SubmitPoolAttestationsReqItemDataTarget `json:"target"`
}

// GetSlot returns the value of Slot.
func (s *SubmitPoolAttestationsReqItemData) GetSlot() string {
	return s.Slot
}

// GetIndex returns the value of Index.
func (s *SubmitPoolAttestationsReqItemData) GetIndex() string {
	return s.Index
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *SubmitPoolAttestationsReqItemData) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSource returns the value of Source.
func (s *SubmitPoolAttestationsReqItemData) GetSource() SubmitPoolAttestationsReqItemDataSource {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *SubmitPoolAttestationsReqItemData) GetTarget() SubmitPoolAttestationsReqItemDataTarget {
	return s.Target
}

// SetSlot sets the value of Slot.
func (s *SubmitPoolAttestationsReqItemData) SetSlot(val string) {
	s.Slot = val
}

// SetIndex sets the value of Index.
func (s *SubmitPoolAttestationsReqItemData) SetIndex(val string) {
	s.Index = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *SubmitPoolAttestationsReqItemData) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSource sets the value of Source.
func (s *SubmitPoolAttestationsReqItemData) SetSource(val SubmitPoolAttestationsReqItemDataSource) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *SubmitPoolAttestationsReqItemData) SetTarget(val SubmitPoolAttestationsReqItemDataTarget) {
	s.Target = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type SubmitPoolAttestationsReqItemDataSource struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *SubmitPoolAttestationsReqItemDataSource) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *SubmitPoolAttestationsReqItemDataSource) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *SubmitPoolAttestationsReqItemDataSource) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *SubmitPoolAttestationsReqItemDataSource) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type SubmitPoolAttestationsReqItemDataTarget struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *SubmitPoolAttestationsReqItemDataTarget) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *SubmitPoolAttestationsReqItemDataTarget) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *SubmitPoolAttestationsReqItemDataTarget) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *SubmitPoolAttestationsReqItemDataTarget) SetRoot(val string) {
	s.Root = val
}

type SubmitPoolAttesterSlashingsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolAttesterSlashingsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolAttesterSlashingsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitPoolAttesterSlashingsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitPoolAttesterSlashingsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolAttesterSlashingsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitPoolAttesterSlashingsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitPoolAttesterSlashingsBadRequest) submitPoolAttesterSlashingsRes() {}

type SubmitPoolAttesterSlashingsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolAttesterSlashingsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolAttesterSlashingsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitPoolAttesterSlashingsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitPoolAttesterSlashingsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolAttesterSlashingsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitPoolAttesterSlashingsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitPoolAttesterSlashingsInternalServerError) submitPoolAttesterSlashingsRes() {}

// SubmitPoolAttesterSlashingsOK is response for SubmitPoolAttesterSlashings operation.
type SubmitPoolAttesterSlashingsOK struct{}

func (*SubmitPoolAttesterSlashingsOK) submitPoolAttesterSlashingsRes() {}

// The [`AttesterSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attesterslashing) object from the CL spec.
type SubmitPoolAttesterSlashingsReq struct {
	// The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec.
	Attestation1 SubmitPoolAttesterSlashingsReqAttestation1 `json:"attestation_1"`
	// The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec.
	Attestation2 SubmitPoolAttesterSlashingsReqAttestation2 `json:"attestation_2"`
}

// GetAttestation1 returns the value of Attestation1.
func (s *SubmitPoolAttesterSlashingsReq) GetAttestation1() SubmitPoolAttesterSlashingsReqAttestation1 {
	return s.Attestation1
}

// GetAttestation2 returns the value of Attestation2.
func (s *SubmitPoolAttesterSlashingsReq) GetAttestation2() SubmitPoolAttesterSlashingsReqAttestation2 {
	return s.Attestation2
}

// SetAttestation1 sets the value of Attestation1.
func (s *SubmitPoolAttesterSlashingsReq) SetAttestation1(val SubmitPoolAttesterSlashingsReqAttestation1) {
	s.Attestation1 = val
}

// SetAttestation2 sets the value of Attestation2.
func (s *SubmitPoolAttesterSlashingsReq) SetAttestation2(val SubmitPoolAttesterSlashingsReqAttestation2) {
	s.Attestation2 = val
}

// The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec.
type SubmitPoolAttesterSlashingsReqAttestation1 struct {
	// Attesting validator indices.
	AttestingIndices []string `json:"attesting_indices"`
	// The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
	Signature OptString `json:"signature"`
	// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
	Data OptSubmitPoolAttesterSlashingsReqAttestation1Data `json:"data"`
}

// GetAttestingIndices returns the value of AttestingIndices.
func (s *SubmitPoolAttesterSlashingsReqAttestation1) GetAttestingIndices() []string {
	return s.AttestingIndices
}

// GetSignature returns the value of Signature.
func (s *SubmitPoolAttesterSlashingsReqAttestation1) GetSignature() OptString {
	return s.Signature
}

// GetData returns the value of Data.
func (s *SubmitPoolAttesterSlashingsReqAttestation1) GetData() OptSubmitPoolAttesterSlashingsReqAttestation1Data {
	return s.Data
}

// SetAttestingIndices sets the value of AttestingIndices.
func (s *SubmitPoolAttesterSlashingsReqAttestation1) SetAttestingIndices(val []string) {
	s.AttestingIndices = val
}

// SetSignature sets the value of Signature.
func (s *SubmitPoolAttesterSlashingsReqAttestation1) SetSignature(val OptString) {
	s.Signature = val
}

// SetData sets the value of Data.
func (s *SubmitPoolAttesterSlashingsReqAttestation1) SetData(val OptSubmitPoolAttesterSlashingsReqAttestation1Data) {
	s.Data = val
}

// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
type SubmitPoolAttesterSlashingsReqAttestation1Data struct {
	Slot  string `json:"slot"`
	Index string `json:"index"`
	// LMD GHOST vote.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Source SubmitPoolAttesterSlashingsReqAttestation1DataSource `json:"source"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Target SubmitPoolAttesterSlashingsReqAttestation1DataTarget `json:"target"`
}

// GetSlot returns the value of Slot.
func (s *SubmitPoolAttesterSlashingsReqAttestation1Data) GetSlot() string {
	return s.Slot
}

// GetIndex returns the value of Index.
func (s *SubmitPoolAttesterSlashingsReqAttestation1Data) GetIndex() string {
	return s.Index
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *SubmitPoolAttesterSlashingsReqAttestation1Data) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSource returns the value of Source.
func (s *SubmitPoolAttesterSlashingsReqAttestation1Data) GetSource() SubmitPoolAttesterSlashingsReqAttestation1DataSource {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *SubmitPoolAttesterSlashingsReqAttestation1Data) GetTarget() SubmitPoolAttesterSlashingsReqAttestation1DataTarget {
	return s.Target
}

// SetSlot sets the value of Slot.
func (s *SubmitPoolAttesterSlashingsReqAttestation1Data) SetSlot(val string) {
	s.Slot = val
}

// SetIndex sets the value of Index.
func (s *SubmitPoolAttesterSlashingsReqAttestation1Data) SetIndex(val string) {
	s.Index = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *SubmitPoolAttesterSlashingsReqAttestation1Data) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSource sets the value of Source.
func (s *SubmitPoolAttesterSlashingsReqAttestation1Data) SetSource(val SubmitPoolAttesterSlashingsReqAttestation1DataSource) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *SubmitPoolAttesterSlashingsReqAttestation1Data) SetTarget(val SubmitPoolAttesterSlashingsReqAttestation1DataTarget) {
	s.Target = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type SubmitPoolAttesterSlashingsReqAttestation1DataSource struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *SubmitPoolAttesterSlashingsReqAttestation1DataSource) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *SubmitPoolAttesterSlashingsReqAttestation1DataSource) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *SubmitPoolAttesterSlashingsReqAttestation1DataSource) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *SubmitPoolAttesterSlashingsReqAttestation1DataSource) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type SubmitPoolAttesterSlashingsReqAttestation1DataTarget struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *SubmitPoolAttesterSlashingsReqAttestation1DataTarget) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *SubmitPoolAttesterSlashingsReqAttestation1DataTarget) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *SubmitPoolAttesterSlashingsReqAttestation1DataTarget) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *SubmitPoolAttesterSlashingsReqAttestation1DataTarget) SetRoot(val string) {
	s.Root = val
}

// The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec.
type SubmitPoolAttesterSlashingsReqAttestation2 struct {
	// Attesting validator indices.
	AttestingIndices []string `json:"attesting_indices"`
	// The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
	Signature OptString `json:"signature"`
	// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
	Data OptSubmitPoolAttesterSlashingsReqAttestation2Data `json:"data"`
}

// GetAttestingIndices returns the value of AttestingIndices.
func (s *SubmitPoolAttesterSlashingsReqAttestation2) GetAttestingIndices() []string {
	return s.AttestingIndices
}

// GetSignature returns the value of Signature.
func (s *SubmitPoolAttesterSlashingsReqAttestation2) GetSignature() OptString {
	return s.Signature
}

// GetData returns the value of Data.
func (s *SubmitPoolAttesterSlashingsReqAttestation2) GetData() OptSubmitPoolAttesterSlashingsReqAttestation2Data {
	return s.Data
}

// SetAttestingIndices sets the value of AttestingIndices.
func (s *SubmitPoolAttesterSlashingsReqAttestation2) SetAttestingIndices(val []string) {
	s.AttestingIndices = val
}

// SetSignature sets the value of Signature.
func (s *SubmitPoolAttesterSlashingsReqAttestation2) SetSignature(val OptString) {
	s.Signature = val
}

// SetData sets the value of Data.
func (s *SubmitPoolAttesterSlashingsReqAttestation2) SetData(val OptSubmitPoolAttesterSlashingsReqAttestation2Data) {
	s.Data = val
}

// The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec.
type SubmitPoolAttesterSlashingsReqAttestation2Data struct {
	Slot  string `json:"slot"`
	Index string `json:"index"`
	// LMD GHOST vote.
	BeaconBlockRoot string `json:"beacon_block_root"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Source SubmitPoolAttesterSlashingsReqAttestation2DataSource `json:"source"`
	// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#checkpoint.
	Target SubmitPoolAttesterSlashingsReqAttestation2DataTarget `json:"target"`
}

// GetSlot returns the value of Slot.
func (s *SubmitPoolAttesterSlashingsReqAttestation2Data) GetSlot() string {
	return s.Slot
}

// GetIndex returns the value of Index.
func (s *SubmitPoolAttesterSlashingsReqAttestation2Data) GetIndex() string {
	return s.Index
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *SubmitPoolAttesterSlashingsReqAttestation2Data) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetSource returns the value of Source.
func (s *SubmitPoolAttesterSlashingsReqAttestation2Data) GetSource() SubmitPoolAttesterSlashingsReqAttestation2DataSource {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *SubmitPoolAttesterSlashingsReqAttestation2Data) GetTarget() SubmitPoolAttesterSlashingsReqAttestation2DataTarget {
	return s.Target
}

// SetSlot sets the value of Slot.
func (s *SubmitPoolAttesterSlashingsReqAttestation2Data) SetSlot(val string) {
	s.Slot = val
}

// SetIndex sets the value of Index.
func (s *SubmitPoolAttesterSlashingsReqAttestation2Data) SetIndex(val string) {
	s.Index = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *SubmitPoolAttesterSlashingsReqAttestation2Data) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetSource sets the value of Source.
func (s *SubmitPoolAttesterSlashingsReqAttestation2Data) SetSource(val SubmitPoolAttesterSlashingsReqAttestation2DataSource) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *SubmitPoolAttesterSlashingsReqAttestation2Data) SetTarget(val SubmitPoolAttesterSlashingsReqAttestation2DataTarget) {
	s.Target = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type SubmitPoolAttesterSlashingsReqAttestation2DataSource struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *SubmitPoolAttesterSlashingsReqAttestation2DataSource) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *SubmitPoolAttesterSlashingsReqAttestation2DataSource) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *SubmitPoolAttesterSlashingsReqAttestation2DataSource) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *SubmitPoolAttesterSlashingsReqAttestation2DataSource) SetRoot(val string) {
	s.Root = val
}

// The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#checkpoint.
type SubmitPoolAttesterSlashingsReqAttestation2DataTarget struct {
	Epoch string `json:"epoch"`
	Root  string `json:"root"`
}

// GetEpoch returns the value of Epoch.
func (s *SubmitPoolAttesterSlashingsReqAttestation2DataTarget) GetEpoch() string {
	return s.Epoch
}

// GetRoot returns the value of Root.
func (s *SubmitPoolAttesterSlashingsReqAttestation2DataTarget) GetRoot() string {
	return s.Root
}

// SetEpoch sets the value of Epoch.
func (s *SubmitPoolAttesterSlashingsReqAttestation2DataTarget) SetEpoch(val string) {
	s.Epoch = val
}

// SetRoot sets the value of Root.
func (s *SubmitPoolAttesterSlashingsReqAttestation2DataTarget) SetRoot(val string) {
	s.Root = val
}

type SubmitPoolBLSToExecutionChangeBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// List of individual items that have failed.
	Failures []SubmitPoolBLSToExecutionChangeBadRequestFailuresItem `json:"failures"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolBLSToExecutionChangeBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolBLSToExecutionChangeBadRequest) GetMessage() string {
	return s.Message
}

// GetFailures returns the value of Failures.
func (s *SubmitPoolBLSToExecutionChangeBadRequest) GetFailures() []SubmitPoolBLSToExecutionChangeBadRequestFailuresItem {
	return s.Failures
}

// SetCode sets the value of Code.
func (s *SubmitPoolBLSToExecutionChangeBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolBLSToExecutionChangeBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetFailures sets the value of Failures.
func (s *SubmitPoolBLSToExecutionChangeBadRequest) SetFailures(val []SubmitPoolBLSToExecutionChangeBadRequestFailuresItem) {
	s.Failures = val
}

func (*SubmitPoolBLSToExecutionChangeBadRequest) submitPoolBLSToExecutionChangeRes() {}

type SubmitPoolBLSToExecutionChangeBadRequestFailuresItem struct {
	// Index of item in the request list that caused the error.
	Index float64 `json:"index"`
	// Message describing error.
	Message string `json:"message"`
}

// GetIndex returns the value of Index.
func (s *SubmitPoolBLSToExecutionChangeBadRequestFailuresItem) GetIndex() float64 {
	return s.Index
}

// GetMessage returns the value of Message.
func (s *SubmitPoolBLSToExecutionChangeBadRequestFailuresItem) GetMessage() string {
	return s.Message
}

// SetIndex sets the value of Index.
func (s *SubmitPoolBLSToExecutionChangeBadRequestFailuresItem) SetIndex(val float64) {
	s.Index = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolBLSToExecutionChangeBadRequestFailuresItem) SetMessage(val string) {
	s.Message = val
}

type SubmitPoolBLSToExecutionChangeInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolBLSToExecutionChangeInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolBLSToExecutionChangeInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitPoolBLSToExecutionChangeInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitPoolBLSToExecutionChangeInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolBLSToExecutionChangeInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitPoolBLSToExecutionChangeInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitPoolBLSToExecutionChangeInternalServerError) submitPoolBLSToExecutionChangeRes() {}

// SubmitPoolBLSToExecutionChangeOK is response for SubmitPoolBLSToExecutionChange operation.
type SubmitPoolBLSToExecutionChangeOK struct{}

func (*SubmitPoolBLSToExecutionChangeOK) submitPoolBLSToExecutionChangeRes() {}

// The [`SignedBLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/capella/beacon-chain.md#signedblstoexecutionchange) object from the CL spec.
type SubmitPoolBLSToExecutionChangeReqItem struct {
	// The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec.
	Message   SubmitPoolBLSToExecutionChangeReqItemMessage `json:"message"`
	Signature string                                       `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *SubmitPoolBLSToExecutionChangeReqItem) GetMessage() SubmitPoolBLSToExecutionChangeReqItemMessage {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *SubmitPoolBLSToExecutionChangeReqItem) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *SubmitPoolBLSToExecutionChangeReqItem) SetMessage(val SubmitPoolBLSToExecutionChangeReqItemMessage) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *SubmitPoolBLSToExecutionChangeReqItem) SetSignature(val string) {
	s.Signature = val
}

// The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec.
type SubmitPoolBLSToExecutionChangeReqItemMessage struct {
	// Index of the validator for which credentials will be changed.
	ValidatorIndex string `json:"validator_index"`
	// Public key of existing credentials.
	FromBlsPubkey string `json:"from_bls_pubkey"`
	// Execution address to which the credentials will be changed.
	ToExecutionAddress string `json:"to_execution_address"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *SubmitPoolBLSToExecutionChangeReqItemMessage) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetFromBlsPubkey returns the value of FromBlsPubkey.
func (s *SubmitPoolBLSToExecutionChangeReqItemMessage) GetFromBlsPubkey() string {
	return s.FromBlsPubkey
}

// GetToExecutionAddress returns the value of ToExecutionAddress.
func (s *SubmitPoolBLSToExecutionChangeReqItemMessage) GetToExecutionAddress() string {
	return s.ToExecutionAddress
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *SubmitPoolBLSToExecutionChangeReqItemMessage) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetFromBlsPubkey sets the value of FromBlsPubkey.
func (s *SubmitPoolBLSToExecutionChangeReqItemMessage) SetFromBlsPubkey(val string) {
	s.FromBlsPubkey = val
}

// SetToExecutionAddress sets the value of ToExecutionAddress.
func (s *SubmitPoolBLSToExecutionChangeReqItemMessage) SetToExecutionAddress(val string) {
	s.ToExecutionAddress = val
}

type SubmitPoolProposerSlashingsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolProposerSlashingsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolProposerSlashingsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitPoolProposerSlashingsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitPoolProposerSlashingsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolProposerSlashingsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitPoolProposerSlashingsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitPoolProposerSlashingsBadRequest) submitPoolProposerSlashingsRes() {}

type SubmitPoolProposerSlashingsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolProposerSlashingsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolProposerSlashingsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitPoolProposerSlashingsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitPoolProposerSlashingsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolProposerSlashingsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitPoolProposerSlashingsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitPoolProposerSlashingsInternalServerError) submitPoolProposerSlashingsRes() {}

// SubmitPoolProposerSlashingsOK is response for SubmitPoolProposerSlashings operation.
type SubmitPoolProposerSlashingsOK struct{}

func (*SubmitPoolProposerSlashingsOK) submitPoolProposerSlashingsRes() {}

// The [`ProposerSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#proposerslashing) object from the CL spec.
type SubmitPoolProposerSlashingsReq struct {
	// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
	SignedHeader1 SubmitPoolProposerSlashingsReqSignedHeader1 `json:"signed_header_1"`
	// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
	SignedHeader2 SubmitPoolProposerSlashingsReqSignedHeader2 `json:"signed_header_2"`
}

// GetSignedHeader1 returns the value of SignedHeader1.
func (s *SubmitPoolProposerSlashingsReq) GetSignedHeader1() SubmitPoolProposerSlashingsReqSignedHeader1 {
	return s.SignedHeader1
}

// GetSignedHeader2 returns the value of SignedHeader2.
func (s *SubmitPoolProposerSlashingsReq) GetSignedHeader2() SubmitPoolProposerSlashingsReqSignedHeader2 {
	return s.SignedHeader2
}

// SetSignedHeader1 sets the value of SignedHeader1.
func (s *SubmitPoolProposerSlashingsReq) SetSignedHeader1(val SubmitPoolProposerSlashingsReqSignedHeader1) {
	s.SignedHeader1 = val
}

// SetSignedHeader2 sets the value of SignedHeader2.
func (s *SubmitPoolProposerSlashingsReq) SetSignedHeader2(val SubmitPoolProposerSlashingsReqSignedHeader2) {
	s.SignedHeader2 = val
}

// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
type SubmitPoolProposerSlashingsReqSignedHeader1 struct {
	// The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec.
	Message   SubmitPoolProposerSlashingsReqSignedHeader1Message `json:"message"`
	Signature string                                             `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1) GetMessage() SubmitPoolProposerSlashingsReqSignedHeader1Message {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1) SetMessage(val SubmitPoolProposerSlashingsReqSignedHeader1Message) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1) SetSignature(val string) {
	s.Signature = val
}

// Merged schema.
type SubmitPoolProposerSlashingsReqSignedHeader1Message struct {
	// The slot to which this block corresponds.
	Slot string `json:"slot"`
	// Index of validator in validator registry.
	ProposerIndex string `json:"proposer_index"`
	// The signing merkle root of the parent `BeaconBlock`.
	ParentRoot string `json:"parent_root"`
	// The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
	StateRoot string `json:"state_root"`
	// The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`.
	BodyRoot string `json:"body_root"`
}

// GetSlot returns the value of Slot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1Message) GetSlot() string {
	return s.Slot
}

// GetProposerIndex returns the value of ProposerIndex.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1Message) GetProposerIndex() string {
	return s.ProposerIndex
}

// GetParentRoot returns the value of ParentRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1Message) GetParentRoot() string {
	return s.ParentRoot
}

// GetStateRoot returns the value of StateRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1Message) GetStateRoot() string {
	return s.StateRoot
}

// GetBodyRoot returns the value of BodyRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1Message) GetBodyRoot() string {
	return s.BodyRoot
}

// SetSlot sets the value of Slot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1Message) SetSlot(val string) {
	s.Slot = val
}

// SetProposerIndex sets the value of ProposerIndex.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1Message) SetProposerIndex(val string) {
	s.ProposerIndex = val
}

// SetParentRoot sets the value of ParentRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1Message) SetParentRoot(val string) {
	s.ParentRoot = val
}

// SetStateRoot sets the value of StateRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1Message) SetStateRoot(val string) {
	s.StateRoot = val
}

// SetBodyRoot sets the value of BodyRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader1Message) SetBodyRoot(val string) {
	s.BodyRoot = val
}

// The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec.
type SubmitPoolProposerSlashingsReqSignedHeader2 struct {
	// The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec.
	Message   SubmitPoolProposerSlashingsReqSignedHeader2Message `json:"message"`
	Signature string                                             `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2) GetMessage() SubmitPoolProposerSlashingsReqSignedHeader2Message {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2) SetMessage(val SubmitPoolProposerSlashingsReqSignedHeader2Message) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2) SetSignature(val string) {
	s.Signature = val
}

// Merged schema.
type SubmitPoolProposerSlashingsReqSignedHeader2Message struct {
	// The slot to which this block corresponds.
	Slot string `json:"slot"`
	// Index of validator in validator registry.
	ProposerIndex string `json:"proposer_index"`
	// The signing merkle root of the parent `BeaconBlock`.
	ParentRoot string `json:"parent_root"`
	// The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
	StateRoot string `json:"state_root"`
	// The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`.
	BodyRoot string `json:"body_root"`
}

// GetSlot returns the value of Slot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2Message) GetSlot() string {
	return s.Slot
}

// GetProposerIndex returns the value of ProposerIndex.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2Message) GetProposerIndex() string {
	return s.ProposerIndex
}

// GetParentRoot returns the value of ParentRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2Message) GetParentRoot() string {
	return s.ParentRoot
}

// GetStateRoot returns the value of StateRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2Message) GetStateRoot() string {
	return s.StateRoot
}

// GetBodyRoot returns the value of BodyRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2Message) GetBodyRoot() string {
	return s.BodyRoot
}

// SetSlot sets the value of Slot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2Message) SetSlot(val string) {
	s.Slot = val
}

// SetProposerIndex sets the value of ProposerIndex.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2Message) SetProposerIndex(val string) {
	s.ProposerIndex = val
}

// SetParentRoot sets the value of ParentRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2Message) SetParentRoot(val string) {
	s.ParentRoot = val
}

// SetStateRoot sets the value of StateRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2Message) SetStateRoot(val string) {
	s.StateRoot = val
}

// SetBodyRoot sets the value of BodyRoot.
func (s *SubmitPoolProposerSlashingsReqSignedHeader2Message) SetBodyRoot(val string) {
	s.BodyRoot = val
}

type SubmitPoolSyncCommitteeSignaturesBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// List of individual items that have failed.
	Failures []SubmitPoolSyncCommitteeSignaturesBadRequestFailuresItem `json:"failures"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolSyncCommitteeSignaturesBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolSyncCommitteeSignaturesBadRequest) GetMessage() string {
	return s.Message
}

// GetFailures returns the value of Failures.
func (s *SubmitPoolSyncCommitteeSignaturesBadRequest) GetFailures() []SubmitPoolSyncCommitteeSignaturesBadRequestFailuresItem {
	return s.Failures
}

// SetCode sets the value of Code.
func (s *SubmitPoolSyncCommitteeSignaturesBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolSyncCommitteeSignaturesBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetFailures sets the value of Failures.
func (s *SubmitPoolSyncCommitteeSignaturesBadRequest) SetFailures(val []SubmitPoolSyncCommitteeSignaturesBadRequestFailuresItem) {
	s.Failures = val
}

func (*SubmitPoolSyncCommitteeSignaturesBadRequest) submitPoolSyncCommitteeSignaturesRes() {}

type SubmitPoolSyncCommitteeSignaturesBadRequestFailuresItem struct {
	// Index of item in the request list that caused the error.
	Index float64 `json:"index"`
	// Message describing error.
	Message string `json:"message"`
}

// GetIndex returns the value of Index.
func (s *SubmitPoolSyncCommitteeSignaturesBadRequestFailuresItem) GetIndex() float64 {
	return s.Index
}

// GetMessage returns the value of Message.
func (s *SubmitPoolSyncCommitteeSignaturesBadRequestFailuresItem) GetMessage() string {
	return s.Message
}

// SetIndex sets the value of Index.
func (s *SubmitPoolSyncCommitteeSignaturesBadRequestFailuresItem) SetIndex(val float64) {
	s.Index = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolSyncCommitteeSignaturesBadRequestFailuresItem) SetMessage(val string) {
	s.Message = val
}

type SubmitPoolSyncCommitteeSignaturesInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolSyncCommitteeSignaturesInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolSyncCommitteeSignaturesInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitPoolSyncCommitteeSignaturesInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitPoolSyncCommitteeSignaturesInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolSyncCommitteeSignaturesInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitPoolSyncCommitteeSignaturesInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitPoolSyncCommitteeSignaturesInternalServerError) submitPoolSyncCommitteeSignaturesRes() {}

// SubmitPoolSyncCommitteeSignaturesOK is response for SubmitPoolSyncCommitteeSignatures operation.
type SubmitPoolSyncCommitteeSignaturesOK struct{}

func (*SubmitPoolSyncCommitteeSignaturesOK) submitPoolSyncCommitteeSignaturesRes() {}

type SubmitPoolSyncCommitteeSignaturesReqItem struct {
	Slot            string `json:"slot"`
	BeaconBlockRoot string `json:"beacon_block_root"`
	ValidatorIndex  string `json:"validator_index"`
	Signature       string `json:"signature"`
}

// GetSlot returns the value of Slot.
func (s *SubmitPoolSyncCommitteeSignaturesReqItem) GetSlot() string {
	return s.Slot
}

// GetBeaconBlockRoot returns the value of BeaconBlockRoot.
func (s *SubmitPoolSyncCommitteeSignaturesReqItem) GetBeaconBlockRoot() string {
	return s.BeaconBlockRoot
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *SubmitPoolSyncCommitteeSignaturesReqItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetSignature returns the value of Signature.
func (s *SubmitPoolSyncCommitteeSignaturesReqItem) GetSignature() string {
	return s.Signature
}

// SetSlot sets the value of Slot.
func (s *SubmitPoolSyncCommitteeSignaturesReqItem) SetSlot(val string) {
	s.Slot = val
}

// SetBeaconBlockRoot sets the value of BeaconBlockRoot.
func (s *SubmitPoolSyncCommitteeSignaturesReqItem) SetBeaconBlockRoot(val string) {
	s.BeaconBlockRoot = val
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *SubmitPoolSyncCommitteeSignaturesReqItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetSignature sets the value of Signature.
func (s *SubmitPoolSyncCommitteeSignaturesReqItem) SetSignature(val string) {
	s.Signature = val
}

type SubmitPoolVoluntaryExitBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolVoluntaryExitBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolVoluntaryExitBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitPoolVoluntaryExitBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitPoolVoluntaryExitBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolVoluntaryExitBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitPoolVoluntaryExitBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitPoolVoluntaryExitBadRequest) submitPoolVoluntaryExitRes() {}

type SubmitPoolVoluntaryExitInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitPoolVoluntaryExitInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitPoolVoluntaryExitInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitPoolVoluntaryExitInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitPoolVoluntaryExitInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitPoolVoluntaryExitInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitPoolVoluntaryExitInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitPoolVoluntaryExitInternalServerError) submitPoolVoluntaryExitRes() {}

// SubmitPoolVoluntaryExitOK is response for SubmitPoolVoluntaryExit operation.
type SubmitPoolVoluntaryExitOK struct{}

func (*SubmitPoolVoluntaryExitOK) submitPoolVoluntaryExitRes() {}

// The [`SignedVoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the CL spec.
type SubmitPoolVoluntaryExitReq struct {
	// The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.
	// 0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec.
	Message   SubmitPoolVoluntaryExitReqMessage `json:"message"`
	Signature string                            `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *SubmitPoolVoluntaryExitReq) GetMessage() SubmitPoolVoluntaryExitReqMessage {
	return s.Message
}

// GetSignature returns the value of Signature.
func (s *SubmitPoolVoluntaryExitReq) GetSignature() string {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *SubmitPoolVoluntaryExitReq) SetMessage(val SubmitPoolVoluntaryExitReqMessage) {
	s.Message = val
}

// SetSignature sets the value of Signature.
func (s *SubmitPoolVoluntaryExitReq) SetSignature(val string) {
	s.Signature = val
}

// The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.
// 0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec.
type SubmitPoolVoluntaryExitReqMessage struct {
	// Minimum epoch for processing exit.
	Epoch string `json:"epoch"`
	// Index of the exiting validator.
	ValidatorIndex string `json:"validator_index"`
}

// GetEpoch returns the value of Epoch.
func (s *SubmitPoolVoluntaryExitReqMessage) GetEpoch() string {
	return s.Epoch
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *SubmitPoolVoluntaryExitReqMessage) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// SetEpoch sets the value of Epoch.
func (s *SubmitPoolVoluntaryExitReqMessage) SetEpoch(val string) {
	s.Epoch = val
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *SubmitPoolVoluntaryExitReqMessage) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

type SubmitSyncCommitteeSelectionsBadRequest struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitSyncCommitteeSelectionsBadRequest) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitSyncCommitteeSelectionsBadRequest) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitSyncCommitteeSelectionsBadRequest) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitSyncCommitteeSelectionsBadRequest) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitSyncCommitteeSelectionsBadRequest) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitSyncCommitteeSelectionsBadRequest) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitSyncCommitteeSelectionsBadRequest) submitSyncCommitteeSelectionsRes() {}

type SubmitSyncCommitteeSelectionsInternalServerError struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitSyncCommitteeSelectionsInternalServerError) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitSyncCommitteeSelectionsInternalServerError) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitSyncCommitteeSelectionsInternalServerError) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitSyncCommitteeSelectionsInternalServerError) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitSyncCommitteeSelectionsInternalServerError) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitSyncCommitteeSelectionsInternalServerError) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitSyncCommitteeSelectionsInternalServerError) submitSyncCommitteeSelectionsRes() {}

type SubmitSyncCommitteeSelectionsNotImplemented struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitSyncCommitteeSelectionsNotImplemented) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitSyncCommitteeSelectionsNotImplemented) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitSyncCommitteeSelectionsNotImplemented) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitSyncCommitteeSelectionsNotImplemented) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitSyncCommitteeSelectionsNotImplemented) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitSyncCommitteeSelectionsNotImplemented) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitSyncCommitteeSelectionsNotImplemented) submitSyncCommitteeSelectionsRes() {}

type SubmitSyncCommitteeSelectionsOK struct {
	Data []SubmitSyncCommitteeSelectionsOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *SubmitSyncCommitteeSelectionsOK) GetData() []SubmitSyncCommitteeSelectionsOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *SubmitSyncCommitteeSelectionsOK) SetData(val []SubmitSyncCommitteeSelectionsOKDataItem) {
	s.Data = val
}

func (*SubmitSyncCommitteeSelectionsOK) submitSyncCommitteeSelectionsRes() {}

type SubmitSyncCommitteeSelectionsOKDataItem struct {
	// Index of the validator.
	ValidatorIndex string `json:"validator_index"`
	// The slot at which validator is assigned to produce a sync committee contribution.
	Slot string `json:"slot"`
	// SubcommitteeIndex to which the validator is assigned.
	SubcommitteeIndex string `json:"subcommittee_index"`
	// The `slot_signature` calculated by the validator for the upcoming sync committee slot.
	SelectionProof string `json:"selection_proof"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *SubmitSyncCommitteeSelectionsOKDataItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetSlot returns the value of Slot.
func (s *SubmitSyncCommitteeSelectionsOKDataItem) GetSlot() string {
	return s.Slot
}

// GetSubcommitteeIndex returns the value of SubcommitteeIndex.
func (s *SubmitSyncCommitteeSelectionsOKDataItem) GetSubcommitteeIndex() string {
	return s.SubcommitteeIndex
}

// GetSelectionProof returns the value of SelectionProof.
func (s *SubmitSyncCommitteeSelectionsOKDataItem) GetSelectionProof() string {
	return s.SelectionProof
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *SubmitSyncCommitteeSelectionsOKDataItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetSlot sets the value of Slot.
func (s *SubmitSyncCommitteeSelectionsOKDataItem) SetSlot(val string) {
	s.Slot = val
}

// SetSubcommitteeIndex sets the value of SubcommitteeIndex.
func (s *SubmitSyncCommitteeSelectionsOKDataItem) SetSubcommitteeIndex(val string) {
	s.SubcommitteeIndex = val
}

// SetSelectionProof sets the value of SelectionProof.
func (s *SubmitSyncCommitteeSelectionsOKDataItem) SetSelectionProof(val string) {
	s.SelectionProof = val
}

type SubmitSyncCommitteeSelectionsReqItem struct {
	// Index of the validator.
	ValidatorIndex string `json:"validator_index"`
	// The slot at which validator is assigned to produce a sync committee contribution.
	Slot string `json:"slot"`
	// SubcommitteeIndex to which the validator is assigned.
	SubcommitteeIndex string `json:"subcommittee_index"`
	// The `slot_signature` calculated by the validator for the upcoming sync committee slot.
	SelectionProof string `json:"selection_proof"`
}

// GetValidatorIndex returns the value of ValidatorIndex.
func (s *SubmitSyncCommitteeSelectionsReqItem) GetValidatorIndex() string {
	return s.ValidatorIndex
}

// GetSlot returns the value of Slot.
func (s *SubmitSyncCommitteeSelectionsReqItem) GetSlot() string {
	return s.Slot
}

// GetSubcommitteeIndex returns the value of SubcommitteeIndex.
func (s *SubmitSyncCommitteeSelectionsReqItem) GetSubcommitteeIndex() string {
	return s.SubcommitteeIndex
}

// GetSelectionProof returns the value of SelectionProof.
func (s *SubmitSyncCommitteeSelectionsReqItem) GetSelectionProof() string {
	return s.SelectionProof
}

// SetValidatorIndex sets the value of ValidatorIndex.
func (s *SubmitSyncCommitteeSelectionsReqItem) SetValidatorIndex(val string) {
	s.ValidatorIndex = val
}

// SetSlot sets the value of Slot.
func (s *SubmitSyncCommitteeSelectionsReqItem) SetSlot(val string) {
	s.Slot = val
}

// SetSubcommitteeIndex sets the value of SubcommitteeIndex.
func (s *SubmitSyncCommitteeSelectionsReqItem) SetSubcommitteeIndex(val string) {
	s.SubcommitteeIndex = val
}

// SetSelectionProof sets the value of SelectionProof.
func (s *SubmitSyncCommitteeSelectionsReqItem) SetSelectionProof(val string) {
	s.SelectionProof = val
}

type SubmitSyncCommitteeSelectionsServiceUnavailable struct {
	// Either specific error code in case of invalid request or http status code.
	Code float64 `json:"code"`
	// Message describing error.
	Message string `json:"message"`
	// Optional stacktraces, sent when node is in debug mode.
	Stacktraces []string `json:"stacktraces"`
}

// GetCode returns the value of Code.
func (s *SubmitSyncCommitteeSelectionsServiceUnavailable) GetCode() float64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *SubmitSyncCommitteeSelectionsServiceUnavailable) GetMessage() string {
	return s.Message
}

// GetStacktraces returns the value of Stacktraces.
func (s *SubmitSyncCommitteeSelectionsServiceUnavailable) GetStacktraces() []string {
	return s.Stacktraces
}

// SetCode sets the value of Code.
func (s *SubmitSyncCommitteeSelectionsServiceUnavailable) SetCode(val float64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *SubmitSyncCommitteeSelectionsServiceUnavailable) SetMessage(val string) {
	s.Message = val
}

// SetStacktraces sets the value of Stacktraces.
func (s *SubmitSyncCommitteeSelectionsServiceUnavailable) SetStacktraces(val []string) {
	s.Stacktraces = val
}

func (*SubmitSyncCommitteeSelectionsServiceUnavailable) submitSyncCommitteeSelectionsRes() {}
