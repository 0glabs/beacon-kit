// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// ReadOnlyValidators is an autogenerated mock type for the ReadOnlyValidators type
type ReadOnlyValidators[ValidatorT interface{}] struct {
	mock.Mock
}

type ReadOnlyValidators_Expecter[ValidatorT interface{}] struct {
	mock *mock.Mock
}

func (_m *ReadOnlyValidators[ValidatorT]) EXPECT() *ReadOnlyValidators_Expecter[ValidatorT] {
	return &ReadOnlyValidators_Expecter[ValidatorT]{mock: &_m.Mock}
}

// ValidatorByIndex provides a mock function with given fields: _a0
func (_m *ReadOnlyValidators[ValidatorT]) ValidatorByIndex(_a0 math.U64) (ValidatorT, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorByIndex")
	}

	var r0 ValidatorT
	var r1 error
	if rf, ok := ret.Get(0).(func(math.U64) (ValidatorT, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(math.U64) ValidatorT); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ValidatorT)
	}

	if rf, ok := ret.Get(1).(func(math.U64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyValidators_ValidatorByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorByIndex'
type ReadOnlyValidators_ValidatorByIndex_Call[ValidatorT interface{}] struct {
	*mock.Call
}

// ValidatorByIndex is a helper method to define mock.On call
//   - _a0 math.U64
func (_e *ReadOnlyValidators_Expecter[ValidatorT]) ValidatorByIndex(_a0 interface{}) *ReadOnlyValidators_ValidatorByIndex_Call[ValidatorT] {
	return &ReadOnlyValidators_ValidatorByIndex_Call[ValidatorT]{Call: _e.mock.On("ValidatorByIndex", _a0)}
}

func (_c *ReadOnlyValidators_ValidatorByIndex_Call[ValidatorT]) Run(run func(_a0 math.U64)) *ReadOnlyValidators_ValidatorByIndex_Call[ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *ReadOnlyValidators_ValidatorByIndex_Call[ValidatorT]) Return(_a0 ValidatorT, _a1 error) *ReadOnlyValidators_ValidatorByIndex_Call[ValidatorT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyValidators_ValidatorByIndex_Call[ValidatorT]) RunAndReturn(run func(math.U64) (ValidatorT, error)) *ReadOnlyValidators_ValidatorByIndex_Call[ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// ValidatorIndexByPubkey provides a mock function with given fields: _a0
func (_m *ReadOnlyValidators[ValidatorT]) ValidatorIndexByPubkey(_a0 bytes.B48) (math.U64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorIndexByPubkey")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(bytes.B48) (math.U64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(bytes.B48) math.U64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(bytes.B48) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyValidators_ValidatorIndexByPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorIndexByPubkey'
type ReadOnlyValidators_ValidatorIndexByPubkey_Call[ValidatorT interface{}] struct {
	*mock.Call
}

// ValidatorIndexByPubkey is a helper method to define mock.On call
//   - _a0 bytes.B48
func (_e *ReadOnlyValidators_Expecter[ValidatorT]) ValidatorIndexByPubkey(_a0 interface{}) *ReadOnlyValidators_ValidatorIndexByPubkey_Call[ValidatorT] {
	return &ReadOnlyValidators_ValidatorIndexByPubkey_Call[ValidatorT]{Call: _e.mock.On("ValidatorIndexByPubkey", _a0)}
}

func (_c *ReadOnlyValidators_ValidatorIndexByPubkey_Call[ValidatorT]) Run(run func(_a0 bytes.B48)) *ReadOnlyValidators_ValidatorIndexByPubkey_Call[ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B48))
	})
	return _c
}

func (_c *ReadOnlyValidators_ValidatorIndexByPubkey_Call[ValidatorT]) Return(_a0 math.U64, _a1 error) *ReadOnlyValidators_ValidatorIndexByPubkey_Call[ValidatorT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyValidators_ValidatorIndexByPubkey_Call[ValidatorT]) RunAndReturn(run func(bytes.B48) (math.U64, error)) *ReadOnlyValidators_ValidatorIndexByPubkey_Call[ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// NewReadOnlyValidators creates a new instance of ReadOnlyValidators. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadOnlyValidators[ValidatorT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadOnlyValidators[ValidatorT] {
	mock := &ReadOnlyValidators[ValidatorT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
