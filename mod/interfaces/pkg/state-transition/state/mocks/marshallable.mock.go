// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// Marshallable is an autogenerated mock type for the Marshallable type
type Marshallable[T interface{}, BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}] struct {
	mock.Mock
}

type Marshallable_Expecter[T interface{}, BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}] struct {
	mock *mock.Mock
}

func (_m *Marshallable[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) EXPECT() *Marshallable_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	return &Marshallable_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]{mock: &_m.Mock}
}

// HashTreeRoot provides a mock function with given fields:
func (_m *Marshallable[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Marshallable_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type Marshallable_HashTreeRoot_Call[T interface{}, BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}] struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *Marshallable_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) HashTreeRoot() *Marshallable_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	return &Marshallable_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *Marshallable_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Run(run func()) *Marshallable_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Marshallable_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Return(_a0 [32]byte, _a1 error) *Marshallable_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Marshallable_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) RunAndReturn(run func() ([32]byte, error)) *Marshallable_HashTreeRoot_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *Marshallable[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Marshallable_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type Marshallable_MarshalSSZ_Call[T interface{}, BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}] struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *Marshallable_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) MarshalSSZ() *Marshallable_MarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	return &Marshallable_MarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *Marshallable_MarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Run(run func()) *Marshallable_MarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Marshallable_MarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Return(_a0 []byte, _a1 error) *Marshallable_MarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Marshallable_MarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) RunAndReturn(run func() ([]byte, error)) *Marshallable_MarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZTo provides a mock function with given fields: _a0
func (_m *Marshallable[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) MarshalSSZTo(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZTo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Marshallable_MarshalSSZTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZTo'
type Marshallable_MarshalSSZTo_Call[T interface{}, BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}] struct {
	*mock.Call
}

// MarshalSSZTo is a helper method to define mock.On call
//   - _a0 []byte
func (_e *Marshallable_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) MarshalSSZTo(_a0 interface{}) *Marshallable_MarshalSSZTo_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	return &Marshallable_MarshalSSZTo_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]{Call: _e.mock.On("MarshalSSZTo", _a0)}
}

func (_c *Marshallable_MarshalSSZTo_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Run(run func(_a0 []byte)) *Marshallable_MarshalSSZTo_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Marshallable_MarshalSSZTo_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Return(_a0 []byte, _a1 error) *Marshallable_MarshalSSZTo_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Marshallable_MarshalSSZTo_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) RunAndReturn(run func([]byte) ([]byte, error)) *Marshallable_MarshalSSZTo_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: forkVersion, genesisValidatorsRoot, slot, fork, latestBlockHeader, blockRoots, stateRoots, eth1Data, eth1DepositIndex, latestExecutionPayloadHeader, validators, balances, randaoMixes, nextWithdrawalIndex, nextWithdrawalValidatorIndex, slashings, totalSlashing
func (_m *Marshallable[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) New(forkVersion uint32, genesisValidatorsRoot bytes.B32, slot math.U64, fork ForkT, latestBlockHeader BeaconBlockHeaderT, blockRoots []bytes.B32, stateRoots []bytes.B32, eth1Data Eth1DataT, eth1DepositIndex uint64, latestExecutionPayloadHeader ExecutionPayloadHeaderT, validators []ValidatorT, balances []uint64, randaoMixes []bytes.B32, nextWithdrawalIndex uint64, nextWithdrawalValidatorIndex math.U64, slashings []uint64, totalSlashing math.U64) (T, error) {
	ret := _m.Called(forkVersion, genesisValidatorsRoot, slot, fork, latestBlockHeader, blockRoots, stateRoots, eth1Data, eth1DepositIndex, latestExecutionPayloadHeader, validators, balances, randaoMixes, nextWithdrawalIndex, nextWithdrawalValidatorIndex, slashings, totalSlashing)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32, bytes.B32, math.U64, ForkT, BeaconBlockHeaderT, []bytes.B32, []bytes.B32, Eth1DataT, uint64, ExecutionPayloadHeaderT, []ValidatorT, []uint64, []bytes.B32, uint64, math.U64, []uint64, math.U64) (T, error)); ok {
		return rf(forkVersion, genesisValidatorsRoot, slot, fork, latestBlockHeader, blockRoots, stateRoots, eth1Data, eth1DepositIndex, latestExecutionPayloadHeader, validators, balances, randaoMixes, nextWithdrawalIndex, nextWithdrawalValidatorIndex, slashings, totalSlashing)
	}
	if rf, ok := ret.Get(0).(func(uint32, bytes.B32, math.U64, ForkT, BeaconBlockHeaderT, []bytes.B32, []bytes.B32, Eth1DataT, uint64, ExecutionPayloadHeaderT, []ValidatorT, []uint64, []bytes.B32, uint64, math.U64, []uint64, math.U64) T); ok {
		r0 = rf(forkVersion, genesisValidatorsRoot, slot, fork, latestBlockHeader, blockRoots, stateRoots, eth1Data, eth1DepositIndex, latestExecutionPayloadHeader, validators, balances, randaoMixes, nextWithdrawalIndex, nextWithdrawalValidatorIndex, slashings, totalSlashing)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(uint32, bytes.B32, math.U64, ForkT, BeaconBlockHeaderT, []bytes.B32, []bytes.B32, Eth1DataT, uint64, ExecutionPayloadHeaderT, []ValidatorT, []uint64, []bytes.B32, uint64, math.U64, []uint64, math.U64) error); ok {
		r1 = rf(forkVersion, genesisValidatorsRoot, slot, fork, latestBlockHeader, blockRoots, stateRoots, eth1Data, eth1DepositIndex, latestExecutionPayloadHeader, validators, balances, randaoMixes, nextWithdrawalIndex, nextWithdrawalValidatorIndex, slashings, totalSlashing)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Marshallable_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type Marshallable_New_Call[T interface{}, BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}] struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - forkVersion uint32
//   - genesisValidatorsRoot bytes.B32
//   - slot math.U64
//   - fork ForkT
//   - latestBlockHeader BeaconBlockHeaderT
//   - blockRoots []bytes.B32
//   - stateRoots []bytes.B32
//   - eth1Data Eth1DataT
//   - eth1DepositIndex uint64
//   - latestExecutionPayloadHeader ExecutionPayloadHeaderT
//   - validators []ValidatorT
//   - balances []uint64
//   - randaoMixes []bytes.B32
//   - nextWithdrawalIndex uint64
//   - nextWithdrawalValidatorIndex math.U64
//   - slashings []uint64
//   - totalSlashing math.U64
func (_e *Marshallable_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) New(forkVersion interface{}, genesisValidatorsRoot interface{}, slot interface{}, fork interface{}, latestBlockHeader interface{}, blockRoots interface{}, stateRoots interface{}, eth1Data interface{}, eth1DepositIndex interface{}, latestExecutionPayloadHeader interface{}, validators interface{}, balances interface{}, randaoMixes interface{}, nextWithdrawalIndex interface{}, nextWithdrawalValidatorIndex interface{}, slashings interface{}, totalSlashing interface{}) *Marshallable_New_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	return &Marshallable_New_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]{Call: _e.mock.On("New", forkVersion, genesisValidatorsRoot, slot, fork, latestBlockHeader, blockRoots, stateRoots, eth1Data, eth1DepositIndex, latestExecutionPayloadHeader, validators, balances, randaoMixes, nextWithdrawalIndex, nextWithdrawalValidatorIndex, slashings, totalSlashing)}
}

func (_c *Marshallable_New_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Run(run func(forkVersion uint32, genesisValidatorsRoot bytes.B32, slot math.U64, fork ForkT, latestBlockHeader BeaconBlockHeaderT, blockRoots []bytes.B32, stateRoots []bytes.B32, eth1Data Eth1DataT, eth1DepositIndex uint64, latestExecutionPayloadHeader ExecutionPayloadHeaderT, validators []ValidatorT, balances []uint64, randaoMixes []bytes.B32, nextWithdrawalIndex uint64, nextWithdrawalValidatorIndex math.U64, slashings []uint64, totalSlashing math.U64)) *Marshallable_New_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32), args[1].(bytes.B32), args[2].(math.U64), args[3].(ForkT), args[4].(BeaconBlockHeaderT), args[5].([]bytes.B32), args[6].([]bytes.B32), args[7].(Eth1DataT), args[8].(uint64), args[9].(ExecutionPayloadHeaderT), args[10].([]ValidatorT), args[11].([]uint64), args[12].([]bytes.B32), args[13].(uint64), args[14].(math.U64), args[15].([]uint64), args[16].(math.U64))
	})
	return _c
}

func (_c *Marshallable_New_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Return(_a0 T, _a1 error) *Marshallable_New_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Marshallable_New_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) RunAndReturn(run func(uint32, bytes.B32, math.U64, ForkT, BeaconBlockHeaderT, []bytes.B32, []bytes.B32, Eth1DataT, uint64, ExecutionPayloadHeaderT, []ValidatorT, []uint64, []bytes.B32, uint64, math.U64, []uint64, math.U64) (T, error)) *Marshallable_New_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// SizeSSZ provides a mock function with given fields:
func (_m *Marshallable[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) SizeSSZ() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeSSZ")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Marshallable_SizeSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SizeSSZ'
type Marshallable_SizeSSZ_Call[T interface{}, BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}] struct {
	*mock.Call
}

// SizeSSZ is a helper method to define mock.On call
func (_e *Marshallable_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) SizeSSZ() *Marshallable_SizeSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	return &Marshallable_SizeSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]{Call: _e.mock.On("SizeSSZ")}
}

func (_c *Marshallable_SizeSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Run(run func()) *Marshallable_SizeSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Marshallable_SizeSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Return(_a0 int) *Marshallable_SizeSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Marshallable_SizeSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) RunAndReturn(run func() int) *Marshallable_SizeSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: _a0
func (_m *Marshallable[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) UnmarshalSSZ(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Marshallable_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type Marshallable_UnmarshalSSZ_Call[T interface{}, BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}] struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - _a0 []byte
func (_e *Marshallable_Expecter[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) UnmarshalSSZ(_a0 interface{}) *Marshallable_UnmarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	return &Marshallable_UnmarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]{Call: _e.mock.On("UnmarshalSSZ", _a0)}
}

func (_c *Marshallable_UnmarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Run(run func(_a0 []byte)) *Marshallable_UnmarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Marshallable_UnmarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) Return(_a0 error) *Marshallable_UnmarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Marshallable_UnmarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]) RunAndReturn(run func([]byte) error) *Marshallable_UnmarshalSSZ_Call[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	_c.Call.Return(run)
	return _c
}

// NewMarshallable creates a new instance of Marshallable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMarshallable[T interface{}, BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ForkT interface{}, ValidatorT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Marshallable[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT] {
	mock := &Marshallable[T, BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ForkT, ValidatorT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
