// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// ReadOnlyBeaconState is an autogenerated mock type for the ReadOnlyBeaconState type
type ReadOnlyBeaconState[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	mock.Mock
}

type ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	mock *mock.Mock
}

func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) EXPECT() *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{mock: &_m.Mock}
}

// ExpectedWithdrawals provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) ExpectedWithdrawals() ([]WithdrawalT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExpectedWithdrawals")
	}

	var r0 []WithdrawalT
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]WithdrawalT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []WithdrawalT); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]WithdrawalT)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_ExpectedWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpectedWithdrawals'
type ReadOnlyBeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// ExpectedWithdrawals is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) ExpectedWithdrawals() *ReadOnlyBeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("ExpectedWithdrawals")}
}

func (_c *ReadOnlyBeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 []WithdrawalT, _a1 error) *ReadOnlyBeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() ([]WithdrawalT, error)) *ReadOnlyBeaconState_ExpectedWithdrawals_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: _a0
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetBalance(_a0 math.U64) (math.U64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(math.U64) (math.U64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(math.U64) math.U64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(math.U64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type ReadOnlyBeaconState_GetBalance_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - _a0 math.U64
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetBalance(_a0 interface{}) *ReadOnlyBeaconState_GetBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetBalance", _a0)}
}

func (_c *ReadOnlyBeaconState_GetBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func(_a0 math.U64)) *ReadOnlyBeaconState_GetBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 math.U64, _a1 error) *ReadOnlyBeaconState_GetBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func(math.U64) (math.U64, error)) *ReadOnlyBeaconState_GetBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetBlockRootAtIndex provides a mock function with given fields: _a0
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetBlockRootAtIndex(_a0 uint64) (bytes.B32, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockRootAtIndex")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (bytes.B32, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) bytes.B32); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetBlockRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockRootAtIndex'
type ReadOnlyBeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetBlockRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetBlockRootAtIndex(_a0 interface{}) *ReadOnlyBeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetBlockRootAtIndex", _a0)}
}

func (_c *ReadOnlyBeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func(_a0 uint64)) *ReadOnlyBeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 bytes.B32, _a1 error) *ReadOnlyBeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func(uint64) (bytes.B32, error)) *ReadOnlyBeaconState_GetBlockRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetEth1Data provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetEth1Data() (Eth1DataT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1Data")
	}

	var r0 Eth1DataT
	var r1 error
	if rf, ok := ret.Get(0).(func() (Eth1DataT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Eth1DataT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Eth1DataT)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1Data'
type ReadOnlyBeaconState_GetEth1Data_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetEth1Data is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetEth1Data() *ReadOnlyBeaconState_GetEth1Data_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetEth1Data_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetEth1Data")}
}

func (_c *ReadOnlyBeaconState_GetEth1Data_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetEth1Data_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetEth1Data_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 Eth1DataT, _a1 error) *ReadOnlyBeaconState_GetEth1Data_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetEth1Data_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() (Eth1DataT, error)) *ReadOnlyBeaconState_GetEth1Data_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetEth1DepositIndex provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetEth1DepositIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1DepositIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetEth1DepositIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1DepositIndex'
type ReadOnlyBeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetEth1DepositIndex is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetEth1DepositIndex() *ReadOnlyBeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetEth1DepositIndex")}
}

func (_c *ReadOnlyBeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 uint64, _a1 error) *ReadOnlyBeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() (uint64, error)) *ReadOnlyBeaconState_GetEth1DepositIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetGenesisValidatorsRoot provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetGenesisValidatorsRoot() (bytes.B32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGenesisValidatorsRoot")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func() (bytes.B32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetGenesisValidatorsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGenesisValidatorsRoot'
type ReadOnlyBeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetGenesisValidatorsRoot is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetGenesisValidatorsRoot() *ReadOnlyBeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetGenesisValidatorsRoot")}
}

func (_c *ReadOnlyBeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 bytes.B32, _a1 error) *ReadOnlyBeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() (bytes.B32, error)) *ReadOnlyBeaconState_GetGenesisValidatorsRoot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeader provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetLatestBlockHeader() (BeaconBlockHeaderT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 BeaconBlockHeaderT
	var r1 error
	if rf, ok := ret.Get(0).(func() (BeaconBlockHeaderT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() BeaconBlockHeaderT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(BeaconBlockHeaderT)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
type ReadOnlyBeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetLatestBlockHeader is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetLatestBlockHeader() *ReadOnlyBeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetLatestBlockHeader")}
}

func (_c *ReadOnlyBeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 BeaconBlockHeaderT, _a1 error) *ReadOnlyBeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() (BeaconBlockHeaderT, error)) *ReadOnlyBeaconState_GetLatestBlockHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetLatestExecutionPayloadHeader provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetLatestExecutionPayloadHeader() (ExecutionPayloadHeaderT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestExecutionPayloadHeader")
	}

	var r0 ExecutionPayloadHeaderT
	var r1 error
	if rf, ok := ret.Get(0).(func() (ExecutionPayloadHeaderT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ExecutionPayloadHeaderT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ExecutionPayloadHeaderT)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetLatestExecutionPayloadHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestExecutionPayloadHeader'
type ReadOnlyBeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetLatestExecutionPayloadHeader is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetLatestExecutionPayloadHeader() *ReadOnlyBeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetLatestExecutionPayloadHeader")}
}

func (_c *ReadOnlyBeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 ExecutionPayloadHeaderT, _a1 error) *ReadOnlyBeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() (ExecutionPayloadHeaderT, error)) *ReadOnlyBeaconState_GetLatestExecutionPayloadHeader_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetNextWithdrawalIndex provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetNextWithdrawalIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextWithdrawalIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetNextWithdrawalIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWithdrawalIndex'
type ReadOnlyBeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetNextWithdrawalIndex is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetNextWithdrawalIndex() *ReadOnlyBeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetNextWithdrawalIndex")}
}

func (_c *ReadOnlyBeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 uint64, _a1 error) *ReadOnlyBeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() (uint64, error)) *ReadOnlyBeaconState_GetNextWithdrawalIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetNextWithdrawalValidatorIndex provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetNextWithdrawalValidatorIndex() (math.U64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextWithdrawalValidatorIndex")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.U64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetNextWithdrawalValidatorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWithdrawalValidatorIndex'
type ReadOnlyBeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetNextWithdrawalValidatorIndex is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetNextWithdrawalValidatorIndex() *ReadOnlyBeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetNextWithdrawalValidatorIndex")}
}

func (_c *ReadOnlyBeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 math.U64, _a1 error) *ReadOnlyBeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() (math.U64, error)) *ReadOnlyBeaconState_GetNextWithdrawalValidatorIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetRandaoMixAtIndex provides a mock function with given fields: _a0
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetRandaoMixAtIndex(_a0 uint64) (bytes.B32, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRandaoMixAtIndex")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (bytes.B32, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) bytes.B32); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetRandaoMixAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandaoMixAtIndex'
type ReadOnlyBeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetRandaoMixAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetRandaoMixAtIndex(_a0 interface{}) *ReadOnlyBeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetRandaoMixAtIndex", _a0)}
}

func (_c *ReadOnlyBeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func(_a0 uint64)) *ReadOnlyBeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 bytes.B32, _a1 error) *ReadOnlyBeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func(uint64) (bytes.B32, error)) *ReadOnlyBeaconState_GetRandaoMixAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetSlot provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetSlot() (math.U64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlot")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.U64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
type ReadOnlyBeaconState_GetSlot_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetSlot is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetSlot() *ReadOnlyBeaconState_GetSlot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetSlot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetSlot")}
}

func (_c *ReadOnlyBeaconState_GetSlot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetSlot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetSlot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 math.U64, _a1 error) *ReadOnlyBeaconState_GetSlot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetSlot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() (math.U64, error)) *ReadOnlyBeaconState_GetSlot_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetTotalActiveBalances provides a mock function with given fields: _a0
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetTotalActiveBalances(_a0 uint64) (math.U64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalActiveBalances")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (math.U64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) math.U64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetTotalActiveBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalActiveBalances'
type ReadOnlyBeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetTotalActiveBalances is a helper method to define mock.On call
//   - _a0 uint64
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetTotalActiveBalances(_a0 interface{}) *ReadOnlyBeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetTotalActiveBalances", _a0)}
}

func (_c *ReadOnlyBeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func(_a0 uint64)) *ReadOnlyBeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 math.U64, _a1 error) *ReadOnlyBeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func(uint64) (math.U64, error)) *ReadOnlyBeaconState_GetTotalActiveBalances_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetTotalSlashing provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetTotalSlashing() (math.U64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalSlashing")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.U64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetTotalSlashing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalSlashing'
type ReadOnlyBeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetTotalSlashing is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetTotalSlashing() *ReadOnlyBeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetTotalSlashing")}
}

func (_c *ReadOnlyBeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 math.U64, _a1 error) *ReadOnlyBeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() (math.U64, error)) *ReadOnlyBeaconState_GetTotalSlashing_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetTotalValidators provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetTotalValidators() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalValidators")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetTotalValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalValidators'
type ReadOnlyBeaconState_GetTotalValidators_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetTotalValidators is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetTotalValidators() *ReadOnlyBeaconState_GetTotalValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetTotalValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetTotalValidators")}
}

func (_c *ReadOnlyBeaconState_GetTotalValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetTotalValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetTotalValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 uint64, _a1 error) *ReadOnlyBeaconState_GetTotalValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetTotalValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() (uint64, error)) *ReadOnlyBeaconState_GetTotalValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetValidators provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetValidators() ([]ValidatorT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidators")
	}

	var r0 []ValidatorT
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]ValidatorT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []ValidatorT); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ValidatorT)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidators'
type ReadOnlyBeaconState_GetValidators_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetValidators is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetValidators() *ReadOnlyBeaconState_GetValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetValidators")}
}

func (_c *ReadOnlyBeaconState_GetValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 []ValidatorT, _a1 error) *ReadOnlyBeaconState_GetValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() ([]ValidatorT, error)) *ReadOnlyBeaconState_GetValidators_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// GetValidatorsByEffectiveBalance provides a mock function with given fields:
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetValidatorsByEffectiveBalance() ([]ValidatorT, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorsByEffectiveBalance")
	}

	var r0 []ValidatorT
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]ValidatorT, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []ValidatorT); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ValidatorT)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_GetValidatorsByEffectiveBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatorsByEffectiveBalance'
type ReadOnlyBeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetValidatorsByEffectiveBalance is a helper method to define mock.On call
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) GetValidatorsByEffectiveBalance() *ReadOnlyBeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("GetValidatorsByEffectiveBalance")}
}

func (_c *ReadOnlyBeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func()) *ReadOnlyBeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadOnlyBeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 []ValidatorT, _a1 error) *ReadOnlyBeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func() ([]ValidatorT, error)) *ReadOnlyBeaconState_GetValidatorsByEffectiveBalance_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// StateRootAtIndex provides a mock function with given fields: _a0
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) StateRootAtIndex(_a0 uint64) (bytes.B32, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for StateRootAtIndex")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (bytes.B32, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) bytes.B32); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_StateRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateRootAtIndex'
type ReadOnlyBeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// StateRootAtIndex is a helper method to define mock.On call
//   - _a0 uint64
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) StateRootAtIndex(_a0 interface{}) *ReadOnlyBeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("StateRootAtIndex", _a0)}
}

func (_c *ReadOnlyBeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func(_a0 uint64)) *ReadOnlyBeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ReadOnlyBeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 bytes.B32, _a1 error) *ReadOnlyBeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func(uint64) (bytes.B32, error)) *ReadOnlyBeaconState_StateRootAtIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// ValidatorByIndex provides a mock function with given fields: _a0
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) ValidatorByIndex(_a0 math.U64) (ValidatorT, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorByIndex")
	}

	var r0 ValidatorT
	var r1 error
	if rf, ok := ret.Get(0).(func(math.U64) (ValidatorT, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(math.U64) ValidatorT); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ValidatorT)
	}

	if rf, ok := ret.Get(1).(func(math.U64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_ValidatorByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorByIndex'
type ReadOnlyBeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// ValidatorByIndex is a helper method to define mock.On call
//   - _a0 math.U64
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) ValidatorByIndex(_a0 interface{}) *ReadOnlyBeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("ValidatorByIndex", _a0)}
}

func (_c *ReadOnlyBeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func(_a0 math.U64)) *ReadOnlyBeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *ReadOnlyBeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 ValidatorT, _a1 error) *ReadOnlyBeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func(math.U64) (ValidatorT, error)) *ReadOnlyBeaconState_ValidatorByIndex_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// ValidatorIndexByCometBFTAddress provides a mock function with given fields: cometBFTAddress
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) ValidatorIndexByCometBFTAddress(cometBFTAddress []byte) (math.U64, error) {
	ret := _m.Called(cometBFTAddress)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorIndexByCometBFTAddress")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (math.U64, error)); ok {
		return rf(cometBFTAddress)
	}
	if rf, ok := ret.Get(0).(func([]byte) math.U64); ok {
		r0 = rf(cometBFTAddress)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(cometBFTAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_ValidatorIndexByCometBFTAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorIndexByCometBFTAddress'
type ReadOnlyBeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// ValidatorIndexByCometBFTAddress is a helper method to define mock.On call
//   - cometBFTAddress []byte
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) ValidatorIndexByCometBFTAddress(cometBFTAddress interface{}) *ReadOnlyBeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("ValidatorIndexByCometBFTAddress", cometBFTAddress)}
}

func (_c *ReadOnlyBeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func(cometBFTAddress []byte)) *ReadOnlyBeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ReadOnlyBeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 math.U64, _a1 error) *ReadOnlyBeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func([]byte) (math.U64, error)) *ReadOnlyBeaconState_ValidatorIndexByCometBFTAddress_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// ValidatorIndexByPubkey provides a mock function with given fields: _a0
func (_m *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) ValidatorIndexByPubkey(_a0 bytes.B48) (math.U64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorIndexByPubkey")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(bytes.B48) (math.U64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(bytes.B48) math.U64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(bytes.B48) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOnlyBeaconState_ValidatorIndexByPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorIndexByPubkey'
type ReadOnlyBeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// ValidatorIndexByPubkey is a helper method to define mock.On call
//   - _a0 bytes.B48
func (_e *ReadOnlyBeaconState_Expecter[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) ValidatorIndexByPubkey(_a0 interface{}) *ReadOnlyBeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	return &ReadOnlyBeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{Call: _e.mock.On("ValidatorIndexByPubkey", _a0)}
}

func (_c *ReadOnlyBeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Run(run func(_a0 bytes.B48)) *ReadOnlyBeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B48))
	})
	return _c
}

func (_c *ReadOnlyBeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) Return(_a0 math.U64, _a1 error) *ReadOnlyBeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadOnlyBeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]) RunAndReturn(run func(bytes.B48) (math.U64, error)) *ReadOnlyBeaconState_ValidatorIndexByPubkey_Call[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// NewReadOnlyBeaconState creates a new instance of ReadOnlyBeaconState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadOnlyBeaconState[BeaconBlockHeaderT interface{}, Eth1DataT interface{}, ExecutionPayloadHeaderT interface{}, ValidatorT interface{}, WithdrawalT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT] {
	mock := &ReadOnlyBeaconState[BeaconBlockHeaderT, Eth1DataT, ExecutionPayloadHeaderT, ValidatorT, WithdrawalT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
