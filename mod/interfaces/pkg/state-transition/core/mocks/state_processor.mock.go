// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"

	transition "github.com/berachain/beacon-kit/mod/primitives/pkg/transition"
)

// StateProcessor is an autogenerated mock type for the StateProcessor type
type StateProcessor[BeaconBlockT interface{}, BeaconStateT interface{}, BlobSidecarsT interface{}, ContextT interface{}, DepositT interface{}, ExecutionPayloadHeaderT interface{}] struct {
	mock.Mock
}

type StateProcessor_Expecter[BeaconBlockT interface{}, BeaconStateT interface{}, BlobSidecarsT interface{}, ContextT interface{}, DepositT interface{}, ExecutionPayloadHeaderT interface{}] struct {
	mock *mock.Mock
}

func (_m *StateProcessor[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) EXPECT() *StateProcessor_Expecter[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	return &StateProcessor_Expecter[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]{mock: &_m.Mock}
}

// InitializePreminedBeaconStateFromEth1 provides a mock function with given fields: st, deposits, payloadHeader, version
func (_m *StateProcessor[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) InitializePreminedBeaconStateFromEth1(st BeaconStateT, deposits []DepositT, payloadHeader ExecutionPayloadHeaderT, version bytes.B4) (transition.ValidatorUpdates, error) {
	ret := _m.Called(st, deposits, payloadHeader, version)

	if len(ret) == 0 {
		panic("no return value specified for InitializePreminedBeaconStateFromEth1")
	}

	var r0 transition.ValidatorUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func(BeaconStateT, []DepositT, ExecutionPayloadHeaderT, bytes.B4) (transition.ValidatorUpdates, error)); ok {
		return rf(st, deposits, payloadHeader, version)
	}
	if rf, ok := ret.Get(0).(func(BeaconStateT, []DepositT, ExecutionPayloadHeaderT, bytes.B4) transition.ValidatorUpdates); ok {
		r0 = rf(st, deposits, payloadHeader, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transition.ValidatorUpdates)
		}
	}

	if rf, ok := ret.Get(1).(func(BeaconStateT, []DepositT, ExecutionPayloadHeaderT, bytes.B4) error); ok {
		r1 = rf(st, deposits, payloadHeader, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateProcessor_InitializePreminedBeaconStateFromEth1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializePreminedBeaconStateFromEth1'
type StateProcessor_InitializePreminedBeaconStateFromEth1_Call[BeaconBlockT interface{}, BeaconStateT interface{}, BlobSidecarsT interface{}, ContextT interface{}, DepositT interface{}, ExecutionPayloadHeaderT interface{}] struct {
	*mock.Call
}

// InitializePreminedBeaconStateFromEth1 is a helper method to define mock.On call
//   - st BeaconStateT
//   - deposits []DepositT
//   - payloadHeader ExecutionPayloadHeaderT
//   - version bytes.B4
func (_e *StateProcessor_Expecter[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) InitializePreminedBeaconStateFromEth1(st interface{}, deposits interface{}, payloadHeader interface{}, version interface{}) *StateProcessor_InitializePreminedBeaconStateFromEth1_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	return &StateProcessor_InitializePreminedBeaconStateFromEth1_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]{Call: _e.mock.On("InitializePreminedBeaconStateFromEth1", st, deposits, payloadHeader, version)}
}

func (_c *StateProcessor_InitializePreminedBeaconStateFromEth1_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) Run(run func(st BeaconStateT, deposits []DepositT, payloadHeader ExecutionPayloadHeaderT, version bytes.B4)) *StateProcessor_InitializePreminedBeaconStateFromEth1_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BeaconStateT), args[1].([]DepositT), args[2].(ExecutionPayloadHeaderT), args[3].(bytes.B4))
	})
	return _c
}

func (_c *StateProcessor_InitializePreminedBeaconStateFromEth1_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) Return(_a0 transition.ValidatorUpdates, _a1 error) *StateProcessor_InitializePreminedBeaconStateFromEth1_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateProcessor_InitializePreminedBeaconStateFromEth1_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) RunAndReturn(run func(BeaconStateT, []DepositT, ExecutionPayloadHeaderT, bytes.B4) (transition.ValidatorUpdates, error)) *StateProcessor_InitializePreminedBeaconStateFromEth1_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Return(run)
	return _c
}

// ProcessBlock provides a mock function with given fields: ctx, st, blk
func (_m *StateProcessor[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) ProcessBlock(ctx ContextT, st BeaconStateT, blk BeaconBlockT) error {
	ret := _m.Called(ctx, st, blk)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ContextT, BeaconStateT, BeaconBlockT) error); ok {
		r0 = rf(ctx, st, blk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateProcessor_ProcessBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessBlock'
type StateProcessor_ProcessBlock_Call[BeaconBlockT interface{}, BeaconStateT interface{}, BlobSidecarsT interface{}, ContextT interface{}, DepositT interface{}, ExecutionPayloadHeaderT interface{}] struct {
	*mock.Call
}

// ProcessBlock is a helper method to define mock.On call
//   - ctx ContextT
//   - st BeaconStateT
//   - blk BeaconBlockT
func (_e *StateProcessor_Expecter[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) ProcessBlock(ctx interface{}, st interface{}, blk interface{}) *StateProcessor_ProcessBlock_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	return &StateProcessor_ProcessBlock_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]{Call: _e.mock.On("ProcessBlock", ctx, st, blk)}
}

func (_c *StateProcessor_ProcessBlock_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) Run(run func(ctx ContextT, st BeaconStateT, blk BeaconBlockT)) *StateProcessor_ProcessBlock_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ContextT), args[1].(BeaconStateT), args[2].(BeaconBlockT))
	})
	return _c
}

func (_c *StateProcessor_ProcessBlock_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) Return(_a0 error) *StateProcessor_ProcessBlock_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateProcessor_ProcessBlock_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) RunAndReturn(run func(ContextT, BeaconStateT, BeaconBlockT) error) *StateProcessor_ProcessBlock_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Return(run)
	return _c
}

// ProcessSlots provides a mock function with given fields: st, slot
func (_m *StateProcessor[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) ProcessSlots(st BeaconStateT, slot math.U64) (transition.ValidatorUpdates, error) {
	ret := _m.Called(st, slot)

	if len(ret) == 0 {
		panic("no return value specified for ProcessSlots")
	}

	var r0 transition.ValidatorUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func(BeaconStateT, math.U64) (transition.ValidatorUpdates, error)); ok {
		return rf(st, slot)
	}
	if rf, ok := ret.Get(0).(func(BeaconStateT, math.U64) transition.ValidatorUpdates); ok {
		r0 = rf(st, slot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transition.ValidatorUpdates)
		}
	}

	if rf, ok := ret.Get(1).(func(BeaconStateT, math.U64) error); ok {
		r1 = rf(st, slot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateProcessor_ProcessSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessSlots'
type StateProcessor_ProcessSlots_Call[BeaconBlockT interface{}, BeaconStateT interface{}, BlobSidecarsT interface{}, ContextT interface{}, DepositT interface{}, ExecutionPayloadHeaderT interface{}] struct {
	*mock.Call
}

// ProcessSlots is a helper method to define mock.On call
//   - st BeaconStateT
//   - slot math.U64
func (_e *StateProcessor_Expecter[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) ProcessSlots(st interface{}, slot interface{}) *StateProcessor_ProcessSlots_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	return &StateProcessor_ProcessSlots_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]{Call: _e.mock.On("ProcessSlots", st, slot)}
}

func (_c *StateProcessor_ProcessSlots_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) Run(run func(st BeaconStateT, slot math.U64)) *StateProcessor_ProcessSlots_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BeaconStateT), args[1].(math.U64))
	})
	return _c
}

func (_c *StateProcessor_ProcessSlots_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) Return(_a0 transition.ValidatorUpdates, _a1 error) *StateProcessor_ProcessSlots_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateProcessor_ProcessSlots_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) RunAndReturn(run func(BeaconStateT, math.U64) (transition.ValidatorUpdates, error)) *StateProcessor_ProcessSlots_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Return(run)
	return _c
}

// Transition provides a mock function with given fields: ctx, st, blk
func (_m *StateProcessor[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) Transition(ctx ContextT, st BeaconStateT, blk BeaconBlockT) (transition.ValidatorUpdates, error) {
	ret := _m.Called(ctx, st, blk)

	if len(ret) == 0 {
		panic("no return value specified for Transition")
	}

	var r0 transition.ValidatorUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func(ContextT, BeaconStateT, BeaconBlockT) (transition.ValidatorUpdates, error)); ok {
		return rf(ctx, st, blk)
	}
	if rf, ok := ret.Get(0).(func(ContextT, BeaconStateT, BeaconBlockT) transition.ValidatorUpdates); ok {
		r0 = rf(ctx, st, blk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transition.ValidatorUpdates)
		}
	}

	if rf, ok := ret.Get(1).(func(ContextT, BeaconStateT, BeaconBlockT) error); ok {
		r1 = rf(ctx, st, blk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateProcessor_Transition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transition'
type StateProcessor_Transition_Call[BeaconBlockT interface{}, BeaconStateT interface{}, BlobSidecarsT interface{}, ContextT interface{}, DepositT interface{}, ExecutionPayloadHeaderT interface{}] struct {
	*mock.Call
}

// Transition is a helper method to define mock.On call
//   - ctx ContextT
//   - st BeaconStateT
//   - blk BeaconBlockT
func (_e *StateProcessor_Expecter[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) Transition(ctx interface{}, st interface{}, blk interface{}) *StateProcessor_Transition_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	return &StateProcessor_Transition_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]{Call: _e.mock.On("Transition", ctx, st, blk)}
}

func (_c *StateProcessor_Transition_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) Run(run func(ctx ContextT, st BeaconStateT, blk BeaconBlockT)) *StateProcessor_Transition_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ContextT), args[1].(BeaconStateT), args[2].(BeaconBlockT))
	})
	return _c
}

func (_c *StateProcessor_Transition_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) Return(_a0 transition.ValidatorUpdates, _a1 error) *StateProcessor_Transition_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateProcessor_Transition_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]) RunAndReturn(run func(ContextT, BeaconStateT, BeaconBlockT) (transition.ValidatorUpdates, error)) *StateProcessor_Transition_Call[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	_c.Call.Return(run)
	return _c
}

// NewStateProcessor creates a new instance of StateProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateProcessor[BeaconBlockT interface{}, BeaconStateT interface{}, BlobSidecarsT interface{}, ContextT interface{}, DepositT interface{}, ExecutionPayloadHeaderT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *StateProcessor[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT] {
	mock := &StateProcessor[BeaconBlockT, BeaconStateT, BlobSidecarsT, ContextT, DepositT, ExecutionPayloadHeaderT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
