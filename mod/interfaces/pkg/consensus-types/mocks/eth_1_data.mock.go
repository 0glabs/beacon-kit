// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/ethereum/go-ethereum/common"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// Eth1Data is an autogenerated mock type for the Eth1Data type
type Eth1Data[T interface{}] struct {
	mock.Mock
}

type Eth1Data_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Eth1Data[T]) EXPECT() *Eth1Data_Expecter[T] {
	return &Eth1Data_Expecter[T]{mock: &_m.Mock}
}

// GetDepositCount provides a mock function with given fields:
func (_m *Eth1Data[T]) GetDepositCount() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDepositCount")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// Eth1Data_GetDepositCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDepositCount'
type Eth1Data_GetDepositCount_Call[T interface{}] struct {
	*mock.Call
}

// GetDepositCount is a helper method to define mock.On call
func (_e *Eth1Data_Expecter[T]) GetDepositCount() *Eth1Data_GetDepositCount_Call[T] {
	return &Eth1Data_GetDepositCount_Call[T]{Call: _e.mock.On("GetDepositCount")}
}

func (_c *Eth1Data_GetDepositCount_Call[T]) Run(run func()) *Eth1Data_GetDepositCount_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Eth1Data_GetDepositCount_Call[T]) Return(_a0 math.U64) *Eth1Data_GetDepositCount_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Eth1Data_GetDepositCount_Call[T]) RunAndReturn(run func() math.U64) *Eth1Data_GetDepositCount_Call[T] {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: depositRoot, depositCount, blockHash
func (_m *Eth1Data[T]) New(depositRoot bytes.B32, depositCount math.U64, blockHash common.Hash) T {
	ret := _m.Called(depositRoot, depositCount, blockHash)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(bytes.B32, math.U64, common.Hash) T); ok {
		r0 = rf(depositRoot, depositCount, blockHash)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// Eth1Data_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type Eth1Data_New_Call[T interface{}] struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - depositRoot bytes.B32
//   - depositCount math.U64
//   - blockHash common.Hash
func (_e *Eth1Data_Expecter[T]) New(depositRoot interface{}, depositCount interface{}, blockHash interface{}) *Eth1Data_New_Call[T] {
	return &Eth1Data_New_Call[T]{Call: _e.mock.On("New", depositRoot, depositCount, blockHash)}
}

func (_c *Eth1Data_New_Call[T]) Run(run func(depositRoot bytes.B32, depositCount math.U64, blockHash common.Hash)) *Eth1Data_New_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B32), args[1].(math.U64), args[2].(common.Hash))
	})
	return _c
}

func (_c *Eth1Data_New_Call[T]) Return(_a0 T) *Eth1Data_New_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Eth1Data_New_Call[T]) RunAndReturn(run func(bytes.B32, math.U64, common.Hash) T) *Eth1Data_New_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewEth1Data creates a new instance of Eth1Data. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEth1Data[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Eth1Data[T] {
	mock := &Eth1Data[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
