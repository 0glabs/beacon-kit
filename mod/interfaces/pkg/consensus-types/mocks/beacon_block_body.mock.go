// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/ethereum/go-ethereum/common"

	eip4844 "github.com/berachain/beacon-kit/mod/primitives/pkg/eip4844"

	mock "github.com/stretchr/testify/mock"
)

// BeaconBlockBody is an autogenerated mock type for the BeaconBlockBody type
type BeaconBlockBody[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	mock.Mock
}

type BeaconBlockBody_Expecter[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	mock *mock.Mock
}

func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) EXPECT() *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]{mock: &_m.Mock}
}

// Empty provides a mock function with given fields: _a0
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) Empty(_a0 uint32) T {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Empty")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(uint32) T); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// BeaconBlockBody_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'
type BeaconBlockBody_Empty_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
//   - _a0 uint32
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) Empty(_a0 interface{}) *BeaconBlockBody_Empty_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_Empty_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("Empty", _a0)}
}

func (_c *BeaconBlockBody_Empty_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 uint32)) *BeaconBlockBody_Empty_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *BeaconBlockBody_Empty_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 T) *BeaconBlockBody_Empty_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_Empty_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func(uint32) T) *BeaconBlockBody_Empty_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetBlobKzgCommitments provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetBlobKzgCommitments() eip4844.KZGCommitments[common.Hash] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobKzgCommitments")
	}

	var r0 eip4844.KZGCommitments[common.Hash]
	if rf, ok := ret.Get(0).(func() eip4844.KZGCommitments[common.Hash]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eip4844.KZGCommitments[common.Hash])
		}
	}

	return r0
}

// BeaconBlockBody_GetBlobKzgCommitments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobKzgCommitments'
type BeaconBlockBody_GetBlobKzgCommitments_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetBlobKzgCommitments is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetBlobKzgCommitments() *BeaconBlockBody_GetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_GetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetBlobKzgCommitments")}
}

func (_c *BeaconBlockBody_GetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_GetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 eip4844.KZGCommitments[common.Hash]) *BeaconBlockBody_GetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() eip4844.KZGCommitments[common.Hash]) *BeaconBlockBody_GetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetDeposits provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetDeposits() []DepositT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeposits")
	}

	var r0 []DepositT
	if rf, ok := ret.Get(0).(func() []DepositT); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DepositT)
		}
	}

	return r0
}

// BeaconBlockBody_GetDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeposits'
type BeaconBlockBody_GetDeposits_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetDeposits is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetDeposits() *BeaconBlockBody_GetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_GetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetDeposits")}
}

func (_c *BeaconBlockBody_GetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_GetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 []DepositT) *BeaconBlockBody_GetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() []DepositT) *BeaconBlockBody_GetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetEth1Data provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetEth1Data() Eth1DataT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1Data")
	}

	var r0 Eth1DataT
	if rf, ok := ret.Get(0).(func() Eth1DataT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Eth1DataT)
	}

	return r0
}

// BeaconBlockBody_GetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1Data'
type BeaconBlockBody_GetEth1Data_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetEth1Data is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetEth1Data() *BeaconBlockBody_GetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_GetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetEth1Data")}
}

func (_c *BeaconBlockBody_GetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_GetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 Eth1DataT) *BeaconBlockBody_GetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() Eth1DataT) *BeaconBlockBody_GetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetExecutionPayload provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetExecutionPayload() ExecutionPayloadT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionPayload")
	}

	var r0 ExecutionPayloadT
	if rf, ok := ret.Get(0).(func() ExecutionPayloadT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ExecutionPayloadT)
	}

	return r0
}

// BeaconBlockBody_GetExecutionPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionPayload'
type BeaconBlockBody_GetExecutionPayload_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetExecutionPayload is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetExecutionPayload() *BeaconBlockBody_GetExecutionPayload_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_GetExecutionPayload_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetExecutionPayload")}
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_GetExecutionPayload_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 ExecutionPayloadT) *BeaconBlockBody_GetExecutionPayload_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() ExecutionPayloadT) *BeaconBlockBody_GetExecutionPayload_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetGraffiti provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetGraffiti() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGraffiti")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// BeaconBlockBody_GetGraffiti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGraffiti'
type BeaconBlockBody_GetGraffiti_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetGraffiti is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetGraffiti() *BeaconBlockBody_GetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_GetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetGraffiti")}
}

func (_c *BeaconBlockBody_GetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_GetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 bytes.B32) *BeaconBlockBody_GetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() bytes.B32) *BeaconBlockBody_GetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetRandaoReveal provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetRandaoReveal() bytes.B96 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRandaoReveal")
	}

	var r0 bytes.B96
	if rf, ok := ret.Get(0).(func() bytes.B96); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B96)
		}
	}

	return r0
}

// BeaconBlockBody_GetRandaoReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandaoReveal'
type BeaconBlockBody_GetRandaoReveal_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetRandaoReveal is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetRandaoReveal() *BeaconBlockBody_GetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_GetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetRandaoReveal")}
}

func (_c *BeaconBlockBody_GetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_GetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 bytes.B96) *BeaconBlockBody_GetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() bytes.B96) *BeaconBlockBody_GetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetTopLevelRoots provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetTopLevelRoots() ([][32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopLevelRoots")
	}

	var r0 [][32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([][32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [][32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockBody_GetTopLevelRoots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopLevelRoots'
type BeaconBlockBody_GetTopLevelRoots_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetTopLevelRoots is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) GetTopLevelRoots() *BeaconBlockBody_GetTopLevelRoots_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_GetTopLevelRoots_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetTopLevelRoots")}
}

func (_c *BeaconBlockBody_GetTopLevelRoots_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_GetTopLevelRoots_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetTopLevelRoots_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 [][32]byte, _a1 error) *BeaconBlockBody_GetTopLevelRoots_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockBody_GetTopLevelRoots_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() ([][32]byte, error)) *BeaconBlockBody_GetTopLevelRoots_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockBody_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type BeaconBlockBody_HashTreeRoot_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) HashTreeRoot() *BeaconBlockBody_HashTreeRoot_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_HashTreeRoot_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *BeaconBlockBody_HashTreeRoot_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_HashTreeRoot_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_HashTreeRoot_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 [32]byte, _a1 error) *BeaconBlockBody_HashTreeRoot_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockBody_HashTreeRoot_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() ([32]byte, error)) *BeaconBlockBody_HashTreeRoot_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BeaconBlockBody_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type BeaconBlockBody_IsNil_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) IsNil() *BeaconBlockBody_IsNil_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_IsNil_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("IsNil")}
}

func (_c *BeaconBlockBody_IsNil_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_IsNil_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_IsNil_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 bool) *BeaconBlockBody_IsNil_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_IsNil_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() bool) *BeaconBlockBody_IsNil_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// Length provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) Length() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Length")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// BeaconBlockBody_Length_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Length'
type BeaconBlockBody_Length_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// Length is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) Length() *BeaconBlockBody_Length_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_Length_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("Length")}
}

func (_c *BeaconBlockBody_Length_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_Length_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_Length_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 uint64) *BeaconBlockBody_Length_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_Length_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() uint64) *BeaconBlockBody_Length_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockBody_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type BeaconBlockBody_MarshalSSZ_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) MarshalSSZ() *BeaconBlockBody_MarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_MarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *BeaconBlockBody_MarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_MarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_MarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 []byte, _a1 error) *BeaconBlockBody_MarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockBody_MarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() ([]byte, error)) *BeaconBlockBody_MarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZTo provides a mock function with given fields: _a0
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) MarshalSSZTo(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZTo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockBody_MarshalSSZTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZTo'
type BeaconBlockBody_MarshalSSZTo_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// MarshalSSZTo is a helper method to define mock.On call
//   - _a0 []byte
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) MarshalSSZTo(_a0 interface{}) *BeaconBlockBody_MarshalSSZTo_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_MarshalSSZTo_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("MarshalSSZTo", _a0)}
}

func (_c *BeaconBlockBody_MarshalSSZTo_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 []byte)) *BeaconBlockBody_MarshalSSZTo_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BeaconBlockBody_MarshalSSZTo_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 []byte, _a1 error) *BeaconBlockBody_MarshalSSZTo_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockBody_MarshalSSZTo_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func([]byte) ([]byte, error)) *BeaconBlockBody_MarshalSSZTo_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// SetBlobKzgCommitments provides a mock function with given fields: _a0
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetBlobKzgCommitments(_a0 eip4844.KZGCommitments[common.Hash]) {
	_m.Called(_a0)
}

// BeaconBlockBody_SetBlobKzgCommitments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBlobKzgCommitments'
type BeaconBlockBody_SetBlobKzgCommitments_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// SetBlobKzgCommitments is a helper method to define mock.On call
//   - _a0 eip4844.KZGCommitments[common.Hash]
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetBlobKzgCommitments(_a0 interface{}) *BeaconBlockBody_SetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_SetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("SetBlobKzgCommitments", _a0)}
}

func (_c *BeaconBlockBody_SetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 eip4844.KZGCommitments[common.Hash])) *BeaconBlockBody_SetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(eip4844.KZGCommitments[common.Hash]))
	})
	return _c
}

func (_c *BeaconBlockBody_SetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return() *BeaconBlockBody_SetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockBody_SetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func(eip4844.KZGCommitments[common.Hash])) *BeaconBlockBody_SetBlobKzgCommitments_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// SetDeposits provides a mock function with given fields: _a0
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetDeposits(_a0 []DepositT) {
	_m.Called(_a0)
}

// BeaconBlockBody_SetDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeposits'
type BeaconBlockBody_SetDeposits_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// SetDeposits is a helper method to define mock.On call
//   - _a0 []DepositT
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetDeposits(_a0 interface{}) *BeaconBlockBody_SetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_SetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("SetDeposits", _a0)}
}

func (_c *BeaconBlockBody_SetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 []DepositT)) *BeaconBlockBody_SetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]DepositT))
	})
	return _c
}

func (_c *BeaconBlockBody_SetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return() *BeaconBlockBody_SetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockBody_SetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func([]DepositT)) *BeaconBlockBody_SetDeposits_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// SetEth1Data provides a mock function with given fields: _a0
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetEth1Data(_a0 Eth1DataT) {
	_m.Called(_a0)
}

// BeaconBlockBody_SetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEth1Data'
type BeaconBlockBody_SetEth1Data_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// SetEth1Data is a helper method to define mock.On call
//   - _a0 Eth1DataT
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetEth1Data(_a0 interface{}) *BeaconBlockBody_SetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_SetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("SetEth1Data", _a0)}
}

func (_c *BeaconBlockBody_SetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 Eth1DataT)) *BeaconBlockBody_SetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Eth1DataT))
	})
	return _c
}

func (_c *BeaconBlockBody_SetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return() *BeaconBlockBody_SetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockBody_SetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func(Eth1DataT)) *BeaconBlockBody_SetEth1Data_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// SetExecutionData provides a mock function with given fields: _a0
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetExecutionData(_a0 ExecutionPayloadT) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetExecutionData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ExecutionPayloadT) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconBlockBody_SetExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExecutionData'
type BeaconBlockBody_SetExecutionData_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// SetExecutionData is a helper method to define mock.On call
//   - _a0 ExecutionPayloadT
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetExecutionData(_a0 interface{}) *BeaconBlockBody_SetExecutionData_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_SetExecutionData_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("SetExecutionData", _a0)}
}

func (_c *BeaconBlockBody_SetExecutionData_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 ExecutionPayloadT)) *BeaconBlockBody_SetExecutionData_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ExecutionPayloadT))
	})
	return _c
}

func (_c *BeaconBlockBody_SetExecutionData_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 error) *BeaconBlockBody_SetExecutionData_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_SetExecutionData_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func(ExecutionPayloadT) error) *BeaconBlockBody_SetExecutionData_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// SetGraffiti provides a mock function with given fields: _a0
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetGraffiti(_a0 bytes.B32) {
	_m.Called(_a0)
}

// BeaconBlockBody_SetGraffiti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGraffiti'
type BeaconBlockBody_SetGraffiti_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// SetGraffiti is a helper method to define mock.On call
//   - _a0 bytes.B32
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetGraffiti(_a0 interface{}) *BeaconBlockBody_SetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_SetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("SetGraffiti", _a0)}
}

func (_c *BeaconBlockBody_SetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 bytes.B32)) *BeaconBlockBody_SetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B32))
	})
	return _c
}

func (_c *BeaconBlockBody_SetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return() *BeaconBlockBody_SetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockBody_SetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func(bytes.B32)) *BeaconBlockBody_SetGraffiti_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// SetRandaoReveal provides a mock function with given fields: _a0
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetRandaoReveal(_a0 bytes.B96) {
	_m.Called(_a0)
}

// BeaconBlockBody_SetRandaoReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRandaoReveal'
type BeaconBlockBody_SetRandaoReveal_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// SetRandaoReveal is a helper method to define mock.On call
//   - _a0 bytes.B96
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) SetRandaoReveal(_a0 interface{}) *BeaconBlockBody_SetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_SetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("SetRandaoReveal", _a0)}
}

func (_c *BeaconBlockBody_SetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 bytes.B96)) *BeaconBlockBody_SetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B96))
	})
	return _c
}

func (_c *BeaconBlockBody_SetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return() *BeaconBlockBody_SetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockBody_SetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func(bytes.B96)) *BeaconBlockBody_SetRandaoReveal_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// SizeSSZ provides a mock function with given fields:
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) SizeSSZ() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeSSZ")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// BeaconBlockBody_SizeSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SizeSSZ'
type BeaconBlockBody_SizeSSZ_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// SizeSSZ is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) SizeSSZ() *BeaconBlockBody_SizeSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_SizeSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("SizeSSZ")}
}

func (_c *BeaconBlockBody_SizeSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlockBody_SizeSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_SizeSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 int) *BeaconBlockBody_SizeSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_SizeSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() int) *BeaconBlockBody_SizeSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: _a0
func (_m *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]) UnmarshalSSZ(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconBlockBody_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type BeaconBlockBody_UnmarshalSSZ_Call[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - _a0 []byte
func (_e *BeaconBlockBody_Expecter[T, DepositT, Eth1DataT, ExecutionPayloadT]) UnmarshalSSZ(_a0 interface{}) *BeaconBlockBody_UnmarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlockBody_UnmarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("UnmarshalSSZ", _a0)}
}

func (_c *BeaconBlockBody_UnmarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 []byte)) *BeaconBlockBody_UnmarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BeaconBlockBody_UnmarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 error) *BeaconBlockBody_UnmarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_UnmarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func([]byte) error) *BeaconBlockBody_UnmarshalSSZ_Call[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// NewBeaconBlockBody creates a new instance of BeaconBlockBody. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconBlockBody[T interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT] {
	mock := &BeaconBlockBody[T, DepositT, Eth1DataT, ExecutionPayloadT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
