// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/mod/interfaces/pkg/consensus-types"
)

// BeaconBlock is an autogenerated mock type for the BeaconBlock type
type BeaconBlock[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	mock.Mock
}

type BeaconBlock_Expecter[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	mock *mock.Mock
}

func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) EXPECT() *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{mock: &_m.Mock}
}

// Empty provides a mock function with given fields: _a0
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Empty(_a0 uint32) T {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Empty")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(uint32) T); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// BeaconBlock_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'
type BeaconBlock_Empty_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
//   - _a0 uint32
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Empty(_a0 interface{}) *BeaconBlock_Empty_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_Empty_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("Empty", _a0)}
}

func (_c *BeaconBlock_Empty_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 uint32)) *BeaconBlock_Empty_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *BeaconBlock_Empty_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 T) *BeaconBlock_Empty_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_Empty_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func(uint32) T) *BeaconBlock_Empty_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetBody provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetBody() BeaconBlockBodyT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 BeaconBlockBodyT
	if rf, ok := ret.Get(0).(func() BeaconBlockBodyT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(BeaconBlockBodyT)
	}

	return r0
}

// BeaconBlock_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type BeaconBlock_GetBody_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetBody() *BeaconBlock_GetBody_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_GetBody_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetBody")}
}

func (_c *BeaconBlock_GetBody_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_GetBody_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetBody_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 BeaconBlockBodyT) *BeaconBlock_GetBody_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetBody_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() BeaconBlockBodyT) *BeaconBlock_GetBody_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetHeader() BeaconBlockHeaderT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 BeaconBlockHeaderT
	if rf, ok := ret.Get(0).(func() BeaconBlockHeaderT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(BeaconBlockHeaderT)
	}

	return r0
}

// BeaconBlock_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type BeaconBlock_GetHeader_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetHeader() *BeaconBlock_GetHeader_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_GetHeader_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetHeader")}
}

func (_c *BeaconBlock_GetHeader_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_GetHeader_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetHeader_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 BeaconBlockHeaderT) *BeaconBlock_GetHeader_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetHeader_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() BeaconBlockHeaderT) *BeaconBlock_GetHeader_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetParentBlockRoot provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetParentBlockRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentBlockRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// BeaconBlock_GetParentBlockRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentBlockRoot'
type BeaconBlock_GetParentBlockRoot_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetParentBlockRoot is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetParentBlockRoot() *BeaconBlock_GetParentBlockRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_GetParentBlockRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetParentBlockRoot")}
}

func (_c *BeaconBlock_GetParentBlockRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_GetParentBlockRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetParentBlockRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 bytes.B32) *BeaconBlock_GetParentBlockRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetParentBlockRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() bytes.B32) *BeaconBlock_GetParentBlockRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetProposerIndex provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetProposerIndex() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProposerIndex")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// BeaconBlock_GetProposerIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposerIndex'
type BeaconBlock_GetProposerIndex_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetProposerIndex is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetProposerIndex() *BeaconBlock_GetProposerIndex_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_GetProposerIndex_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetProposerIndex")}
}

func (_c *BeaconBlock_GetProposerIndex_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_GetProposerIndex_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetProposerIndex_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 math.U64) *BeaconBlock_GetProposerIndex_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetProposerIndex_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() math.U64) *BeaconBlock_GetProposerIndex_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetSlot provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetSlot() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlot")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// BeaconBlock_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
type BeaconBlock_GetSlot_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetSlot is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetSlot() *BeaconBlock_GetSlot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_GetSlot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetSlot")}
}

func (_c *BeaconBlock_GetSlot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_GetSlot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetSlot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 math.U64) *BeaconBlock_GetSlot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetSlot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() math.U64) *BeaconBlock_GetSlot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetStateRoot provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetStateRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// BeaconBlock_GetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateRoot'
type BeaconBlock_GetStateRoot_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetStateRoot is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) GetStateRoot() *BeaconBlock_GetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_GetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("GetStateRoot")}
}

func (_c *BeaconBlock_GetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_GetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_GetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 bytes.B32) *BeaconBlock_GetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_GetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() bytes.B32) *BeaconBlock_GetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlock_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type BeaconBlock_HashTreeRoot_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) HashTreeRoot() *BeaconBlock_HashTreeRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_HashTreeRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *BeaconBlock_HashTreeRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_HashTreeRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_HashTreeRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 [32]byte, _a1 error) *BeaconBlock_HashTreeRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlock_HashTreeRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() ([32]byte, error)) *BeaconBlock_HashTreeRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BeaconBlock_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type BeaconBlock_IsNil_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) IsNil() *BeaconBlock_IsNil_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_IsNil_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("IsNil")}
}

func (_c *BeaconBlock_IsNil_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_IsNil_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_IsNil_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 bool) *BeaconBlock_IsNil_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_IsNil_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() bool) *BeaconBlock_IsNil_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlock_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type BeaconBlock_MarshalSSZ_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) MarshalSSZ() *BeaconBlock_MarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_MarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *BeaconBlock_MarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_MarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_MarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 []byte, _a1 error) *BeaconBlock_MarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlock_MarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() ([]byte, error)) *BeaconBlock_MarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZTo provides a mock function with given fields: _a0
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) MarshalSSZTo(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZTo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlock_MarshalSSZTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZTo'
type BeaconBlock_MarshalSSZTo_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// MarshalSSZTo is a helper method to define mock.On call
//   - _a0 []byte
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) MarshalSSZTo(_a0 interface{}) *BeaconBlock_MarshalSSZTo_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_MarshalSSZTo_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("MarshalSSZTo", _a0)}
}

func (_c *BeaconBlock_MarshalSSZTo_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 []byte)) *BeaconBlock_MarshalSSZTo_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BeaconBlock_MarshalSSZTo_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 []byte, _a1 error) *BeaconBlock_MarshalSSZTo_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlock_MarshalSSZTo_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func([]byte) ([]byte, error)) *BeaconBlock_MarshalSSZTo_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// NewFromSSZ provides a mock function with given fields: bz, forkVersion
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) NewFromSSZ(bz []byte, forkVersion uint32) (T, error) {
	ret := _m.Called(bz, forkVersion)

	if len(ret) == 0 {
		panic("no return value specified for NewFromSSZ")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, uint32) (T, error)); ok {
		return rf(bz, forkVersion)
	}
	if rf, ok := ret.Get(0).(func([]byte, uint32) T); ok {
		r0 = rf(bz, forkVersion)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func([]byte, uint32) error); ok {
		r1 = rf(bz, forkVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlock_NewFromSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewFromSSZ'
type BeaconBlock_NewFromSSZ_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// NewFromSSZ is a helper method to define mock.On call
//   - bz []byte
//   - forkVersion uint32
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) NewFromSSZ(bz interface{}, forkVersion interface{}) *BeaconBlock_NewFromSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_NewFromSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("NewFromSSZ", bz, forkVersion)}
}

func (_c *BeaconBlock_NewFromSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(bz []byte, forkVersion uint32)) *BeaconBlock_NewFromSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(uint32))
	})
	return _c
}

func (_c *BeaconBlock_NewFromSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 T, _a1 error) *BeaconBlock_NewFromSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlock_NewFromSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func([]byte, uint32) (T, error)) *BeaconBlock_NewFromSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// NewWithVersion provides a mock function with given fields: slot, proposerIndex, parentBlockRoot, forkVersion
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) NewWithVersion(slot math.U64, proposerIndex math.U64, parentBlockRoot bytes.B32, forkVersion uint32) (T, error) {
	ret := _m.Called(slot, proposerIndex, parentBlockRoot, forkVersion)

	if len(ret) == 0 {
		panic("no return value specified for NewWithVersion")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(math.U64, math.U64, bytes.B32, uint32) (T, error)); ok {
		return rf(slot, proposerIndex, parentBlockRoot, forkVersion)
	}
	if rf, ok := ret.Get(0).(func(math.U64, math.U64, bytes.B32, uint32) T); ok {
		r0 = rf(slot, proposerIndex, parentBlockRoot, forkVersion)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(math.U64, math.U64, bytes.B32, uint32) error); ok {
		r1 = rf(slot, proposerIndex, parentBlockRoot, forkVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlock_NewWithVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewWithVersion'
type BeaconBlock_NewWithVersion_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// NewWithVersion is a helper method to define mock.On call
//   - slot math.U64
//   - proposerIndex math.U64
//   - parentBlockRoot bytes.B32
//   - forkVersion uint32
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) NewWithVersion(slot interface{}, proposerIndex interface{}, parentBlockRoot interface{}, forkVersion interface{}) *BeaconBlock_NewWithVersion_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_NewWithVersion_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("NewWithVersion", slot, proposerIndex, parentBlockRoot, forkVersion)}
}

func (_c *BeaconBlock_NewWithVersion_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(slot math.U64, proposerIndex math.U64, parentBlockRoot bytes.B32, forkVersion uint32)) *BeaconBlock_NewWithVersion_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(math.U64), args[2].(bytes.B32), args[3].(uint32))
	})
	return _c
}

func (_c *BeaconBlock_NewWithVersion_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 T, _a1 error) *BeaconBlock_NewWithVersion_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlock_NewWithVersion_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func(math.U64, math.U64, bytes.B32, uint32) (T, error)) *BeaconBlock_NewWithVersion_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// SetStateRoot provides a mock function with given fields: _a0
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) SetStateRoot(_a0 bytes.B32) {
	_m.Called(_a0)
}

// BeaconBlock_SetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStateRoot'
type BeaconBlock_SetStateRoot_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// SetStateRoot is a helper method to define mock.On call
//   - _a0 bytes.B32
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) SetStateRoot(_a0 interface{}) *BeaconBlock_SetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_SetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("SetStateRoot", _a0)}
}

func (_c *BeaconBlock_SetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 bytes.B32)) *BeaconBlock_SetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B32))
	})
	return _c
}

func (_c *BeaconBlock_SetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return() *BeaconBlock_SetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlock_SetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func(bytes.B32)) *BeaconBlock_SetStateRoot_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// SizeSSZ provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) SizeSSZ() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeSSZ")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// BeaconBlock_SizeSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SizeSSZ'
type BeaconBlock_SizeSSZ_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// SizeSSZ is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) SizeSSZ() *BeaconBlock_SizeSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_SizeSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("SizeSSZ")}
}

func (_c *BeaconBlock_SizeSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_SizeSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_SizeSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 int) *BeaconBlock_SizeSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_SizeSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() int) *BeaconBlock_SizeSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: _a0
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) UnmarshalSSZ(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconBlock_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type BeaconBlock_UnmarshalSSZ_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - _a0 []byte
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) UnmarshalSSZ(_a0 interface{}) *BeaconBlock_UnmarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_UnmarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("UnmarshalSSZ", _a0)}
}

func (_c *BeaconBlock_UnmarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func(_a0 []byte)) *BeaconBlock_UnmarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BeaconBlock_UnmarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 error) *BeaconBlock_UnmarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_UnmarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func([]byte) error) *BeaconBlock_UnmarshalSSZ_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Version() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// BeaconBlock_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type BeaconBlock_Version_Call[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *BeaconBlock_Expecter[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Version() *BeaconBlock_Version_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	return &BeaconBlock_Version_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{Call: _e.mock.On("Version")}
}

func (_c *BeaconBlock_Version_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Run(run func()) *BeaconBlock_Version_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlock_Version_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) Return(_a0 uint32) *BeaconBlock_Version_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlock_Version_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]) RunAndReturn(run func() uint32) *BeaconBlock_Version_Call[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// NewBeaconBlock creates a new instance of BeaconBlock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconBlock[T interface{}, BeaconBlockBodyT types.BeaconBlockBody[BeaconBlockBodyT, DepositT, Eth1DataT, ExecutionPayloadT], BeaconBlockHeaderT interface{}, DepositT interface{}, Eth1DataT interface{}, ExecutionPayloadT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT] {
	mock := &BeaconBlock[T, BeaconBlockBodyT, BeaconBlockHeaderT, DepositT, Eth1DataT, ExecutionPayloadT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
