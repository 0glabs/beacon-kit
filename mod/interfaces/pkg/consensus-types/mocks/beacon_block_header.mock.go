// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// BeaconBlockHeader is an autogenerated mock type for the BeaconBlockHeader type
type BeaconBlockHeader[T interface{}] struct {
	mock.Mock
}

type BeaconBlockHeader_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *BeaconBlockHeader[T]) EXPECT() *BeaconBlockHeader_Expecter[T] {
	return &BeaconBlockHeader_Expecter[T]{mock: &_m.Mock}
}

// GetParentBlockRoot provides a mock function with given fields:
func (_m *BeaconBlockHeader[T]) GetParentBlockRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentBlockRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// BeaconBlockHeader_GetParentBlockRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentBlockRoot'
type BeaconBlockHeader_GetParentBlockRoot_Call[T interface{}] struct {
	*mock.Call
}

// GetParentBlockRoot is a helper method to define mock.On call
func (_e *BeaconBlockHeader_Expecter[T]) GetParentBlockRoot() *BeaconBlockHeader_GetParentBlockRoot_Call[T] {
	return &BeaconBlockHeader_GetParentBlockRoot_Call[T]{Call: _e.mock.On("GetParentBlockRoot")}
}

func (_c *BeaconBlockHeader_GetParentBlockRoot_Call[T]) Run(run func()) *BeaconBlockHeader_GetParentBlockRoot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockHeader_GetParentBlockRoot_Call[T]) Return(_a0 bytes.B32) *BeaconBlockHeader_GetParentBlockRoot_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockHeader_GetParentBlockRoot_Call[T]) RunAndReturn(run func() bytes.B32) *BeaconBlockHeader_GetParentBlockRoot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetProposerIndex provides a mock function with given fields:
func (_m *BeaconBlockHeader[T]) GetProposerIndex() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProposerIndex")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// BeaconBlockHeader_GetProposerIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposerIndex'
type BeaconBlockHeader_GetProposerIndex_Call[T interface{}] struct {
	*mock.Call
}

// GetProposerIndex is a helper method to define mock.On call
func (_e *BeaconBlockHeader_Expecter[T]) GetProposerIndex() *BeaconBlockHeader_GetProposerIndex_Call[T] {
	return &BeaconBlockHeader_GetProposerIndex_Call[T]{Call: _e.mock.On("GetProposerIndex")}
}

func (_c *BeaconBlockHeader_GetProposerIndex_Call[T]) Run(run func()) *BeaconBlockHeader_GetProposerIndex_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockHeader_GetProposerIndex_Call[T]) Return(_a0 math.U64) *BeaconBlockHeader_GetProposerIndex_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockHeader_GetProposerIndex_Call[T]) RunAndReturn(run func() math.U64) *BeaconBlockHeader_GetProposerIndex_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetSlot provides a mock function with given fields:
func (_m *BeaconBlockHeader[T]) GetSlot() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlot")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// BeaconBlockHeader_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
type BeaconBlockHeader_GetSlot_Call[T interface{}] struct {
	*mock.Call
}

// GetSlot is a helper method to define mock.On call
func (_e *BeaconBlockHeader_Expecter[T]) GetSlot() *BeaconBlockHeader_GetSlot_Call[T] {
	return &BeaconBlockHeader_GetSlot_Call[T]{Call: _e.mock.On("GetSlot")}
}

func (_c *BeaconBlockHeader_GetSlot_Call[T]) Run(run func()) *BeaconBlockHeader_GetSlot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockHeader_GetSlot_Call[T]) Return(_a0 math.U64) *BeaconBlockHeader_GetSlot_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockHeader_GetSlot_Call[T]) RunAndReturn(run func() math.U64) *BeaconBlockHeader_GetSlot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetStateRoot provides a mock function with given fields:
func (_m *BeaconBlockHeader[T]) GetStateRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// BeaconBlockHeader_GetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateRoot'
type BeaconBlockHeader_GetStateRoot_Call[T interface{}] struct {
	*mock.Call
}

// GetStateRoot is a helper method to define mock.On call
func (_e *BeaconBlockHeader_Expecter[T]) GetStateRoot() *BeaconBlockHeader_GetStateRoot_Call[T] {
	return &BeaconBlockHeader_GetStateRoot_Call[T]{Call: _e.mock.On("GetStateRoot")}
}

func (_c *BeaconBlockHeader_GetStateRoot_Call[T]) Run(run func()) *BeaconBlockHeader_GetStateRoot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockHeader_GetStateRoot_Call[T]) Return(_a0 bytes.B32) *BeaconBlockHeader_GetStateRoot_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockHeader_GetStateRoot_Call[T]) RunAndReturn(run func() bytes.B32) *BeaconBlockHeader_GetStateRoot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *BeaconBlockHeader[T]) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockHeader_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type BeaconBlockHeader_HashTreeRoot_Call[T interface{}] struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *BeaconBlockHeader_Expecter[T]) HashTreeRoot() *BeaconBlockHeader_HashTreeRoot_Call[T] {
	return &BeaconBlockHeader_HashTreeRoot_Call[T]{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *BeaconBlockHeader_HashTreeRoot_Call[T]) Run(run func()) *BeaconBlockHeader_HashTreeRoot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockHeader_HashTreeRoot_Call[T]) Return(_a0 [32]byte, _a1 error) *BeaconBlockHeader_HashTreeRoot_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockHeader_HashTreeRoot_Call[T]) RunAndReturn(run func() ([32]byte, error)) *BeaconBlockHeader_HashTreeRoot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *BeaconBlockHeader[T]) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockHeader_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type BeaconBlockHeader_MarshalSSZ_Call[T interface{}] struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *BeaconBlockHeader_Expecter[T]) MarshalSSZ() *BeaconBlockHeader_MarshalSSZ_Call[T] {
	return &BeaconBlockHeader_MarshalSSZ_Call[T]{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *BeaconBlockHeader_MarshalSSZ_Call[T]) Run(run func()) *BeaconBlockHeader_MarshalSSZ_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockHeader_MarshalSSZ_Call[T]) Return(_a0 []byte, _a1 error) *BeaconBlockHeader_MarshalSSZ_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockHeader_MarshalSSZ_Call[T]) RunAndReturn(run func() ([]byte, error)) *BeaconBlockHeader_MarshalSSZ_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZTo provides a mock function with given fields: _a0
func (_m *BeaconBlockHeader[T]) MarshalSSZTo(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZTo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockHeader_MarshalSSZTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZTo'
type BeaconBlockHeader_MarshalSSZTo_Call[T interface{}] struct {
	*mock.Call
}

// MarshalSSZTo is a helper method to define mock.On call
//   - _a0 []byte
func (_e *BeaconBlockHeader_Expecter[T]) MarshalSSZTo(_a0 interface{}) *BeaconBlockHeader_MarshalSSZTo_Call[T] {
	return &BeaconBlockHeader_MarshalSSZTo_Call[T]{Call: _e.mock.On("MarshalSSZTo", _a0)}
}

func (_c *BeaconBlockHeader_MarshalSSZTo_Call[T]) Run(run func(_a0 []byte)) *BeaconBlockHeader_MarshalSSZTo_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BeaconBlockHeader_MarshalSSZTo_Call[T]) Return(_a0 []byte, _a1 error) *BeaconBlockHeader_MarshalSSZTo_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockHeader_MarshalSSZTo_Call[T]) RunAndReturn(run func([]byte) ([]byte, error)) *BeaconBlockHeader_MarshalSSZTo_Call[T] {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: slot, proposerIndex, parentBlockRoot, stateRoot, bodyRoot
func (_m *BeaconBlockHeader[T]) New(slot math.U64, proposerIndex math.U64, parentBlockRoot bytes.B32, stateRoot bytes.B32, bodyRoot bytes.B32) T {
	ret := _m.Called(slot, proposerIndex, parentBlockRoot, stateRoot, bodyRoot)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(math.U64, math.U64, bytes.B32, bytes.B32, bytes.B32) T); ok {
		r0 = rf(slot, proposerIndex, parentBlockRoot, stateRoot, bodyRoot)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// BeaconBlockHeader_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type BeaconBlockHeader_New_Call[T interface{}] struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - slot math.U64
//   - proposerIndex math.U64
//   - parentBlockRoot bytes.B32
//   - stateRoot bytes.B32
//   - bodyRoot bytes.B32
func (_e *BeaconBlockHeader_Expecter[T]) New(slot interface{}, proposerIndex interface{}, parentBlockRoot interface{}, stateRoot interface{}, bodyRoot interface{}) *BeaconBlockHeader_New_Call[T] {
	return &BeaconBlockHeader_New_Call[T]{Call: _e.mock.On("New", slot, proposerIndex, parentBlockRoot, stateRoot, bodyRoot)}
}

func (_c *BeaconBlockHeader_New_Call[T]) Run(run func(slot math.U64, proposerIndex math.U64, parentBlockRoot bytes.B32, stateRoot bytes.B32, bodyRoot bytes.B32)) *BeaconBlockHeader_New_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(math.U64), args[2].(bytes.B32), args[3].(bytes.B32), args[4].(bytes.B32))
	})
	return _c
}

func (_c *BeaconBlockHeader_New_Call[T]) Return(_a0 T) *BeaconBlockHeader_New_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockHeader_New_Call[T]) RunAndReturn(run func(math.U64, math.U64, bytes.B32, bytes.B32, bytes.B32) T) *BeaconBlockHeader_New_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SetStateRoot provides a mock function with given fields: _a0
func (_m *BeaconBlockHeader[T]) SetStateRoot(_a0 bytes.B32) {
	_m.Called(_a0)
}

// BeaconBlockHeader_SetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStateRoot'
type BeaconBlockHeader_SetStateRoot_Call[T interface{}] struct {
	*mock.Call
}

// SetStateRoot is a helper method to define mock.On call
//   - _a0 bytes.B32
func (_e *BeaconBlockHeader_Expecter[T]) SetStateRoot(_a0 interface{}) *BeaconBlockHeader_SetStateRoot_Call[T] {
	return &BeaconBlockHeader_SetStateRoot_Call[T]{Call: _e.mock.On("SetStateRoot", _a0)}
}

func (_c *BeaconBlockHeader_SetStateRoot_Call[T]) Run(run func(_a0 bytes.B32)) *BeaconBlockHeader_SetStateRoot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B32))
	})
	return _c
}

func (_c *BeaconBlockHeader_SetStateRoot_Call[T]) Return() *BeaconBlockHeader_SetStateRoot_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockHeader_SetStateRoot_Call[T]) RunAndReturn(run func(bytes.B32)) *BeaconBlockHeader_SetStateRoot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SizeSSZ provides a mock function with given fields:
func (_m *BeaconBlockHeader[T]) SizeSSZ() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeSSZ")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// BeaconBlockHeader_SizeSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SizeSSZ'
type BeaconBlockHeader_SizeSSZ_Call[T interface{}] struct {
	*mock.Call
}

// SizeSSZ is a helper method to define mock.On call
func (_e *BeaconBlockHeader_Expecter[T]) SizeSSZ() *BeaconBlockHeader_SizeSSZ_Call[T] {
	return &BeaconBlockHeader_SizeSSZ_Call[T]{Call: _e.mock.On("SizeSSZ")}
}

func (_c *BeaconBlockHeader_SizeSSZ_Call[T]) Run(run func()) *BeaconBlockHeader_SizeSSZ_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockHeader_SizeSSZ_Call[T]) Return(_a0 int) *BeaconBlockHeader_SizeSSZ_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockHeader_SizeSSZ_Call[T]) RunAndReturn(run func() int) *BeaconBlockHeader_SizeSSZ_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: _a0
func (_m *BeaconBlockHeader[T]) UnmarshalSSZ(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconBlockHeader_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type BeaconBlockHeader_UnmarshalSSZ_Call[T interface{}] struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - _a0 []byte
func (_e *BeaconBlockHeader_Expecter[T]) UnmarshalSSZ(_a0 interface{}) *BeaconBlockHeader_UnmarshalSSZ_Call[T] {
	return &BeaconBlockHeader_UnmarshalSSZ_Call[T]{Call: _e.mock.On("UnmarshalSSZ", _a0)}
}

func (_c *BeaconBlockHeader_UnmarshalSSZ_Call[T]) Run(run func(_a0 []byte)) *BeaconBlockHeader_UnmarshalSSZ_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BeaconBlockHeader_UnmarshalSSZ_Call[T]) Return(_a0 error) *BeaconBlockHeader_UnmarshalSSZ_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockHeader_UnmarshalSSZ_Call[T]) RunAndReturn(run func([]byte) error) *BeaconBlockHeader_UnmarshalSSZ_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewBeaconBlockHeader creates a new instance of BeaconBlockHeader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconBlockHeader[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconBlockHeader[T] {
	mock := &BeaconBlockHeader[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
