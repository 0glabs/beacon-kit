// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/ethereum/go-ethereum/common"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// ExecutionPayloadHeader is an autogenerated mock type for the ExecutionPayloadHeader type
type ExecutionPayloadHeader[T interface{}] struct {
	mock.Mock
}

type ExecutionPayloadHeader_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *ExecutionPayloadHeader[T]) EXPECT() *ExecutionPayloadHeader_Expecter[T] {
	return &ExecutionPayloadHeader_Expecter[T]{mock: &_m.Mock}
}

// Empty provides a mock function with given fields: _a0
func (_m *ExecutionPayloadHeader[T]) Empty(_a0 uint32) T {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Empty")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(uint32) T); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// ExecutionPayloadHeader_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'
type ExecutionPayloadHeader_Empty_Call[T interface{}] struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
//   - _a0 uint32
func (_e *ExecutionPayloadHeader_Expecter[T]) Empty(_a0 interface{}) *ExecutionPayloadHeader_Empty_Call[T] {
	return &ExecutionPayloadHeader_Empty_Call[T]{Call: _e.mock.On("Empty", _a0)}
}

func (_c *ExecutionPayloadHeader_Empty_Call[T]) Run(run func(_a0 uint32)) *ExecutionPayloadHeader_Empty_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *ExecutionPayloadHeader_Empty_Call[T]) Return(_a0 T) *ExecutionPayloadHeader_Empty_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_Empty_Call[T]) RunAndReturn(run func(uint32) T) *ExecutionPayloadHeader_Empty_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetBaseFeePerGas provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetBaseFeePerGas() math.U256L {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseFeePerGas")
	}

	var r0 math.U256L
	if rf, ok := ret.Get(0).(func() math.U256L); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(math.U256L)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetBaseFeePerGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBaseFeePerGas'
type ExecutionPayloadHeader_GetBaseFeePerGas_Call[T interface{}] struct {
	*mock.Call
}

// GetBaseFeePerGas is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetBaseFeePerGas() *ExecutionPayloadHeader_GetBaseFeePerGas_Call[T] {
	return &ExecutionPayloadHeader_GetBaseFeePerGas_Call[T]{Call: _e.mock.On("GetBaseFeePerGas")}
}

func (_c *ExecutionPayloadHeader_GetBaseFeePerGas_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetBaseFeePerGas_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetBaseFeePerGas_Call[T]) Return(_a0 math.U256L) *ExecutionPayloadHeader_GetBaseFeePerGas_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetBaseFeePerGas_Call[T]) RunAndReturn(run func() math.U256L) *ExecutionPayloadHeader_GetBaseFeePerGas_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetBlobGasUsed provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetBlobGasUsed() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobGasUsed")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadHeader_GetBlobGasUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobGasUsed'
type ExecutionPayloadHeader_GetBlobGasUsed_Call[T interface{}] struct {
	*mock.Call
}

// GetBlobGasUsed is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetBlobGasUsed() *ExecutionPayloadHeader_GetBlobGasUsed_Call[T] {
	return &ExecutionPayloadHeader_GetBlobGasUsed_Call[T]{Call: _e.mock.On("GetBlobGasUsed")}
}

func (_c *ExecutionPayloadHeader_GetBlobGasUsed_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetBlobGasUsed_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetBlobGasUsed_Call[T]) Return(_a0 math.U64) *ExecutionPayloadHeader_GetBlobGasUsed_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetBlobGasUsed_Call[T]) RunAndReturn(run func() math.U64) *ExecutionPayloadHeader_GetBlobGasUsed_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetBlockHash provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetBlockHash() common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHash")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetBlockHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHash'
type ExecutionPayloadHeader_GetBlockHash_Call[T interface{}] struct {
	*mock.Call
}

// GetBlockHash is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetBlockHash() *ExecutionPayloadHeader_GetBlockHash_Call[T] {
	return &ExecutionPayloadHeader_GetBlockHash_Call[T]{Call: _e.mock.On("GetBlockHash")}
}

func (_c *ExecutionPayloadHeader_GetBlockHash_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetBlockHash_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetBlockHash_Call[T]) Return(_a0 common.Hash) *ExecutionPayloadHeader_GetBlockHash_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetBlockHash_Call[T]) RunAndReturn(run func() common.Hash) *ExecutionPayloadHeader_GetBlockHash_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetExcessBlobGas provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetExcessBlobGas() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExcessBlobGas")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadHeader_GetExcessBlobGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExcessBlobGas'
type ExecutionPayloadHeader_GetExcessBlobGas_Call[T interface{}] struct {
	*mock.Call
}

// GetExcessBlobGas is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetExcessBlobGas() *ExecutionPayloadHeader_GetExcessBlobGas_Call[T] {
	return &ExecutionPayloadHeader_GetExcessBlobGas_Call[T]{Call: _e.mock.On("GetExcessBlobGas")}
}

func (_c *ExecutionPayloadHeader_GetExcessBlobGas_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetExcessBlobGas_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetExcessBlobGas_Call[T]) Return(_a0 math.U64) *ExecutionPayloadHeader_GetExcessBlobGas_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetExcessBlobGas_Call[T]) RunAndReturn(run func() math.U64) *ExecutionPayloadHeader_GetExcessBlobGas_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetExtraData provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetExtraData() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExtraData")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetExtraData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtraData'
type ExecutionPayloadHeader_GetExtraData_Call[T interface{}] struct {
	*mock.Call
}

// GetExtraData is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetExtraData() *ExecutionPayloadHeader_GetExtraData_Call[T] {
	return &ExecutionPayloadHeader_GetExtraData_Call[T]{Call: _e.mock.On("GetExtraData")}
}

func (_c *ExecutionPayloadHeader_GetExtraData_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetExtraData_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetExtraData_Call[T]) Return(_a0 []byte) *ExecutionPayloadHeader_GetExtraData_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetExtraData_Call[T]) RunAndReturn(run func() []byte) *ExecutionPayloadHeader_GetExtraData_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetFeeRecipient provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetFeeRecipient() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFeeRecipient")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetFeeRecipient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeeRecipient'
type ExecutionPayloadHeader_GetFeeRecipient_Call[T interface{}] struct {
	*mock.Call
}

// GetFeeRecipient is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetFeeRecipient() *ExecutionPayloadHeader_GetFeeRecipient_Call[T] {
	return &ExecutionPayloadHeader_GetFeeRecipient_Call[T]{Call: _e.mock.On("GetFeeRecipient")}
}

func (_c *ExecutionPayloadHeader_GetFeeRecipient_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetFeeRecipient_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetFeeRecipient_Call[T]) Return(_a0 common.Address) *ExecutionPayloadHeader_GetFeeRecipient_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetFeeRecipient_Call[T]) RunAndReturn(run func() common.Address) *ExecutionPayloadHeader_GetFeeRecipient_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetGasLimit provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetGasLimit() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasLimit")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadHeader_GetGasLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGasLimit'
type ExecutionPayloadHeader_GetGasLimit_Call[T interface{}] struct {
	*mock.Call
}

// GetGasLimit is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetGasLimit() *ExecutionPayloadHeader_GetGasLimit_Call[T] {
	return &ExecutionPayloadHeader_GetGasLimit_Call[T]{Call: _e.mock.On("GetGasLimit")}
}

func (_c *ExecutionPayloadHeader_GetGasLimit_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetGasLimit_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetGasLimit_Call[T]) Return(_a0 math.U64) *ExecutionPayloadHeader_GetGasLimit_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetGasLimit_Call[T]) RunAndReturn(run func() math.U64) *ExecutionPayloadHeader_GetGasLimit_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetGasUsed provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetGasUsed() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGasUsed")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadHeader_GetGasUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGasUsed'
type ExecutionPayloadHeader_GetGasUsed_Call[T interface{}] struct {
	*mock.Call
}

// GetGasUsed is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetGasUsed() *ExecutionPayloadHeader_GetGasUsed_Call[T] {
	return &ExecutionPayloadHeader_GetGasUsed_Call[T]{Call: _e.mock.On("GetGasUsed")}
}

func (_c *ExecutionPayloadHeader_GetGasUsed_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetGasUsed_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetGasUsed_Call[T]) Return(_a0 math.U64) *ExecutionPayloadHeader_GetGasUsed_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetGasUsed_Call[T]) RunAndReturn(run func() math.U64) *ExecutionPayloadHeader_GetGasUsed_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetLogsBloom provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetLogsBloom() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogsBloom")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetLogsBloom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogsBloom'
type ExecutionPayloadHeader_GetLogsBloom_Call[T interface{}] struct {
	*mock.Call
}

// GetLogsBloom is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetLogsBloom() *ExecutionPayloadHeader_GetLogsBloom_Call[T] {
	return &ExecutionPayloadHeader_GetLogsBloom_Call[T]{Call: _e.mock.On("GetLogsBloom")}
}

func (_c *ExecutionPayloadHeader_GetLogsBloom_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetLogsBloom_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetLogsBloom_Call[T]) Return(_a0 []byte) *ExecutionPayloadHeader_GetLogsBloom_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetLogsBloom_Call[T]) RunAndReturn(run func() []byte) *ExecutionPayloadHeader_GetLogsBloom_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetNumber provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetNumber() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNumber")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadHeader_GetNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNumber'
type ExecutionPayloadHeader_GetNumber_Call[T interface{}] struct {
	*mock.Call
}

// GetNumber is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetNumber() *ExecutionPayloadHeader_GetNumber_Call[T] {
	return &ExecutionPayloadHeader_GetNumber_Call[T]{Call: _e.mock.On("GetNumber")}
}

func (_c *ExecutionPayloadHeader_GetNumber_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetNumber_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetNumber_Call[T]) Return(_a0 math.U64) *ExecutionPayloadHeader_GetNumber_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetNumber_Call[T]) RunAndReturn(run func() math.U64) *ExecutionPayloadHeader_GetNumber_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetParentHash provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetParentHash() common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentHash")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetParentHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentHash'
type ExecutionPayloadHeader_GetParentHash_Call[T interface{}] struct {
	*mock.Call
}

// GetParentHash is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetParentHash() *ExecutionPayloadHeader_GetParentHash_Call[T] {
	return &ExecutionPayloadHeader_GetParentHash_Call[T]{Call: _e.mock.On("GetParentHash")}
}

func (_c *ExecutionPayloadHeader_GetParentHash_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetParentHash_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetParentHash_Call[T]) Return(_a0 common.Hash) *ExecutionPayloadHeader_GetParentHash_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetParentHash_Call[T]) RunAndReturn(run func() common.Hash) *ExecutionPayloadHeader_GetParentHash_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetPrevRandao provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetPrevRandao() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrevRandao")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetPrevRandao_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrevRandao'
type ExecutionPayloadHeader_GetPrevRandao_Call[T interface{}] struct {
	*mock.Call
}

// GetPrevRandao is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetPrevRandao() *ExecutionPayloadHeader_GetPrevRandao_Call[T] {
	return &ExecutionPayloadHeader_GetPrevRandao_Call[T]{Call: _e.mock.On("GetPrevRandao")}
}

func (_c *ExecutionPayloadHeader_GetPrevRandao_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetPrevRandao_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetPrevRandao_Call[T]) Return(_a0 bytes.B32) *ExecutionPayloadHeader_GetPrevRandao_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetPrevRandao_Call[T]) RunAndReturn(run func() bytes.B32) *ExecutionPayloadHeader_GetPrevRandao_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetReceiptsRoot provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetReceiptsRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReceiptsRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetReceiptsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReceiptsRoot'
type ExecutionPayloadHeader_GetReceiptsRoot_Call[T interface{}] struct {
	*mock.Call
}

// GetReceiptsRoot is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetReceiptsRoot() *ExecutionPayloadHeader_GetReceiptsRoot_Call[T] {
	return &ExecutionPayloadHeader_GetReceiptsRoot_Call[T]{Call: _e.mock.On("GetReceiptsRoot")}
}

func (_c *ExecutionPayloadHeader_GetReceiptsRoot_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetReceiptsRoot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetReceiptsRoot_Call[T]) Return(_a0 bytes.B32) *ExecutionPayloadHeader_GetReceiptsRoot_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetReceiptsRoot_Call[T]) RunAndReturn(run func() bytes.B32) *ExecutionPayloadHeader_GetReceiptsRoot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetStateRoot provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetStateRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateRoot'
type ExecutionPayloadHeader_GetStateRoot_Call[T interface{}] struct {
	*mock.Call
}

// GetStateRoot is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetStateRoot() *ExecutionPayloadHeader_GetStateRoot_Call[T] {
	return &ExecutionPayloadHeader_GetStateRoot_Call[T]{Call: _e.mock.On("GetStateRoot")}
}

func (_c *ExecutionPayloadHeader_GetStateRoot_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetStateRoot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetStateRoot_Call[T]) Return(_a0 bytes.B32) *ExecutionPayloadHeader_GetStateRoot_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetStateRoot_Call[T]) RunAndReturn(run func() bytes.B32) *ExecutionPayloadHeader_GetStateRoot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetTimestamp provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetTimestamp() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTimestamp")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// ExecutionPayloadHeader_GetTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimestamp'
type ExecutionPayloadHeader_GetTimestamp_Call[T interface{}] struct {
	*mock.Call
}

// GetTimestamp is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetTimestamp() *ExecutionPayloadHeader_GetTimestamp_Call[T] {
	return &ExecutionPayloadHeader_GetTimestamp_Call[T]{Call: _e.mock.On("GetTimestamp")}
}

func (_c *ExecutionPayloadHeader_GetTimestamp_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetTimestamp_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetTimestamp_Call[T]) Return(_a0 math.U64) *ExecutionPayloadHeader_GetTimestamp_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetTimestamp_Call[T]) RunAndReturn(run func() math.U64) *ExecutionPayloadHeader_GetTimestamp_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsRoot provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetTransactionsRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetTransactionsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsRoot'
type ExecutionPayloadHeader_GetTransactionsRoot_Call[T interface{}] struct {
	*mock.Call
}

// GetTransactionsRoot is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetTransactionsRoot() *ExecutionPayloadHeader_GetTransactionsRoot_Call[T] {
	return &ExecutionPayloadHeader_GetTransactionsRoot_Call[T]{Call: _e.mock.On("GetTransactionsRoot")}
}

func (_c *ExecutionPayloadHeader_GetTransactionsRoot_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetTransactionsRoot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetTransactionsRoot_Call[T]) Return(_a0 bytes.B32) *ExecutionPayloadHeader_GetTransactionsRoot_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetTransactionsRoot_Call[T]) RunAndReturn(run func() bytes.B32) *ExecutionPayloadHeader_GetTransactionsRoot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawalsRoot provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) GetWithdrawalsRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawalsRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// ExecutionPayloadHeader_GetWithdrawalsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawalsRoot'
type ExecutionPayloadHeader_GetWithdrawalsRoot_Call[T interface{}] struct {
	*mock.Call
}

// GetWithdrawalsRoot is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) GetWithdrawalsRoot() *ExecutionPayloadHeader_GetWithdrawalsRoot_Call[T] {
	return &ExecutionPayloadHeader_GetWithdrawalsRoot_Call[T]{Call: _e.mock.On("GetWithdrawalsRoot")}
}

func (_c *ExecutionPayloadHeader_GetWithdrawalsRoot_Call[T]) Run(run func()) *ExecutionPayloadHeader_GetWithdrawalsRoot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_GetWithdrawalsRoot_Call[T]) Return(_a0 bytes.B32) *ExecutionPayloadHeader_GetWithdrawalsRoot_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_GetWithdrawalsRoot_Call[T]) RunAndReturn(run func() bytes.B32) *ExecutionPayloadHeader_GetWithdrawalsRoot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayloadHeader_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type ExecutionPayloadHeader_HashTreeRoot_Call[T interface{}] struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) HashTreeRoot() *ExecutionPayloadHeader_HashTreeRoot_Call[T] {
	return &ExecutionPayloadHeader_HashTreeRoot_Call[T]{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *ExecutionPayloadHeader_HashTreeRoot_Call[T]) Run(run func()) *ExecutionPayloadHeader_HashTreeRoot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_HashTreeRoot_Call[T]) Return(_a0 [32]byte, _a1 error) *ExecutionPayloadHeader_HashTreeRoot_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayloadHeader_HashTreeRoot_Call[T]) RunAndReturn(run func() ([32]byte, error)) *ExecutionPayloadHeader_HashTreeRoot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutionPayloadHeader_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type ExecutionPayloadHeader_IsNil_Call[T interface{}] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) IsNil() *ExecutionPayloadHeader_IsNil_Call[T] {
	return &ExecutionPayloadHeader_IsNil_Call[T]{Call: _e.mock.On("IsNil")}
}

func (_c *ExecutionPayloadHeader_IsNil_Call[T]) Run(run func()) *ExecutionPayloadHeader_IsNil_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_IsNil_Call[T]) Return(_a0 bool) *ExecutionPayloadHeader_IsNil_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_IsNil_Call[T]) RunAndReturn(run func() bool) *ExecutionPayloadHeader_IsNil_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MarshalJSON provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayloadHeader_MarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalJSON'
type ExecutionPayloadHeader_MarshalJSON_Call[T interface{}] struct {
	*mock.Call
}

// MarshalJSON is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) MarshalJSON() *ExecutionPayloadHeader_MarshalJSON_Call[T] {
	return &ExecutionPayloadHeader_MarshalJSON_Call[T]{Call: _e.mock.On("MarshalJSON")}
}

func (_c *ExecutionPayloadHeader_MarshalJSON_Call[T]) Run(run func()) *ExecutionPayloadHeader_MarshalJSON_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_MarshalJSON_Call[T]) Return(_a0 []byte, _a1 error) *ExecutionPayloadHeader_MarshalJSON_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayloadHeader_MarshalJSON_Call[T]) RunAndReturn(run func() ([]byte, error)) *ExecutionPayloadHeader_MarshalJSON_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayloadHeader_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type ExecutionPayloadHeader_MarshalSSZ_Call[T interface{}] struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) MarshalSSZ() *ExecutionPayloadHeader_MarshalSSZ_Call[T] {
	return &ExecutionPayloadHeader_MarshalSSZ_Call[T]{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *ExecutionPayloadHeader_MarshalSSZ_Call[T]) Run(run func()) *ExecutionPayloadHeader_MarshalSSZ_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_MarshalSSZ_Call[T]) Return(_a0 []byte, _a1 error) *ExecutionPayloadHeader_MarshalSSZ_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayloadHeader_MarshalSSZ_Call[T]) RunAndReturn(run func() ([]byte, error)) *ExecutionPayloadHeader_MarshalSSZ_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZTo provides a mock function with given fields: _a0
func (_m *ExecutionPayloadHeader[T]) MarshalSSZTo(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZTo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayloadHeader_MarshalSSZTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZTo'
type ExecutionPayloadHeader_MarshalSSZTo_Call[T interface{}] struct {
	*mock.Call
}

// MarshalSSZTo is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ExecutionPayloadHeader_Expecter[T]) MarshalSSZTo(_a0 interface{}) *ExecutionPayloadHeader_MarshalSSZTo_Call[T] {
	return &ExecutionPayloadHeader_MarshalSSZTo_Call[T]{Call: _e.mock.On("MarshalSSZTo", _a0)}
}

func (_c *ExecutionPayloadHeader_MarshalSSZTo_Call[T]) Run(run func(_a0 []byte)) *ExecutionPayloadHeader_MarshalSSZTo_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ExecutionPayloadHeader_MarshalSSZTo_Call[T]) Return(_a0 []byte, _a1 error) *ExecutionPayloadHeader_MarshalSSZTo_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayloadHeader_MarshalSSZTo_Call[T]) RunAndReturn(run func([]byte) ([]byte, error)) *ExecutionPayloadHeader_MarshalSSZTo_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewFromJSON provides a mock function with given fields: bz, forkVersion
func (_m *ExecutionPayloadHeader[T]) NewFromJSON(bz []byte, forkVersion uint32) (T, error) {
	ret := _m.Called(bz, forkVersion)

	if len(ret) == 0 {
		panic("no return value specified for NewFromJSON")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, uint32) (T, error)); ok {
		return rf(bz, forkVersion)
	}
	if rf, ok := ret.Get(0).(func([]byte, uint32) T); ok {
		r0 = rf(bz, forkVersion)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func([]byte, uint32) error); ok {
		r1 = rf(bz, forkVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayloadHeader_NewFromJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewFromJSON'
type ExecutionPayloadHeader_NewFromJSON_Call[T interface{}] struct {
	*mock.Call
}

// NewFromJSON is a helper method to define mock.On call
//   - bz []byte
//   - forkVersion uint32
func (_e *ExecutionPayloadHeader_Expecter[T]) NewFromJSON(bz interface{}, forkVersion interface{}) *ExecutionPayloadHeader_NewFromJSON_Call[T] {
	return &ExecutionPayloadHeader_NewFromJSON_Call[T]{Call: _e.mock.On("NewFromJSON", bz, forkVersion)}
}

func (_c *ExecutionPayloadHeader_NewFromJSON_Call[T]) Run(run func(bz []byte, forkVersion uint32)) *ExecutionPayloadHeader_NewFromJSON_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(uint32))
	})
	return _c
}

func (_c *ExecutionPayloadHeader_NewFromJSON_Call[T]) Return(_a0 T, _a1 error) *ExecutionPayloadHeader_NewFromJSON_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayloadHeader_NewFromJSON_Call[T]) RunAndReturn(run func([]byte, uint32) (T, error)) *ExecutionPayloadHeader_NewFromJSON_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewFromSSZ provides a mock function with given fields: bz, forkVersion
func (_m *ExecutionPayloadHeader[T]) NewFromSSZ(bz []byte, forkVersion uint32) (T, error) {
	ret := _m.Called(bz, forkVersion)

	if len(ret) == 0 {
		panic("no return value specified for NewFromSSZ")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, uint32) (T, error)); ok {
		return rf(bz, forkVersion)
	}
	if rf, ok := ret.Get(0).(func([]byte, uint32) T); ok {
		r0 = rf(bz, forkVersion)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func([]byte, uint32) error); ok {
		r1 = rf(bz, forkVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionPayloadHeader_NewFromSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewFromSSZ'
type ExecutionPayloadHeader_NewFromSSZ_Call[T interface{}] struct {
	*mock.Call
}

// NewFromSSZ is a helper method to define mock.On call
//   - bz []byte
//   - forkVersion uint32
func (_e *ExecutionPayloadHeader_Expecter[T]) NewFromSSZ(bz interface{}, forkVersion interface{}) *ExecutionPayloadHeader_NewFromSSZ_Call[T] {
	return &ExecutionPayloadHeader_NewFromSSZ_Call[T]{Call: _e.mock.On("NewFromSSZ", bz, forkVersion)}
}

func (_c *ExecutionPayloadHeader_NewFromSSZ_Call[T]) Run(run func(bz []byte, forkVersion uint32)) *ExecutionPayloadHeader_NewFromSSZ_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(uint32))
	})
	return _c
}

func (_c *ExecutionPayloadHeader_NewFromSSZ_Call[T]) Return(_a0 T, _a1 error) *ExecutionPayloadHeader_NewFromSSZ_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionPayloadHeader_NewFromSSZ_Call[T]) RunAndReturn(run func([]byte, uint32) (T, error)) *ExecutionPayloadHeader_NewFromSSZ_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SizeSSZ provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) SizeSSZ() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeSSZ")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ExecutionPayloadHeader_SizeSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SizeSSZ'
type ExecutionPayloadHeader_SizeSSZ_Call[T interface{}] struct {
	*mock.Call
}

// SizeSSZ is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) SizeSSZ() *ExecutionPayloadHeader_SizeSSZ_Call[T] {
	return &ExecutionPayloadHeader_SizeSSZ_Call[T]{Call: _e.mock.On("SizeSSZ")}
}

func (_c *ExecutionPayloadHeader_SizeSSZ_Call[T]) Run(run func()) *ExecutionPayloadHeader_SizeSSZ_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_SizeSSZ_Call[T]) Return(_a0 int) *ExecutionPayloadHeader_SizeSSZ_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_SizeSSZ_Call[T]) RunAndReturn(run func() int) *ExecutionPayloadHeader_SizeSSZ_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalJSON provides a mock function with given fields: _a0
func (_m *ExecutionPayloadHeader[T]) UnmarshalJSON(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutionPayloadHeader_UnmarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalJSON'
type ExecutionPayloadHeader_UnmarshalJSON_Call[T interface{}] struct {
	*mock.Call
}

// UnmarshalJSON is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ExecutionPayloadHeader_Expecter[T]) UnmarshalJSON(_a0 interface{}) *ExecutionPayloadHeader_UnmarshalJSON_Call[T] {
	return &ExecutionPayloadHeader_UnmarshalJSON_Call[T]{Call: _e.mock.On("UnmarshalJSON", _a0)}
}

func (_c *ExecutionPayloadHeader_UnmarshalJSON_Call[T]) Run(run func(_a0 []byte)) *ExecutionPayloadHeader_UnmarshalJSON_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ExecutionPayloadHeader_UnmarshalJSON_Call[T]) Return(_a0 error) *ExecutionPayloadHeader_UnmarshalJSON_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_UnmarshalJSON_Call[T]) RunAndReturn(run func([]byte) error) *ExecutionPayloadHeader_UnmarshalJSON_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: _a0
func (_m *ExecutionPayloadHeader[T]) UnmarshalSSZ(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutionPayloadHeader_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type ExecutionPayloadHeader_UnmarshalSSZ_Call[T interface{}] struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ExecutionPayloadHeader_Expecter[T]) UnmarshalSSZ(_a0 interface{}) *ExecutionPayloadHeader_UnmarshalSSZ_Call[T] {
	return &ExecutionPayloadHeader_UnmarshalSSZ_Call[T]{Call: _e.mock.On("UnmarshalSSZ", _a0)}
}

func (_c *ExecutionPayloadHeader_UnmarshalSSZ_Call[T]) Run(run func(_a0 []byte)) *ExecutionPayloadHeader_UnmarshalSSZ_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ExecutionPayloadHeader_UnmarshalSSZ_Call[T]) Return(_a0 error) *ExecutionPayloadHeader_UnmarshalSSZ_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_UnmarshalSSZ_Call[T]) RunAndReturn(run func([]byte) error) *ExecutionPayloadHeader_UnmarshalSSZ_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *ExecutionPayloadHeader[T]) Version() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutionPayloadHeader_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type ExecutionPayloadHeader_Version_Call[T interface{}] struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *ExecutionPayloadHeader_Expecter[T]) Version() *ExecutionPayloadHeader_Version_Call[T] {
	return &ExecutionPayloadHeader_Version_Call[T]{Call: _e.mock.On("Version")}
}

func (_c *ExecutionPayloadHeader_Version_Call[T]) Run(run func()) *ExecutionPayloadHeader_Version_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadHeader_Version_Call[T]) Return(_a0 uint32) *ExecutionPayloadHeader_Version_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadHeader_Version_Call[T]) RunAndReturn(run func() uint32) *ExecutionPayloadHeader_Version_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewExecutionPayloadHeader creates a new instance of ExecutionPayloadHeader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionPayloadHeader[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionPayloadHeader[T] {
	mock := &ExecutionPayloadHeader[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
