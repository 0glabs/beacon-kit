// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// ForkData is an autogenerated mock type for the ForkData type
type ForkData[T interface{}] struct {
	mock.Mock
}

type ForkData_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *ForkData[T]) EXPECT() *ForkData_Expecter[T] {
	return &ForkData_Expecter[T]{mock: &_m.Mock}
}

// ComputeDomain provides a mock function with given fields: domainType
func (_m *ForkData[T]) ComputeDomain(domainType bytes.B4) (bytes.B32, error) {
	ret := _m.Called(domainType)

	if len(ret) == 0 {
		panic("no return value specified for ComputeDomain")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func(bytes.B4) (bytes.B32, error)); ok {
		return rf(domainType)
	}
	if rf, ok := ret.Get(0).(func(bytes.B4) bytes.B32); ok {
		r0 = rf(domainType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func(bytes.B4) error); ok {
		r1 = rf(domainType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForkData_ComputeDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComputeDomain'
type ForkData_ComputeDomain_Call[T interface{}] struct {
	*mock.Call
}

// ComputeDomain is a helper method to define mock.On call
//   - domainType bytes.B4
func (_e *ForkData_Expecter[T]) ComputeDomain(domainType interface{}) *ForkData_ComputeDomain_Call[T] {
	return &ForkData_ComputeDomain_Call[T]{Call: _e.mock.On("ComputeDomain", domainType)}
}

func (_c *ForkData_ComputeDomain_Call[T]) Run(run func(domainType bytes.B4)) *ForkData_ComputeDomain_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B4))
	})
	return _c
}

func (_c *ForkData_ComputeDomain_Call[T]) Return(_a0 bytes.B32, _a1 error) *ForkData_ComputeDomain_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ForkData_ComputeDomain_Call[T]) RunAndReturn(run func(bytes.B4) (bytes.B32, error)) *ForkData_ComputeDomain_Call[T] {
	_c.Call.Return(run)
	return _c
}

// ComputeRandaoSigningRoot provides a mock function with given fields: domainType, epoch
func (_m *ForkData[T]) ComputeRandaoSigningRoot(domainType bytes.B4, epoch math.U64) (bytes.B32, error) {
	ret := _m.Called(domainType, epoch)

	if len(ret) == 0 {
		panic("no return value specified for ComputeRandaoSigningRoot")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func(bytes.B4, math.U64) (bytes.B32, error)); ok {
		return rf(domainType, epoch)
	}
	if rf, ok := ret.Get(0).(func(bytes.B4, math.U64) bytes.B32); ok {
		r0 = rf(domainType, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func(bytes.B4, math.U64) error); ok {
		r1 = rf(domainType, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForkData_ComputeRandaoSigningRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComputeRandaoSigningRoot'
type ForkData_ComputeRandaoSigningRoot_Call[T interface{}] struct {
	*mock.Call
}

// ComputeRandaoSigningRoot is a helper method to define mock.On call
//   - domainType bytes.B4
//   - epoch math.U64
func (_e *ForkData_Expecter[T]) ComputeRandaoSigningRoot(domainType interface{}, epoch interface{}) *ForkData_ComputeRandaoSigningRoot_Call[T] {
	return &ForkData_ComputeRandaoSigningRoot_Call[T]{Call: _e.mock.On("ComputeRandaoSigningRoot", domainType, epoch)}
}

func (_c *ForkData_ComputeRandaoSigningRoot_Call[T]) Run(run func(domainType bytes.B4, epoch math.U64)) *ForkData_ComputeRandaoSigningRoot_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B4), args[1].(math.U64))
	})
	return _c
}

func (_c *ForkData_ComputeRandaoSigningRoot_Call[T]) Return(_a0 bytes.B32, _a1 error) *ForkData_ComputeRandaoSigningRoot_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ForkData_ComputeRandaoSigningRoot_Call[T]) RunAndReturn(run func(bytes.B4, math.U64) (bytes.B32, error)) *ForkData_ComputeRandaoSigningRoot_Call[T] {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: currentVersion, genesisValidatorsRoot
func (_m *ForkData[T]) New(currentVersion bytes.B4, genesisValidatorsRoot bytes.B32) T {
	ret := _m.Called(currentVersion, genesisValidatorsRoot)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(bytes.B4, bytes.B32) T); ok {
		r0 = rf(currentVersion, genesisValidatorsRoot)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// ForkData_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type ForkData_New_Call[T interface{}] struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - currentVersion bytes.B4
//   - genesisValidatorsRoot bytes.B32
func (_e *ForkData_Expecter[T]) New(currentVersion interface{}, genesisValidatorsRoot interface{}) *ForkData_New_Call[T] {
	return &ForkData_New_Call[T]{Call: _e.mock.On("New", currentVersion, genesisValidatorsRoot)}
}

func (_c *ForkData_New_Call[T]) Run(run func(currentVersion bytes.B4, genesisValidatorsRoot bytes.B32)) *ForkData_New_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B4), args[1].(bytes.B32))
	})
	return _c
}

func (_c *ForkData_New_Call[T]) Return(_a0 T) *ForkData_New_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForkData_New_Call[T]) RunAndReturn(run func(bytes.B4, bytes.B32) T) *ForkData_New_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewForkData creates a new instance of ForkData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewForkData[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *ForkData[T] {
	mock := &ForkData[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
