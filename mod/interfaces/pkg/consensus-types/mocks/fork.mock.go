// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// Fork is an autogenerated mock type for the Fork type
type Fork[T interface{}] struct {
	mock.Mock
}

type Fork_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Fork[T]) EXPECT() *Fork_Expecter[T] {
	return &Fork_Expecter[T]{mock: &_m.Mock}
}

// New provides a mock function with given fields: previousVersion, currentVersion, epoch
func (_m *Fork[T]) New(previousVersion bytes.B4, currentVersion bytes.B4, epoch math.U64) T {
	ret := _m.Called(previousVersion, currentVersion, epoch)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(bytes.B4, bytes.B4, math.U64) T); ok {
		r0 = rf(previousVersion, currentVersion, epoch)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// Fork_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type Fork_New_Call[T interface{}] struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - previousVersion bytes.B4
//   - currentVersion bytes.B4
//   - epoch math.U64
func (_e *Fork_Expecter[T]) New(previousVersion interface{}, currentVersion interface{}, epoch interface{}) *Fork_New_Call[T] {
	return &Fork_New_Call[T]{Call: _e.mock.On("New", previousVersion, currentVersion, epoch)}
}

func (_c *Fork_New_Call[T]) Run(run func(previousVersion bytes.B4, currentVersion bytes.B4, epoch math.U64)) *Fork_New_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B4), args[1].(bytes.B4), args[2].(math.U64))
	})
	return _c
}

func (_c *Fork_New_Call[T]) Return(_a0 T) *Fork_New_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fork_New_Call[T]) RunAndReturn(run func(bytes.B4, bytes.B4, math.U64) T) *Fork_New_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewFork creates a new instance of Fork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFork[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Fork[T] {
	mock := &Fork[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
