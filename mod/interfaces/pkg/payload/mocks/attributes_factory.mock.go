// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	engineprimitives "github.com/berachain/beacon-kit/mod/interfaces/pkg/engine-primitives"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"
)

// AttributesFactory is an autogenerated mock type for the AttributesFactory type
type AttributesFactory[BeaconStateT interface{}, PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], WithdrawalT interface{}] struct {
	mock.Mock
}

type AttributesFactory_Expecter[BeaconStateT interface{}, PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], WithdrawalT interface{}] struct {
	mock *mock.Mock
}

func (_m *AttributesFactory[BeaconStateT, PayloadAttributesT, WithdrawalT]) EXPECT() *AttributesFactory_Expecter[BeaconStateT, PayloadAttributesT, WithdrawalT] {
	return &AttributesFactory_Expecter[BeaconStateT, PayloadAttributesT, WithdrawalT]{mock: &_m.Mock}
}

// BuildPayloadAttributes provides a mock function with given fields: st, slot, timestamp, prevHeadRoot
func (_m *AttributesFactory[BeaconStateT, PayloadAttributesT, WithdrawalT]) BuildPayloadAttributes(st BeaconStateT, slot math.U64, timestamp uint64, prevHeadRoot [32]byte) (PayloadAttributesT, error) {
	ret := _m.Called(st, slot, timestamp, prevHeadRoot)

	if len(ret) == 0 {
		panic("no return value specified for BuildPayloadAttributes")
	}

	var r0 PayloadAttributesT
	var r1 error
	if rf, ok := ret.Get(0).(func(BeaconStateT, math.U64, uint64, [32]byte) (PayloadAttributesT, error)); ok {
		return rf(st, slot, timestamp, prevHeadRoot)
	}
	if rf, ok := ret.Get(0).(func(BeaconStateT, math.U64, uint64, [32]byte) PayloadAttributesT); ok {
		r0 = rf(st, slot, timestamp, prevHeadRoot)
	} else {
		r0 = ret.Get(0).(PayloadAttributesT)
	}

	if rf, ok := ret.Get(1).(func(BeaconStateT, math.U64, uint64, [32]byte) error); ok {
		r1 = rf(st, slot, timestamp, prevHeadRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttributesFactory_BuildPayloadAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildPayloadAttributes'
type AttributesFactory_BuildPayloadAttributes_Call[BeaconStateT interface{}, PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], WithdrawalT interface{}] struct {
	*mock.Call
}

// BuildPayloadAttributes is a helper method to define mock.On call
//   - st BeaconStateT
//   - slot math.U64
//   - timestamp uint64
//   - prevHeadRoot [32]byte
func (_e *AttributesFactory_Expecter[BeaconStateT, PayloadAttributesT, WithdrawalT]) BuildPayloadAttributes(st interface{}, slot interface{}, timestamp interface{}, prevHeadRoot interface{}) *AttributesFactory_BuildPayloadAttributes_Call[BeaconStateT, PayloadAttributesT, WithdrawalT] {
	return &AttributesFactory_BuildPayloadAttributes_Call[BeaconStateT, PayloadAttributesT, WithdrawalT]{Call: _e.mock.On("BuildPayloadAttributes", st, slot, timestamp, prevHeadRoot)}
}

func (_c *AttributesFactory_BuildPayloadAttributes_Call[BeaconStateT, PayloadAttributesT, WithdrawalT]) Run(run func(st BeaconStateT, slot math.U64, timestamp uint64, prevHeadRoot [32]byte)) *AttributesFactory_BuildPayloadAttributes_Call[BeaconStateT, PayloadAttributesT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BeaconStateT), args[1].(math.U64), args[2].(uint64), args[3].([32]byte))
	})
	return _c
}

func (_c *AttributesFactory_BuildPayloadAttributes_Call[BeaconStateT, PayloadAttributesT, WithdrawalT]) Return(_a0 PayloadAttributesT, _a1 error) *AttributesFactory_BuildPayloadAttributes_Call[BeaconStateT, PayloadAttributesT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AttributesFactory_BuildPayloadAttributes_Call[BeaconStateT, PayloadAttributesT, WithdrawalT]) RunAndReturn(run func(BeaconStateT, math.U64, uint64, [32]byte) (PayloadAttributesT, error)) *AttributesFactory_BuildPayloadAttributes_Call[BeaconStateT, PayloadAttributesT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// NewAttributesFactory creates a new instance of AttributesFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttributesFactory[BeaconStateT interface{}, PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], WithdrawalT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *AttributesFactory[BeaconStateT, PayloadAttributesT, WithdrawalT] {
	mock := &AttributesFactory[BeaconStateT, PayloadAttributesT, WithdrawalT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
