// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	engineprimitives "github.com/berachain/beacon-kit/mod/interfaces/pkg/engine-primitives"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/mod/interfaces/pkg/consensus-types"
)

// Builder is an autogenerated mock type for the Builder type
type Builder[BeaconStateT interface{}, BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT interface{}] struct {
	mock.Mock
}

type Builder_Expecter[BeaconStateT interface{}, BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT interface{}] struct {
	mock *mock.Mock
}

func (_m *Builder[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) EXPECT() *Builder_Expecter[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	return &Builder_Expecter[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{mock: &_m.Mock}
}

// Enabled provides a mock function with given fields:
func (_m *Builder[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Enabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Builder_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type Builder_Enabled_Call[BeaconStateT interface{}, BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT interface{}] struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *Builder_Expecter[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Enabled() *Builder_Enabled_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	return &Builder_Enabled_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{Call: _e.mock.On("Enabled")}
}

func (_c *Builder_Enabled_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Run(run func()) *Builder_Enabled_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Builder_Enabled_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Return(_a0 bool) *Builder_Enabled_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_Enabled_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RunAndReturn(run func() bool) *Builder_Enabled_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// RequestPayloadAsync provides a mock function with given fields: ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash
func (_m *Builder[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RequestPayloadAsync(ctx context.Context, st BeaconStateT, slot math.U64, timestamp uint64, parentBlockRoot bytes.B32, headEth1BlockHash common.Hash, finalEth1BlockHash common.Hash) (*PayloadIDT, error) {
	ret := _m.Called(ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash)

	if len(ret) == 0 {
		panic("no return value specified for RequestPayloadAsync")
	}

	var r0 *PayloadIDT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, BeaconStateT, math.U64, uint64, bytes.B32, common.Hash, common.Hash) (*PayloadIDT, error)); ok {
		return rf(ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, BeaconStateT, math.U64, uint64, bytes.B32, common.Hash, common.Hash) *PayloadIDT); ok {
		r0 = rf(ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PayloadIDT)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, BeaconStateT, math.U64, uint64, bytes.B32, common.Hash, common.Hash) error); ok {
		r1 = rf(ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_RequestPayloadAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPayloadAsync'
type Builder_RequestPayloadAsync_Call[BeaconStateT interface{}, BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT interface{}] struct {
	*mock.Call
}

// RequestPayloadAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - st BeaconStateT
//   - slot math.U64
//   - timestamp uint64
//   - parentBlockRoot bytes.B32
//   - headEth1BlockHash common.Hash
//   - finalEth1BlockHash common.Hash
func (_e *Builder_Expecter[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RequestPayloadAsync(ctx interface{}, st interface{}, slot interface{}, timestamp interface{}, parentBlockRoot interface{}, headEth1BlockHash interface{}, finalEth1BlockHash interface{}) *Builder_RequestPayloadAsync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	return &Builder_RequestPayloadAsync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{Call: _e.mock.On("RequestPayloadAsync", ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash)}
}

func (_c *Builder_RequestPayloadAsync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Run(run func(ctx context.Context, st BeaconStateT, slot math.U64, timestamp uint64, parentBlockRoot bytes.B32, headEth1BlockHash common.Hash, finalEth1BlockHash common.Hash)) *Builder_RequestPayloadAsync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(BeaconStateT), args[2].(math.U64), args[3].(uint64), args[4].(bytes.B32), args[5].(common.Hash), args[6].(common.Hash))
	})
	return _c
}

func (_c *Builder_RequestPayloadAsync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Return(_a0 *PayloadIDT, _a1 error) *Builder_RequestPayloadAsync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Builder_RequestPayloadAsync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RunAndReturn(run func(context.Context, BeaconStateT, math.U64, uint64, bytes.B32, common.Hash, common.Hash) (*PayloadIDT, error)) *Builder_RequestPayloadAsync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// RequestPayloadSync provides a mock function with given fields: ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash
func (_m *Builder[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RequestPayloadSync(ctx context.Context, st BeaconStateT, slot math.U64, timestamp uint64, parentBlockRoot bytes.B32, headEth1BlockHash common.Hash, finalEth1BlockHash common.Hash) (ExecutionPayloadEnvelopeT, error) {
	ret := _m.Called(ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash)

	if len(ret) == 0 {
		panic("no return value specified for RequestPayloadSync")
	}

	var r0 ExecutionPayloadEnvelopeT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, BeaconStateT, math.U64, uint64, bytes.B32, common.Hash, common.Hash) (ExecutionPayloadEnvelopeT, error)); ok {
		return rf(ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, BeaconStateT, math.U64, uint64, bytes.B32, common.Hash, common.Hash) ExecutionPayloadEnvelopeT); ok {
		r0 = rf(ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash)
	} else {
		r0 = ret.Get(0).(ExecutionPayloadEnvelopeT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, BeaconStateT, math.U64, uint64, bytes.B32, common.Hash, common.Hash) error); ok {
		r1 = rf(ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_RequestPayloadSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPayloadSync'
type Builder_RequestPayloadSync_Call[BeaconStateT interface{}, BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT interface{}] struct {
	*mock.Call
}

// RequestPayloadSync is a helper method to define mock.On call
//   - ctx context.Context
//   - st BeaconStateT
//   - slot math.U64
//   - timestamp uint64
//   - parentBlockRoot bytes.B32
//   - headEth1BlockHash common.Hash
//   - finalEth1BlockHash common.Hash
func (_e *Builder_Expecter[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RequestPayloadSync(ctx interface{}, st interface{}, slot interface{}, timestamp interface{}, parentBlockRoot interface{}, headEth1BlockHash interface{}, finalEth1BlockHash interface{}) *Builder_RequestPayloadSync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	return &Builder_RequestPayloadSync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{Call: _e.mock.On("RequestPayloadSync", ctx, st, slot, timestamp, parentBlockRoot, headEth1BlockHash, finalEth1BlockHash)}
}

func (_c *Builder_RequestPayloadSync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Run(run func(ctx context.Context, st BeaconStateT, slot math.U64, timestamp uint64, parentBlockRoot bytes.B32, headEth1BlockHash common.Hash, finalEth1BlockHash common.Hash)) *Builder_RequestPayloadSync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(BeaconStateT), args[2].(math.U64), args[3].(uint64), args[4].(bytes.B32), args[5].(common.Hash), args[6].(common.Hash))
	})
	return _c
}

func (_c *Builder_RequestPayloadSync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Return(_a0 ExecutionPayloadEnvelopeT, _a1 error) *Builder_RequestPayloadSync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Builder_RequestPayloadSync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RunAndReturn(run func(context.Context, BeaconStateT, math.U64, uint64, bytes.B32, common.Hash, common.Hash) (ExecutionPayloadEnvelopeT, error)) *Builder_RequestPayloadSync_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// RetrievePayload provides a mock function with given fields: ctx, slot, parentBlockRoot
func (_m *Builder[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RetrievePayload(ctx context.Context, slot math.U64, parentBlockRoot bytes.B32) (ExecutionPayloadEnvelopeT, error) {
	ret := _m.Called(ctx, slot, parentBlockRoot)

	if len(ret) == 0 {
		panic("no return value specified for RetrievePayload")
	}

	var r0 ExecutionPayloadEnvelopeT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, math.U64, bytes.B32) (ExecutionPayloadEnvelopeT, error)); ok {
		return rf(ctx, slot, parentBlockRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, math.U64, bytes.B32) ExecutionPayloadEnvelopeT); ok {
		r0 = rf(ctx, slot, parentBlockRoot)
	} else {
		r0 = ret.Get(0).(ExecutionPayloadEnvelopeT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, math.U64, bytes.B32) error); ok {
		r1 = rf(ctx, slot, parentBlockRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_RetrievePayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrievePayload'
type Builder_RetrievePayload_Call[BeaconStateT interface{}, BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT interface{}] struct {
	*mock.Call
}

// RetrievePayload is a helper method to define mock.On call
//   - ctx context.Context
//   - slot math.U64
//   - parentBlockRoot bytes.B32
func (_e *Builder_Expecter[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RetrievePayload(ctx interface{}, slot interface{}, parentBlockRoot interface{}) *Builder_RetrievePayload_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	return &Builder_RetrievePayload_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{Call: _e.mock.On("RetrievePayload", ctx, slot, parentBlockRoot)}
}

func (_c *Builder_RetrievePayload_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Run(run func(ctx context.Context, slot math.U64, parentBlockRoot bytes.B32)) *Builder_RetrievePayload_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(math.U64), args[2].(bytes.B32))
	})
	return _c
}

func (_c *Builder_RetrievePayload_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Return(_a0 ExecutionPayloadEnvelopeT, _a1 error) *Builder_RetrievePayload_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Builder_RetrievePayload_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RunAndReturn(run func(context.Context, math.U64, bytes.B32) (ExecutionPayloadEnvelopeT, error)) *Builder_RetrievePayload_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// SendForceHeadFCU provides a mock function with given fields: ctx, st, slot
func (_m *Builder[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) SendForceHeadFCU(ctx context.Context, st BeaconStateT, slot math.U64) error {
	ret := _m.Called(ctx, st, slot)

	if len(ret) == 0 {
		panic("no return value specified for SendForceHeadFCU")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, BeaconStateT, math.U64) error); ok {
		r0 = rf(ctx, st, slot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Builder_SendForceHeadFCU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendForceHeadFCU'
type Builder_SendForceHeadFCU_Call[BeaconStateT interface{}, BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT interface{}] struct {
	*mock.Call
}

// SendForceHeadFCU is a helper method to define mock.On call
//   - ctx context.Context
//   - st BeaconStateT
//   - slot math.U64
func (_e *Builder_Expecter[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) SendForceHeadFCU(ctx interface{}, st interface{}, slot interface{}) *Builder_SendForceHeadFCU_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	return &Builder_SendForceHeadFCU_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{Call: _e.mock.On("SendForceHeadFCU", ctx, st, slot)}
}

func (_c *Builder_SendForceHeadFCU_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Run(run func(ctx context.Context, st BeaconStateT, slot math.U64)) *Builder_SendForceHeadFCU_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(BeaconStateT), args[2].(math.U64))
	})
	return _c
}

func (_c *Builder_SendForceHeadFCU_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Return(_a0 error) *Builder_SendForceHeadFCU_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_SendForceHeadFCU_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RunAndReturn(run func(context.Context, BeaconStateT, math.U64) error) *Builder_SendForceHeadFCU_Call[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuilder[BeaconStateT interface{}, BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Builder[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	mock := &Builder[BeaconStateT, BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
