// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	mock "github.com/stretchr/testify/mock"
)

// AvailabilityStore is an autogenerated mock type for the AvailabilityStore type
type AvailabilityStore[BeaconBlockBodyT interface{}, BlobSidecarsT interface{}] struct {
	mock.Mock
}

type AvailabilityStore_Expecter[BeaconBlockBodyT interface{}, BlobSidecarsT interface{}] struct {
	mock *mock.Mock
}

func (_m *AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT]) EXPECT() *AvailabilityStore_Expecter[BeaconBlockBodyT, BlobSidecarsT] {
	return &AvailabilityStore_Expecter[BeaconBlockBodyT, BlobSidecarsT]{mock: &_m.Mock}
}

// IsDataAvailable provides a mock function with given fields: ctx, slot, body
func (_m *AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT]) IsDataAvailable(ctx context.Context, slot math.U64, body BeaconBlockBodyT) bool {
	ret := _m.Called(ctx, slot, body)

	if len(ret) == 0 {
		panic("no return value specified for IsDataAvailable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, math.U64, BeaconBlockBodyT) bool); ok {
		r0 = rf(ctx, slot, body)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AvailabilityStore_IsDataAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDataAvailable'
type AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT interface{}, BlobSidecarsT interface{}] struct {
	*mock.Call
}

// IsDataAvailable is a helper method to define mock.On call
//   - ctx context.Context
//   - slot math.U64
//   - body BeaconBlockBodyT
func (_e *AvailabilityStore_Expecter[BeaconBlockBodyT, BlobSidecarsT]) IsDataAvailable(ctx interface{}, slot interface{}, body interface{}) *AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT, BlobSidecarsT] {
	return &AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT, BlobSidecarsT]{Call: _e.mock.On("IsDataAvailable", ctx, slot, body)}
}

func (_c *AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT, BlobSidecarsT]) Run(run func(ctx context.Context, slot math.U64, body BeaconBlockBodyT)) *AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT, BlobSidecarsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(math.U64), args[2].(BeaconBlockBodyT))
	})
	return _c
}

func (_c *AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT, BlobSidecarsT]) Return(_a0 bool) *AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT, BlobSidecarsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT, BlobSidecarsT]) RunAndReturn(run func(context.Context, math.U64, BeaconBlockBodyT) bool) *AvailabilityStore_IsDataAvailable_Call[BeaconBlockBodyT, BlobSidecarsT] {
	_c.Call.Return(run)
	return _c
}

// Persist provides a mock function with given fields: slot, sidecars
func (_m *AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT]) Persist(slot math.U64, sidecars BlobSidecarsT) error {
	ret := _m.Called(slot, sidecars)

	if len(ret) == 0 {
		panic("no return value specified for Persist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64, BlobSidecarsT) error); ok {
		r0 = rf(slot, sidecars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AvailabilityStore_Persist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persist'
type AvailabilityStore_Persist_Call[BeaconBlockBodyT interface{}, BlobSidecarsT interface{}] struct {
	*mock.Call
}

// Persist is a helper method to define mock.On call
//   - slot math.U64
//   - sidecars BlobSidecarsT
func (_e *AvailabilityStore_Expecter[BeaconBlockBodyT, BlobSidecarsT]) Persist(slot interface{}, sidecars interface{}) *AvailabilityStore_Persist_Call[BeaconBlockBodyT, BlobSidecarsT] {
	return &AvailabilityStore_Persist_Call[BeaconBlockBodyT, BlobSidecarsT]{Call: _e.mock.On("Persist", slot, sidecars)}
}

func (_c *AvailabilityStore_Persist_Call[BeaconBlockBodyT, BlobSidecarsT]) Run(run func(slot math.U64, sidecars BlobSidecarsT)) *AvailabilityStore_Persist_Call[BeaconBlockBodyT, BlobSidecarsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(BlobSidecarsT))
	})
	return _c
}

func (_c *AvailabilityStore_Persist_Call[BeaconBlockBodyT, BlobSidecarsT]) Return(_a0 error) *AvailabilityStore_Persist_Call[BeaconBlockBodyT, BlobSidecarsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AvailabilityStore_Persist_Call[BeaconBlockBodyT, BlobSidecarsT]) RunAndReturn(run func(math.U64, BlobSidecarsT) error) *AvailabilityStore_Persist_Call[BeaconBlockBodyT, BlobSidecarsT] {
	_c.Call.Return(run)
	return _c
}

// NewAvailabilityStore creates a new instance of AvailabilityStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAvailabilityStore[BeaconBlockBodyT interface{}, BlobSidecarsT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT] {
	mock := &AvailabilityStore[BeaconBlockBodyT, BlobSidecarsT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
