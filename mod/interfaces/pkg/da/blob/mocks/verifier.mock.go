// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Verifier is an autogenerated mock type for the Verifier type
type Verifier[BlobSidecarsT interface{}] struct {
	mock.Mock
}

type Verifier_Expecter[BlobSidecarsT interface{}] struct {
	mock *mock.Mock
}

func (_m *Verifier[BlobSidecarsT]) EXPECT() *Verifier_Expecter[BlobSidecarsT] {
	return &Verifier_Expecter[BlobSidecarsT]{mock: &_m.Mock}
}

// VerifyInclusionProofs provides a mock function with given fields: scs, kzgOffset
func (_m *Verifier[BlobSidecarsT]) VerifyInclusionProofs(scs BlobSidecarsT, kzgOffset uint64) error {
	ret := _m.Called(scs, kzgOffset)

	if len(ret) == 0 {
		panic("no return value specified for VerifyInclusionProofs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BlobSidecarsT, uint64) error); ok {
		r0 = rf(scs, kzgOffset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verifier_VerifyInclusionProofs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyInclusionProofs'
type Verifier_VerifyInclusionProofs_Call[BlobSidecarsT interface{}] struct {
	*mock.Call
}

// VerifyInclusionProofs is a helper method to define mock.On call
//   - scs BlobSidecarsT
//   - kzgOffset uint64
func (_e *Verifier_Expecter[BlobSidecarsT]) VerifyInclusionProofs(scs interface{}, kzgOffset interface{}) *Verifier_VerifyInclusionProofs_Call[BlobSidecarsT] {
	return &Verifier_VerifyInclusionProofs_Call[BlobSidecarsT]{Call: _e.mock.On("VerifyInclusionProofs", scs, kzgOffset)}
}

func (_c *Verifier_VerifyInclusionProofs_Call[BlobSidecarsT]) Run(run func(scs BlobSidecarsT, kzgOffset uint64)) *Verifier_VerifyInclusionProofs_Call[BlobSidecarsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BlobSidecarsT), args[1].(uint64))
	})
	return _c
}

func (_c *Verifier_VerifyInclusionProofs_Call[BlobSidecarsT]) Return(_a0 error) *Verifier_VerifyInclusionProofs_Call[BlobSidecarsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Verifier_VerifyInclusionProofs_Call[BlobSidecarsT]) RunAndReturn(run func(BlobSidecarsT, uint64) error) *Verifier_VerifyInclusionProofs_Call[BlobSidecarsT] {
	_c.Call.Return(run)
	return _c
}

// VerifyKZGProofs provides a mock function with given fields: scs
func (_m *Verifier[BlobSidecarsT]) VerifyKZGProofs(scs BlobSidecarsT) error {
	ret := _m.Called(scs)

	if len(ret) == 0 {
		panic("no return value specified for VerifyKZGProofs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BlobSidecarsT) error); ok {
		r0 = rf(scs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verifier_VerifyKZGProofs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyKZGProofs'
type Verifier_VerifyKZGProofs_Call[BlobSidecarsT interface{}] struct {
	*mock.Call
}

// VerifyKZGProofs is a helper method to define mock.On call
//   - scs BlobSidecarsT
func (_e *Verifier_Expecter[BlobSidecarsT]) VerifyKZGProofs(scs interface{}) *Verifier_VerifyKZGProofs_Call[BlobSidecarsT] {
	return &Verifier_VerifyKZGProofs_Call[BlobSidecarsT]{Call: _e.mock.On("VerifyKZGProofs", scs)}
}

func (_c *Verifier_VerifyKZGProofs_Call[BlobSidecarsT]) Run(run func(scs BlobSidecarsT)) *Verifier_VerifyKZGProofs_Call[BlobSidecarsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BlobSidecarsT))
	})
	return _c
}

func (_c *Verifier_VerifyKZGProofs_Call[BlobSidecarsT]) Return(_a0 error) *Verifier_VerifyKZGProofs_Call[BlobSidecarsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Verifier_VerifyKZGProofs_Call[BlobSidecarsT]) RunAndReturn(run func(BlobSidecarsT) error) *Verifier_VerifyKZGProofs_Call[BlobSidecarsT] {
	_c.Call.Return(run)
	return _c
}

// VerifySidecars provides a mock function with given fields: sidecars, kzgOffset
func (_m *Verifier[BlobSidecarsT]) VerifySidecars(sidecars BlobSidecarsT, kzgOffset uint64) error {
	ret := _m.Called(sidecars, kzgOffset)

	if len(ret) == 0 {
		panic("no return value specified for VerifySidecars")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BlobSidecarsT, uint64) error); ok {
		r0 = rf(sidecars, kzgOffset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verifier_VerifySidecars_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySidecars'
type Verifier_VerifySidecars_Call[BlobSidecarsT interface{}] struct {
	*mock.Call
}

// VerifySidecars is a helper method to define mock.On call
//   - sidecars BlobSidecarsT
//   - kzgOffset uint64
func (_e *Verifier_Expecter[BlobSidecarsT]) VerifySidecars(sidecars interface{}, kzgOffset interface{}) *Verifier_VerifySidecars_Call[BlobSidecarsT] {
	return &Verifier_VerifySidecars_Call[BlobSidecarsT]{Call: _e.mock.On("VerifySidecars", sidecars, kzgOffset)}
}

func (_c *Verifier_VerifySidecars_Call[BlobSidecarsT]) Run(run func(sidecars BlobSidecarsT, kzgOffset uint64)) *Verifier_VerifySidecars_Call[BlobSidecarsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BlobSidecarsT), args[1].(uint64))
	})
	return _c
}

func (_c *Verifier_VerifySidecars_Call[BlobSidecarsT]) Return(_a0 error) *Verifier_VerifySidecars_Call[BlobSidecarsT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Verifier_VerifySidecars_Call[BlobSidecarsT]) RunAndReturn(run func(BlobSidecarsT, uint64) error) *Verifier_VerifySidecars_Call[BlobSidecarsT] {
	_c.Call.Return(run)
	return _c
}

// NewVerifier creates a new instance of Verifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerifier[BlobSidecarsT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Verifier[BlobSidecarsT] {
	mock := &Verifier[BlobSidecarsT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
