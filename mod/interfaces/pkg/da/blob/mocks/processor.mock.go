// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Processor is an autogenerated mock type for the Processor type
type Processor[AvailabilityStoreT interface{}, BeaconBlockBodyT interface{}, BlobSidecarsT interface{}, ExecutionPayloadT interface{}] struct {
	mock.Mock
}

type Processor_Expecter[AvailabilityStoreT interface{}, BeaconBlockBodyT interface{}, BlobSidecarsT interface{}, ExecutionPayloadT interface{}] struct {
	mock *mock.Mock
}

func (_m *Processor[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) EXPECT() *Processor_Expecter[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT] {
	return &Processor_Expecter[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]{mock: &_m.Mock}
}

// ProcessSidecars provides a mock function with given fields: avs, sidecars
func (_m *Processor[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) ProcessSidecars(avs AvailabilityStoreT, sidecars BlobSidecarsT) error {
	ret := _m.Called(avs, sidecars)

	if len(ret) == 0 {
		panic("no return value specified for ProcessSidecars")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(AvailabilityStoreT, BlobSidecarsT) error); ok {
		r0 = rf(avs, sidecars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Processor_ProcessSidecars_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessSidecars'
type Processor_ProcessSidecars_Call[AvailabilityStoreT interface{}, BeaconBlockBodyT interface{}, BlobSidecarsT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// ProcessSidecars is a helper method to define mock.On call
//   - avs AvailabilityStoreT
//   - sidecars BlobSidecarsT
func (_e *Processor_Expecter[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) ProcessSidecars(avs interface{}, sidecars interface{}) *Processor_ProcessSidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT] {
	return &Processor_ProcessSidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]{Call: _e.mock.On("ProcessSidecars", avs, sidecars)}
}

func (_c *Processor_ProcessSidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) Run(run func(avs AvailabilityStoreT, sidecars BlobSidecarsT)) *Processor_ProcessSidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(AvailabilityStoreT), args[1].(BlobSidecarsT))
	})
	return _c
}

func (_c *Processor_ProcessSidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) Return(_a0 error) *Processor_ProcessSidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Processor_ProcessSidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) RunAndReturn(run func(AvailabilityStoreT, BlobSidecarsT) error) *Processor_ProcessSidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// VerifySidecars provides a mock function with given fields: sidecars
func (_m *Processor[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) VerifySidecars(sidecars BlobSidecarsT) error {
	ret := _m.Called(sidecars)

	if len(ret) == 0 {
		panic("no return value specified for VerifySidecars")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BlobSidecarsT) error); ok {
		r0 = rf(sidecars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Processor_VerifySidecars_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySidecars'
type Processor_VerifySidecars_Call[AvailabilityStoreT interface{}, BeaconBlockBodyT interface{}, BlobSidecarsT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// VerifySidecars is a helper method to define mock.On call
//   - sidecars BlobSidecarsT
func (_e *Processor_Expecter[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) VerifySidecars(sidecars interface{}) *Processor_VerifySidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT] {
	return &Processor_VerifySidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]{Call: _e.mock.On("VerifySidecars", sidecars)}
}

func (_c *Processor_VerifySidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) Run(run func(sidecars BlobSidecarsT)) *Processor_VerifySidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BlobSidecarsT))
	})
	return _c
}

func (_c *Processor_VerifySidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) Return(_a0 error) *Processor_VerifySidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Processor_VerifySidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]) RunAndReturn(run func(BlobSidecarsT) error) *Processor_VerifySidecars_Call[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// NewProcessor creates a new instance of Processor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessor[AvailabilityStoreT interface{}, BeaconBlockBodyT interface{}, BlobSidecarsT interface{}, ExecutionPayloadT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Processor[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT] {
	mock := &Processor[AvailabilityStoreT, BeaconBlockBodyT, BlobSidecarsT, ExecutionPayloadT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
