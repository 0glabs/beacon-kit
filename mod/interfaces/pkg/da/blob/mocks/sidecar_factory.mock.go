// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	mock "github.com/stretchr/testify/mock"
)

// SidecarFactory is an autogenerated mock type for the SidecarFactory type
type SidecarFactory[BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BlobsBundleT interface{}, BlobSidecarsT interface{}] struct {
	mock.Mock
}

type SidecarFactory_Expecter[BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BlobsBundleT interface{}, BlobSidecarsT interface{}] struct {
	mock *mock.Mock
}

func (_m *SidecarFactory[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) EXPECT() *SidecarFactory_Expecter[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	return &SidecarFactory_Expecter[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]{mock: &_m.Mock}
}

// BuildBlockBodyProof provides a mock function with given fields: body
func (_m *SidecarFactory[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) BuildBlockBodyProof(body BeaconBlockBodyT) ([][32]byte, error) {
	ret := _m.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for BuildBlockBodyProof")
	}

	var r0 [][32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(BeaconBlockBodyT) ([][32]byte, error)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(BeaconBlockBodyT) [][32]byte); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(BeaconBlockBodyT) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SidecarFactory_BuildBlockBodyProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildBlockBodyProof'
type SidecarFactory_BuildBlockBodyProof_Call[BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BlobsBundleT interface{}, BlobSidecarsT interface{}] struct {
	*mock.Call
}

// BuildBlockBodyProof is a helper method to define mock.On call
//   - body BeaconBlockBodyT
func (_e *SidecarFactory_Expecter[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) BuildBlockBodyProof(body interface{}) *SidecarFactory_BuildBlockBodyProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	return &SidecarFactory_BuildBlockBodyProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]{Call: _e.mock.On("BuildBlockBodyProof", body)}
}

func (_c *SidecarFactory_BuildBlockBodyProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) Run(run func(body BeaconBlockBodyT)) *SidecarFactory_BuildBlockBodyProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BeaconBlockBodyT))
	})
	return _c
}

func (_c *SidecarFactory_BuildBlockBodyProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) Return(_a0 [][32]byte, _a1 error) *SidecarFactory_BuildBlockBodyProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SidecarFactory_BuildBlockBodyProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) RunAndReturn(run func(BeaconBlockBodyT) ([][32]byte, error)) *SidecarFactory_BuildBlockBodyProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Return(run)
	return _c
}

// BuildCommitmentProof provides a mock function with given fields: body, index
func (_m *SidecarFactory[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) BuildCommitmentProof(body BeaconBlockBodyT, index math.U64) ([][32]byte, error) {
	ret := _m.Called(body, index)

	if len(ret) == 0 {
		panic("no return value specified for BuildCommitmentProof")
	}

	var r0 [][32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(BeaconBlockBodyT, math.U64) ([][32]byte, error)); ok {
		return rf(body, index)
	}
	if rf, ok := ret.Get(0).(func(BeaconBlockBodyT, math.U64) [][32]byte); ok {
		r0 = rf(body, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(BeaconBlockBodyT, math.U64) error); ok {
		r1 = rf(body, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SidecarFactory_BuildCommitmentProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildCommitmentProof'
type SidecarFactory_BuildCommitmentProof_Call[BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BlobsBundleT interface{}, BlobSidecarsT interface{}] struct {
	*mock.Call
}

// BuildCommitmentProof is a helper method to define mock.On call
//   - body BeaconBlockBodyT
//   - index math.U64
func (_e *SidecarFactory_Expecter[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) BuildCommitmentProof(body interface{}, index interface{}) *SidecarFactory_BuildCommitmentProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	return &SidecarFactory_BuildCommitmentProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]{Call: _e.mock.On("BuildCommitmentProof", body, index)}
}

func (_c *SidecarFactory_BuildCommitmentProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) Run(run func(body BeaconBlockBodyT, index math.U64)) *SidecarFactory_BuildCommitmentProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BeaconBlockBodyT), args[1].(math.U64))
	})
	return _c
}

func (_c *SidecarFactory_BuildCommitmentProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) Return(_a0 [][32]byte, _a1 error) *SidecarFactory_BuildCommitmentProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SidecarFactory_BuildCommitmentProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) RunAndReturn(run func(BeaconBlockBodyT, math.U64) ([][32]byte, error)) *SidecarFactory_BuildCommitmentProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Return(run)
	return _c
}

// BuildKZGInclusionProof provides a mock function with given fields: body, index
func (_m *SidecarFactory[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) BuildKZGInclusionProof(body BeaconBlockBodyT, index math.U64) ([][32]byte, error) {
	ret := _m.Called(body, index)

	if len(ret) == 0 {
		panic("no return value specified for BuildKZGInclusionProof")
	}

	var r0 [][32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(BeaconBlockBodyT, math.U64) ([][32]byte, error)); ok {
		return rf(body, index)
	}
	if rf, ok := ret.Get(0).(func(BeaconBlockBodyT, math.U64) [][32]byte); ok {
		r0 = rf(body, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(BeaconBlockBodyT, math.U64) error); ok {
		r1 = rf(body, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SidecarFactory_BuildKZGInclusionProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildKZGInclusionProof'
type SidecarFactory_BuildKZGInclusionProof_Call[BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BlobsBundleT interface{}, BlobSidecarsT interface{}] struct {
	*mock.Call
}

// BuildKZGInclusionProof is a helper method to define mock.On call
//   - body BeaconBlockBodyT
//   - index math.U64
func (_e *SidecarFactory_Expecter[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) BuildKZGInclusionProof(body interface{}, index interface{}) *SidecarFactory_BuildKZGInclusionProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	return &SidecarFactory_BuildKZGInclusionProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]{Call: _e.mock.On("BuildKZGInclusionProof", body, index)}
}

func (_c *SidecarFactory_BuildKZGInclusionProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) Run(run func(body BeaconBlockBodyT, index math.U64)) *SidecarFactory_BuildKZGInclusionProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BeaconBlockBodyT), args[1].(math.U64))
	})
	return _c
}

func (_c *SidecarFactory_BuildKZGInclusionProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) Return(_a0 [][32]byte, _a1 error) *SidecarFactory_BuildKZGInclusionProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SidecarFactory_BuildKZGInclusionProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) RunAndReturn(run func(BeaconBlockBodyT, math.U64) ([][32]byte, error)) *SidecarFactory_BuildKZGInclusionProof_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Return(run)
	return _c
}

// BuildSidecars provides a mock function with given fields: blk, bundle
func (_m *SidecarFactory[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) BuildSidecars(blk BeaconBlockT, bundle BlobsBundleT) (BlobSidecarsT, error) {
	ret := _m.Called(blk, bundle)

	if len(ret) == 0 {
		panic("no return value specified for BuildSidecars")
	}

	var r0 BlobSidecarsT
	var r1 error
	if rf, ok := ret.Get(0).(func(BeaconBlockT, BlobsBundleT) (BlobSidecarsT, error)); ok {
		return rf(blk, bundle)
	}
	if rf, ok := ret.Get(0).(func(BeaconBlockT, BlobsBundleT) BlobSidecarsT); ok {
		r0 = rf(blk, bundle)
	} else {
		r0 = ret.Get(0).(BlobSidecarsT)
	}

	if rf, ok := ret.Get(1).(func(BeaconBlockT, BlobsBundleT) error); ok {
		r1 = rf(blk, bundle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SidecarFactory_BuildSidecars_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildSidecars'
type SidecarFactory_BuildSidecars_Call[BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BlobsBundleT interface{}, BlobSidecarsT interface{}] struct {
	*mock.Call
}

// BuildSidecars is a helper method to define mock.On call
//   - blk BeaconBlockT
//   - bundle BlobsBundleT
func (_e *SidecarFactory_Expecter[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) BuildSidecars(blk interface{}, bundle interface{}) *SidecarFactory_BuildSidecars_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	return &SidecarFactory_BuildSidecars_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]{Call: _e.mock.On("BuildSidecars", blk, bundle)}
}

func (_c *SidecarFactory_BuildSidecars_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) Run(run func(blk BeaconBlockT, bundle BlobsBundleT)) *SidecarFactory_BuildSidecars_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BeaconBlockT), args[1].(BlobsBundleT))
	})
	return _c
}

func (_c *SidecarFactory_BuildSidecars_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) Return(_a0 BlobSidecarsT, _a1 error) *SidecarFactory_BuildSidecars_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SidecarFactory_BuildSidecars_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]) RunAndReturn(run func(BeaconBlockT, BlobsBundleT) (BlobSidecarsT, error)) *SidecarFactory_BuildSidecars_Call[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	_c.Call.Return(run)
	return _c
}

// NewSidecarFactory creates a new instance of SidecarFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSidecarFactory[BeaconBlockT interface{}, BeaconBlockBodyT interface{}, BlobsBundleT interface{}, BlobSidecarsT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *SidecarFactory[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT] {
	mock := &SidecarFactory[BeaconBlockT, BeaconBlockBodyT, BlobsBundleT, BlobSidecarsT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
