// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Logger is an autogenerated mock type for the Logger type
type Logger[KeyValT interface{}] struct {
	mock.Mock
}

type Logger_Expecter[KeyValT interface{}] struct {
	mock *mock.Mock
}

func (_m *Logger[KeyValT]) EXPECT() *Logger_Expecter[KeyValT] {
	return &Logger_Expecter[KeyValT]{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: msg, keyVals
func (_m *Logger[KeyValT]) Debug(msg string, keyVals ...KeyValT) {
	_va := make([]interface{}, len(keyVals))
	for _i := range keyVals {
		_va[_i] = keyVals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Logger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Logger_Debug_Call[KeyValT interface{}] struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - keyVals ...KeyValT
func (_e *Logger_Expecter[KeyValT]) Debug(msg interface{}, keyVals ...interface{}) *Logger_Debug_Call[KeyValT] {
	return &Logger_Debug_Call[KeyValT]{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *Logger_Debug_Call[KeyValT]) Run(run func(msg string, keyVals ...KeyValT)) *Logger_Debug_Call[KeyValT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]KeyValT, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(KeyValT)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debug_Call[KeyValT]) Return() *Logger_Debug_Call[KeyValT] {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debug_Call[KeyValT]) RunAndReturn(run func(string, ...KeyValT)) *Logger_Debug_Call[KeyValT] {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: msg, keyVals
func (_m *Logger[KeyValT]) Error(msg string, keyVals ...KeyValT) {
	_va := make([]interface{}, len(keyVals))
	for _i := range keyVals {
		_va[_i] = keyVals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Logger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Logger_Error_Call[KeyValT interface{}] struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - keyVals ...KeyValT
func (_e *Logger_Expecter[KeyValT]) Error(msg interface{}, keyVals ...interface{}) *Logger_Error_Call[KeyValT] {
	return &Logger_Error_Call[KeyValT]{Call: _e.mock.On("Error",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *Logger_Error_Call[KeyValT]) Run(run func(msg string, keyVals ...KeyValT)) *Logger_Error_Call[KeyValT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]KeyValT, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(KeyValT)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Error_Call[KeyValT]) Return() *Logger_Error_Call[KeyValT] {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Error_Call[KeyValT]) RunAndReturn(run func(string, ...KeyValT)) *Logger_Error_Call[KeyValT] {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: msg, keyVals
func (_m *Logger[KeyValT]) Info(msg string, keyVals ...KeyValT) {
	_va := make([]interface{}, len(keyVals))
	for _i := range keyVals {
		_va[_i] = keyVals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Logger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Logger_Info_Call[KeyValT interface{}] struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - keyVals ...KeyValT
func (_e *Logger_Expecter[KeyValT]) Info(msg interface{}, keyVals ...interface{}) *Logger_Info_Call[KeyValT] {
	return &Logger_Info_Call[KeyValT]{Call: _e.mock.On("Info",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *Logger_Info_Call[KeyValT]) Run(run func(msg string, keyVals ...KeyValT)) *Logger_Info_Call[KeyValT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]KeyValT, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(KeyValT)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Info_Call[KeyValT]) Return() *Logger_Info_Call[KeyValT] {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Info_Call[KeyValT]) RunAndReturn(run func(string, ...KeyValT)) *Logger_Info_Call[KeyValT] {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: msg, keyVals
func (_m *Logger[KeyValT]) Warn(msg string, keyVals ...KeyValT) {
	_va := make([]interface{}, len(keyVals))
	for _i := range keyVals {
		_va[_i] = keyVals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Logger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Logger_Warn_Call[KeyValT interface{}] struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - keyVals ...KeyValT
func (_e *Logger_Expecter[KeyValT]) Warn(msg interface{}, keyVals ...interface{}) *Logger_Warn_Call[KeyValT] {
	return &Logger_Warn_Call[KeyValT]{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *Logger_Warn_Call[KeyValT]) Run(run func(msg string, keyVals ...KeyValT)) *Logger_Warn_Call[KeyValT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]KeyValT, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(KeyValT)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warn_Call[KeyValT]) Return() *Logger_Warn_Call[KeyValT] {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warn_Call[KeyValT]) RunAndReturn(run func(string, ...KeyValT)) *Logger_Warn_Call[KeyValT] {
	_c.Call.Return(run)
	return _c
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger[KeyValT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger[KeyValT] {
	mock := &Logger[KeyValT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
