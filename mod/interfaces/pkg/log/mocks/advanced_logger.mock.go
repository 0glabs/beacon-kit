// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AdvancedLogger is an autogenerated mock type for the AdvancedLogger type
type AdvancedLogger[KeyValT interface{}, LoggerT interface{}] struct {
	mock.Mock
}

type AdvancedLogger_Expecter[KeyValT interface{}, LoggerT interface{}] struct {
	mock *mock.Mock
}

func (_m *AdvancedLogger[KeyValT, LoggerT]) EXPECT() *AdvancedLogger_Expecter[KeyValT, LoggerT] {
	return &AdvancedLogger_Expecter[KeyValT, LoggerT]{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: msg, keyVals
func (_m *AdvancedLogger[KeyValT, LoggerT]) Debug(msg string, keyVals ...KeyValT) {
	_va := make([]interface{}, len(keyVals))
	for _i := range keyVals {
		_va[_i] = keyVals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// AdvancedLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type AdvancedLogger_Debug_Call[KeyValT interface{}, LoggerT interface{}] struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - keyVals ...KeyValT
func (_e *AdvancedLogger_Expecter[KeyValT, LoggerT]) Debug(msg interface{}, keyVals ...interface{}) *AdvancedLogger_Debug_Call[KeyValT, LoggerT] {
	return &AdvancedLogger_Debug_Call[KeyValT, LoggerT]{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *AdvancedLogger_Debug_Call[KeyValT, LoggerT]) Run(run func(msg string, keyVals ...KeyValT)) *AdvancedLogger_Debug_Call[KeyValT, LoggerT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]KeyValT, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(KeyValT)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *AdvancedLogger_Debug_Call[KeyValT, LoggerT]) Return() *AdvancedLogger_Debug_Call[KeyValT, LoggerT] {
	_c.Call.Return()
	return _c
}

func (_c *AdvancedLogger_Debug_Call[KeyValT, LoggerT]) RunAndReturn(run func(string, ...KeyValT)) *AdvancedLogger_Debug_Call[KeyValT, LoggerT] {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: msg, keyVals
func (_m *AdvancedLogger[KeyValT, LoggerT]) Error(msg string, keyVals ...KeyValT) {
	_va := make([]interface{}, len(keyVals))
	for _i := range keyVals {
		_va[_i] = keyVals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// AdvancedLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type AdvancedLogger_Error_Call[KeyValT interface{}, LoggerT interface{}] struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - keyVals ...KeyValT
func (_e *AdvancedLogger_Expecter[KeyValT, LoggerT]) Error(msg interface{}, keyVals ...interface{}) *AdvancedLogger_Error_Call[KeyValT, LoggerT] {
	return &AdvancedLogger_Error_Call[KeyValT, LoggerT]{Call: _e.mock.On("Error",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *AdvancedLogger_Error_Call[KeyValT, LoggerT]) Run(run func(msg string, keyVals ...KeyValT)) *AdvancedLogger_Error_Call[KeyValT, LoggerT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]KeyValT, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(KeyValT)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *AdvancedLogger_Error_Call[KeyValT, LoggerT]) Return() *AdvancedLogger_Error_Call[KeyValT, LoggerT] {
	_c.Call.Return()
	return _c
}

func (_c *AdvancedLogger_Error_Call[KeyValT, LoggerT]) RunAndReturn(run func(string, ...KeyValT)) *AdvancedLogger_Error_Call[KeyValT, LoggerT] {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *AdvancedLogger[KeyValT, LoggerT]) Impl() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// AdvancedLogger_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type AdvancedLogger_Impl_Call[KeyValT interface{}, LoggerT interface{}] struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *AdvancedLogger_Expecter[KeyValT, LoggerT]) Impl() *AdvancedLogger_Impl_Call[KeyValT, LoggerT] {
	return &AdvancedLogger_Impl_Call[KeyValT, LoggerT]{Call: _e.mock.On("Impl")}
}

func (_c *AdvancedLogger_Impl_Call[KeyValT, LoggerT]) Run(run func()) *AdvancedLogger_Impl_Call[KeyValT, LoggerT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AdvancedLogger_Impl_Call[KeyValT, LoggerT]) Return(_a0 interface{}) *AdvancedLogger_Impl_Call[KeyValT, LoggerT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AdvancedLogger_Impl_Call[KeyValT, LoggerT]) RunAndReturn(run func() interface{}) *AdvancedLogger_Impl_Call[KeyValT, LoggerT] {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: msg, keyVals
func (_m *AdvancedLogger[KeyValT, LoggerT]) Info(msg string, keyVals ...KeyValT) {
	_va := make([]interface{}, len(keyVals))
	for _i := range keyVals {
		_va[_i] = keyVals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// AdvancedLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type AdvancedLogger_Info_Call[KeyValT interface{}, LoggerT interface{}] struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - keyVals ...KeyValT
func (_e *AdvancedLogger_Expecter[KeyValT, LoggerT]) Info(msg interface{}, keyVals ...interface{}) *AdvancedLogger_Info_Call[KeyValT, LoggerT] {
	return &AdvancedLogger_Info_Call[KeyValT, LoggerT]{Call: _e.mock.On("Info",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *AdvancedLogger_Info_Call[KeyValT, LoggerT]) Run(run func(msg string, keyVals ...KeyValT)) *AdvancedLogger_Info_Call[KeyValT, LoggerT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]KeyValT, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(KeyValT)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *AdvancedLogger_Info_Call[KeyValT, LoggerT]) Return() *AdvancedLogger_Info_Call[KeyValT, LoggerT] {
	_c.Call.Return()
	return _c
}

func (_c *AdvancedLogger_Info_Call[KeyValT, LoggerT]) RunAndReturn(run func(string, ...KeyValT)) *AdvancedLogger_Info_Call[KeyValT, LoggerT] {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: msg, keyVals
func (_m *AdvancedLogger[KeyValT, LoggerT]) Warn(msg string, keyVals ...KeyValT) {
	_va := make([]interface{}, len(keyVals))
	for _i := range keyVals {
		_va[_i] = keyVals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// AdvancedLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type AdvancedLogger_Warn_Call[KeyValT interface{}, LoggerT interface{}] struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - keyVals ...KeyValT
func (_e *AdvancedLogger_Expecter[KeyValT, LoggerT]) Warn(msg interface{}, keyVals ...interface{}) *AdvancedLogger_Warn_Call[KeyValT, LoggerT] {
	return &AdvancedLogger_Warn_Call[KeyValT, LoggerT]{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *AdvancedLogger_Warn_Call[KeyValT, LoggerT]) Run(run func(msg string, keyVals ...KeyValT)) *AdvancedLogger_Warn_Call[KeyValT, LoggerT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]KeyValT, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(KeyValT)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *AdvancedLogger_Warn_Call[KeyValT, LoggerT]) Return() *AdvancedLogger_Warn_Call[KeyValT, LoggerT] {
	_c.Call.Return()
	return _c
}

func (_c *AdvancedLogger_Warn_Call[KeyValT, LoggerT]) RunAndReturn(run func(string, ...KeyValT)) *AdvancedLogger_Warn_Call[KeyValT, LoggerT] {
	_c.Call.Return(run)
	return _c
}

// With provides a mock function with given fields: keyVals
func (_m *AdvancedLogger[KeyValT, LoggerT]) With(keyVals ...KeyValT) LoggerT {
	_va := make([]interface{}, len(keyVals))
	for _i := range keyVals {
		_va[_i] = keyVals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for With")
	}

	var r0 LoggerT
	if rf, ok := ret.Get(0).(func(...KeyValT) LoggerT); ok {
		r0 = rf(keyVals...)
	} else {
		r0 = ret.Get(0).(LoggerT)
	}

	return r0
}

// AdvancedLogger_With_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'With'
type AdvancedLogger_With_Call[KeyValT interface{}, LoggerT interface{}] struct {
	*mock.Call
}

// With is a helper method to define mock.On call
//   - keyVals ...KeyValT
func (_e *AdvancedLogger_Expecter[KeyValT, LoggerT]) With(keyVals ...interface{}) *AdvancedLogger_With_Call[KeyValT, LoggerT] {
	return &AdvancedLogger_With_Call[KeyValT, LoggerT]{Call: _e.mock.On("With",
		append([]interface{}{}, keyVals...)...)}
}

func (_c *AdvancedLogger_With_Call[KeyValT, LoggerT]) Run(run func(keyVals ...KeyValT)) *AdvancedLogger_With_Call[KeyValT, LoggerT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]KeyValT, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(KeyValT)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *AdvancedLogger_With_Call[KeyValT, LoggerT]) Return(_a0 LoggerT) *AdvancedLogger_With_Call[KeyValT, LoggerT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AdvancedLogger_With_Call[KeyValT, LoggerT]) RunAndReturn(run func(...KeyValT) LoggerT) *AdvancedLogger_With_Call[KeyValT, LoggerT] {
	_c.Call.Return(run)
	return _c
}

// NewAdvancedLogger creates a new instance of AdvancedLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdvancedLogger[KeyValT interface{}, LoggerT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *AdvancedLogger[KeyValT, LoggerT] {
	mock := &AdvancedLogger[KeyValT, LoggerT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
