// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Receiver is an autogenerated mock type for the Receiver type
type Receiver[InT interface{}, OutT interface{}] struct {
	mock.Mock
}

type Receiver_Expecter[InT interface{}, OutT interface{}] struct {
	mock *mock.Mock
}

func (_m *Receiver[InT, OutT]) EXPECT() *Receiver_Expecter[InT, OutT] {
	return &Receiver_Expecter[InT, OutT]{mock: &_m.Mock}
}

// Request provides a mock function with given fields: ctx, ref
func (_m *Receiver[InT, OutT]) Request(ctx context.Context, ref InT) (OutT, error) {
	ret := _m.Called(ctx, ref)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 OutT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, InT) (OutT, error)); ok {
		return rf(ctx, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, InT) OutT); ok {
		r0 = rf(ctx, ref)
	} else {
		r0 = ret.Get(0).(OutT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, InT) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Receiver_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type Receiver_Request_Call[InT interface{}, OutT interface{}] struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctx context.Context
//   - ref InT
func (_e *Receiver_Expecter[InT, OutT]) Request(ctx interface{}, ref interface{}) *Receiver_Request_Call[InT, OutT] {
	return &Receiver_Request_Call[InT, OutT]{Call: _e.mock.On("Request", ctx, ref)}
}

func (_c *Receiver_Request_Call[InT, OutT]) Run(run func(ctx context.Context, ref InT)) *Receiver_Request_Call[InT, OutT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(InT))
	})
	return _c
}

func (_c *Receiver_Request_Call[InT, OutT]) Return(_a0 OutT, _a1 error) *Receiver_Request_Call[InT, OutT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Receiver_Request_Call[InT, OutT]) RunAndReturn(run func(context.Context, InT) (OutT, error)) *Receiver_Request_Call[InT, OutT] {
	_c.Call.Return(run)
	return _c
}

// NewReceiver creates a new instance of Receiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceiver[InT interface{}, OutT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Receiver[InT, OutT] {
	mock := &Receiver[InT, OutT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
