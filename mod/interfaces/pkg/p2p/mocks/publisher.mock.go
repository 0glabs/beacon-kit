// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Publisher is an autogenerated mock type for the Publisher type
type Publisher[InT interface{}, OutT interface{}] struct {
	mock.Mock
}

type Publisher_Expecter[InT interface{}, OutT interface{}] struct {
	mock *mock.Mock
}

func (_m *Publisher[InT, OutT]) EXPECT() *Publisher_Expecter[InT, OutT] {
	return &Publisher_Expecter[InT, OutT]{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, data
func (_m *Publisher[InT, OutT]) Publish(ctx context.Context, data InT) (OutT, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 OutT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, InT) (OutT, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, InT) OutT); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(OutT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, InT) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type Publisher_Publish_Call[InT interface{}, OutT interface{}] struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - data InT
func (_e *Publisher_Expecter[InT, OutT]) Publish(ctx interface{}, data interface{}) *Publisher_Publish_Call[InT, OutT] {
	return &Publisher_Publish_Call[InT, OutT]{Call: _e.mock.On("Publish", ctx, data)}
}

func (_c *Publisher_Publish_Call[InT, OutT]) Run(run func(ctx context.Context, data InT)) *Publisher_Publish_Call[InT, OutT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(InT))
	})
	return _c
}

func (_c *Publisher_Publish_Call[InT, OutT]) Return(_a0 OutT, _a1 error) *Publisher_Publish_Call[InT, OutT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Publisher_Publish_Call[InT, OutT]) RunAndReturn(run func(context.Context, InT) (OutT, error)) *Publisher_Publish_Call[InT, OutT] {
	_c.Call.Return(run)
	return _c
}

// NewPublisher creates a new instance of Publisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublisher[InT interface{}, OutT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Publisher[InT, OutT] {
	mock := &Publisher[InT, OutT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
