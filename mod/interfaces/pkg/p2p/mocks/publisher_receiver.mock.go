// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PublisherReceiver is an autogenerated mock type for the PublisherReceiver type
type PublisherReceiver[InPubT interface{}, OutPubT interface{}, InReceiverT interface{}, OutReceiverT interface{}] struct {
	mock.Mock
}

type PublisherReceiver_Expecter[InPubT interface{}, OutPubT interface{}, InReceiverT interface{}, OutReceiverT interface{}] struct {
	mock *mock.Mock
}

func (_m *PublisherReceiver[InPubT, OutPubT, InReceiverT, OutReceiverT]) EXPECT() *PublisherReceiver_Expecter[InPubT, OutPubT, InReceiverT, OutReceiverT] {
	return &PublisherReceiver_Expecter[InPubT, OutPubT, InReceiverT, OutReceiverT]{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, data
func (_m *PublisherReceiver[InPubT, OutPubT, InReceiverT, OutReceiverT]) Publish(ctx context.Context, data InPubT) (OutPubT, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 OutPubT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, InPubT) (OutPubT, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, InPubT) OutPubT); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(OutPubT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, InPubT) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherReceiver_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type PublisherReceiver_Publish_Call[InPubT interface{}, OutPubT interface{}, InReceiverT interface{}, OutReceiverT interface{}] struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - data InPubT
func (_e *PublisherReceiver_Expecter[InPubT, OutPubT, InReceiverT, OutReceiverT]) Publish(ctx interface{}, data interface{}) *PublisherReceiver_Publish_Call[InPubT, OutPubT, InReceiverT, OutReceiverT] {
	return &PublisherReceiver_Publish_Call[InPubT, OutPubT, InReceiverT, OutReceiverT]{Call: _e.mock.On("Publish", ctx, data)}
}

func (_c *PublisherReceiver_Publish_Call[InPubT, OutPubT, InReceiverT, OutReceiverT]) Run(run func(ctx context.Context, data InPubT)) *PublisherReceiver_Publish_Call[InPubT, OutPubT, InReceiverT, OutReceiverT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(InPubT))
	})
	return _c
}

func (_c *PublisherReceiver_Publish_Call[InPubT, OutPubT, InReceiverT, OutReceiverT]) Return(_a0 OutPubT, _a1 error) *PublisherReceiver_Publish_Call[InPubT, OutPubT, InReceiverT, OutReceiverT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherReceiver_Publish_Call[InPubT, OutPubT, InReceiverT, OutReceiverT]) RunAndReturn(run func(context.Context, InPubT) (OutPubT, error)) *PublisherReceiver_Publish_Call[InPubT, OutPubT, InReceiverT, OutReceiverT] {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: ctx, ref
func (_m *PublisherReceiver[InPubT, OutPubT, InReceiverT, OutReceiverT]) Request(ctx context.Context, ref InReceiverT) (OutReceiverT, error) {
	ret := _m.Called(ctx, ref)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 OutReceiverT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, InReceiverT) (OutReceiverT, error)); ok {
		return rf(ctx, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, InReceiverT) OutReceiverT); ok {
		r0 = rf(ctx, ref)
	} else {
		r0 = ret.Get(0).(OutReceiverT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, InReceiverT) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherReceiver_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type PublisherReceiver_Request_Call[InPubT interface{}, OutPubT interface{}, InReceiverT interface{}, OutReceiverT interface{}] struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctx context.Context
//   - ref InReceiverT
func (_e *PublisherReceiver_Expecter[InPubT, OutPubT, InReceiverT, OutReceiverT]) Request(ctx interface{}, ref interface{}) *PublisherReceiver_Request_Call[InPubT, OutPubT, InReceiverT, OutReceiverT] {
	return &PublisherReceiver_Request_Call[InPubT, OutPubT, InReceiverT, OutReceiverT]{Call: _e.mock.On("Request", ctx, ref)}
}

func (_c *PublisherReceiver_Request_Call[InPubT, OutPubT, InReceiverT, OutReceiverT]) Run(run func(ctx context.Context, ref InReceiverT)) *PublisherReceiver_Request_Call[InPubT, OutPubT, InReceiverT, OutReceiverT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(InReceiverT))
	})
	return _c
}

func (_c *PublisherReceiver_Request_Call[InPubT, OutPubT, InReceiverT, OutReceiverT]) Return(_a0 OutReceiverT, _a1 error) *PublisherReceiver_Request_Call[InPubT, OutPubT, InReceiverT, OutReceiverT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherReceiver_Request_Call[InPubT, OutPubT, InReceiverT, OutReceiverT]) RunAndReturn(run func(context.Context, InReceiverT) (OutReceiverT, error)) *PublisherReceiver_Request_Call[InPubT, OutPubT, InReceiverT, OutReceiverT] {
	_c.Call.Return(run)
	return _c
}

// NewPublisherReceiver creates a new instance of PublisherReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublisherReceiver[InPubT interface{}, OutPubT interface{}, InReceiverT interface{}, OutReceiverT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *PublisherReceiver[InPubT, OutPubT, InReceiverT, OutReceiverT] {
	mock := &PublisherReceiver[InPubT, OutPubT, InReceiverT, OutReceiverT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
