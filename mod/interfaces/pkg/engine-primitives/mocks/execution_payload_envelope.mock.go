// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	mock "github.com/stretchr/testify/mock"
)

// ExecutionPayloadEnvelope is an autogenerated mock type for the ExecutionPayloadEnvelope type
type ExecutionPayloadEnvelope[T interface{}, BlobsBundleT interface{}, ExecutionPayloadT interface{}] struct {
	mock.Mock
}

type ExecutionPayloadEnvelope_Expecter[T interface{}, BlobsBundleT interface{}, ExecutionPayloadT interface{}] struct {
	mock *mock.Mock
}

func (_m *ExecutionPayloadEnvelope[T, BlobsBundleT, ExecutionPayloadT]) EXPECT() *ExecutionPayloadEnvelope_Expecter[T, BlobsBundleT, ExecutionPayloadT] {
	return &ExecutionPayloadEnvelope_Expecter[T, BlobsBundleT, ExecutionPayloadT]{mock: &_m.Mock}
}

// GetBlobsBundle provides a mock function with given fields:
func (_m *ExecutionPayloadEnvelope[T, BlobsBundleT, ExecutionPayloadT]) GetBlobsBundle() BlobsBundleT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobsBundle")
	}

	var r0 BlobsBundleT
	if rf, ok := ret.Get(0).(func() BlobsBundleT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(BlobsBundleT)
	}

	return r0
}

// ExecutionPayloadEnvelope_GetBlobsBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobsBundle'
type ExecutionPayloadEnvelope_GetBlobsBundle_Call[T interface{}, BlobsBundleT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetBlobsBundle is a helper method to define mock.On call
func (_e *ExecutionPayloadEnvelope_Expecter[T, BlobsBundleT, ExecutionPayloadT]) GetBlobsBundle() *ExecutionPayloadEnvelope_GetBlobsBundle_Call[T, BlobsBundleT, ExecutionPayloadT] {
	return &ExecutionPayloadEnvelope_GetBlobsBundle_Call[T, BlobsBundleT, ExecutionPayloadT]{Call: _e.mock.On("GetBlobsBundle")}
}

func (_c *ExecutionPayloadEnvelope_GetBlobsBundle_Call[T, BlobsBundleT, ExecutionPayloadT]) Run(run func()) *ExecutionPayloadEnvelope_GetBlobsBundle_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadEnvelope_GetBlobsBundle_Call[T, BlobsBundleT, ExecutionPayloadT]) Return(_a0 BlobsBundleT) *ExecutionPayloadEnvelope_GetBlobsBundle_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadEnvelope_GetBlobsBundle_Call[T, BlobsBundleT, ExecutionPayloadT]) RunAndReturn(run func() BlobsBundleT) *ExecutionPayloadEnvelope_GetBlobsBundle_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetExecutionPayload provides a mock function with given fields:
func (_m *ExecutionPayloadEnvelope[T, BlobsBundleT, ExecutionPayloadT]) GetExecutionPayload() ExecutionPayloadT {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionPayload")
	}

	var r0 ExecutionPayloadT
	if rf, ok := ret.Get(0).(func() ExecutionPayloadT); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ExecutionPayloadT)
	}

	return r0
}

// ExecutionPayloadEnvelope_GetExecutionPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionPayload'
type ExecutionPayloadEnvelope_GetExecutionPayload_Call[T interface{}, BlobsBundleT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetExecutionPayload is a helper method to define mock.On call
func (_e *ExecutionPayloadEnvelope_Expecter[T, BlobsBundleT, ExecutionPayloadT]) GetExecutionPayload() *ExecutionPayloadEnvelope_GetExecutionPayload_Call[T, BlobsBundleT, ExecutionPayloadT] {
	return &ExecutionPayloadEnvelope_GetExecutionPayload_Call[T, BlobsBundleT, ExecutionPayloadT]{Call: _e.mock.On("GetExecutionPayload")}
}

func (_c *ExecutionPayloadEnvelope_GetExecutionPayload_Call[T, BlobsBundleT, ExecutionPayloadT]) Run(run func()) *ExecutionPayloadEnvelope_GetExecutionPayload_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadEnvelope_GetExecutionPayload_Call[T, BlobsBundleT, ExecutionPayloadT]) Return(_a0 ExecutionPayloadT) *ExecutionPayloadEnvelope_GetExecutionPayload_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadEnvelope_GetExecutionPayload_Call[T, BlobsBundleT, ExecutionPayloadT]) RunAndReturn(run func() ExecutionPayloadT) *ExecutionPayloadEnvelope_GetExecutionPayload_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// GetValue provides a mock function with given fields:
func (_m *ExecutionPayloadEnvelope[T, BlobsBundleT, ExecutionPayloadT]) GetValue() math.U256L {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 math.U256L
	if rf, ok := ret.Get(0).(func() math.U256L); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(math.U256L)
		}
	}

	return r0
}

// ExecutionPayloadEnvelope_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type ExecutionPayloadEnvelope_GetValue_Call[T interface{}, BlobsBundleT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
func (_e *ExecutionPayloadEnvelope_Expecter[T, BlobsBundleT, ExecutionPayloadT]) GetValue() *ExecutionPayloadEnvelope_GetValue_Call[T, BlobsBundleT, ExecutionPayloadT] {
	return &ExecutionPayloadEnvelope_GetValue_Call[T, BlobsBundleT, ExecutionPayloadT]{Call: _e.mock.On("GetValue")}
}

func (_c *ExecutionPayloadEnvelope_GetValue_Call[T, BlobsBundleT, ExecutionPayloadT]) Run(run func()) *ExecutionPayloadEnvelope_GetValue_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadEnvelope_GetValue_Call[T, BlobsBundleT, ExecutionPayloadT]) Return(_a0 math.U256L) *ExecutionPayloadEnvelope_GetValue_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadEnvelope_GetValue_Call[T, BlobsBundleT, ExecutionPayloadT]) RunAndReturn(run func() math.U256L) *ExecutionPayloadEnvelope_GetValue_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *ExecutionPayloadEnvelope[T, BlobsBundleT, ExecutionPayloadT]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutionPayloadEnvelope_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type ExecutionPayloadEnvelope_IsNil_Call[T interface{}, BlobsBundleT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *ExecutionPayloadEnvelope_Expecter[T, BlobsBundleT, ExecutionPayloadT]) IsNil() *ExecutionPayloadEnvelope_IsNil_Call[T, BlobsBundleT, ExecutionPayloadT] {
	return &ExecutionPayloadEnvelope_IsNil_Call[T, BlobsBundleT, ExecutionPayloadT]{Call: _e.mock.On("IsNil")}
}

func (_c *ExecutionPayloadEnvelope_IsNil_Call[T, BlobsBundleT, ExecutionPayloadT]) Run(run func()) *ExecutionPayloadEnvelope_IsNil_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadEnvelope_IsNil_Call[T, BlobsBundleT, ExecutionPayloadT]) Return(_a0 bool) *ExecutionPayloadEnvelope_IsNil_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadEnvelope_IsNil_Call[T, BlobsBundleT, ExecutionPayloadT]) RunAndReturn(run func() bool) *ExecutionPayloadEnvelope_IsNil_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: blobsBundle, payload
func (_m *ExecutionPayloadEnvelope[T, BlobsBundleT, ExecutionPayloadT]) New(blobsBundle BlobsBundleT, payload ExecutionPayloadT) T {
	ret := _m.Called(blobsBundle, payload)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(BlobsBundleT, ExecutionPayloadT) T); ok {
		r0 = rf(blobsBundle, payload)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// ExecutionPayloadEnvelope_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type ExecutionPayloadEnvelope_New_Call[T interface{}, BlobsBundleT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - blobsBundle BlobsBundleT
//   - payload ExecutionPayloadT
func (_e *ExecutionPayloadEnvelope_Expecter[T, BlobsBundleT, ExecutionPayloadT]) New(blobsBundle interface{}, payload interface{}) *ExecutionPayloadEnvelope_New_Call[T, BlobsBundleT, ExecutionPayloadT] {
	return &ExecutionPayloadEnvelope_New_Call[T, BlobsBundleT, ExecutionPayloadT]{Call: _e.mock.On("New", blobsBundle, payload)}
}

func (_c *ExecutionPayloadEnvelope_New_Call[T, BlobsBundleT, ExecutionPayloadT]) Run(run func(blobsBundle BlobsBundleT, payload ExecutionPayloadT)) *ExecutionPayloadEnvelope_New_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BlobsBundleT), args[1].(ExecutionPayloadT))
	})
	return _c
}

func (_c *ExecutionPayloadEnvelope_New_Call[T, BlobsBundleT, ExecutionPayloadT]) Return(_a0 T) *ExecutionPayloadEnvelope_New_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadEnvelope_New_Call[T, BlobsBundleT, ExecutionPayloadT]) RunAndReturn(run func(BlobsBundleT, ExecutionPayloadT) T) *ExecutionPayloadEnvelope_New_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// ShouldOverrideBuilder provides a mock function with given fields:
func (_m *ExecutionPayloadEnvelope[T, BlobsBundleT, ExecutionPayloadT]) ShouldOverrideBuilder() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShouldOverrideBuilder")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutionPayloadEnvelope_ShouldOverrideBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldOverrideBuilder'
type ExecutionPayloadEnvelope_ShouldOverrideBuilder_Call[T interface{}, BlobsBundleT interface{}, ExecutionPayloadT interface{}] struct {
	*mock.Call
}

// ShouldOverrideBuilder is a helper method to define mock.On call
func (_e *ExecutionPayloadEnvelope_Expecter[T, BlobsBundleT, ExecutionPayloadT]) ShouldOverrideBuilder() *ExecutionPayloadEnvelope_ShouldOverrideBuilder_Call[T, BlobsBundleT, ExecutionPayloadT] {
	return &ExecutionPayloadEnvelope_ShouldOverrideBuilder_Call[T, BlobsBundleT, ExecutionPayloadT]{Call: _e.mock.On("ShouldOverrideBuilder")}
}

func (_c *ExecutionPayloadEnvelope_ShouldOverrideBuilder_Call[T, BlobsBundleT, ExecutionPayloadT]) Run(run func()) *ExecutionPayloadEnvelope_ShouldOverrideBuilder_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionPayloadEnvelope_ShouldOverrideBuilder_Call[T, BlobsBundleT, ExecutionPayloadT]) Return(_a0 bool) *ExecutionPayloadEnvelope_ShouldOverrideBuilder_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionPayloadEnvelope_ShouldOverrideBuilder_Call[T, BlobsBundleT, ExecutionPayloadT]) RunAndReturn(run func() bool) *ExecutionPayloadEnvelope_ShouldOverrideBuilder_Call[T, BlobsBundleT, ExecutionPayloadT] {
	_c.Call.Return(run)
	return _c
}

// NewExecutionPayloadEnvelope creates a new instance of ExecutionPayloadEnvelope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionPayloadEnvelope[T interface{}, BlobsBundleT interface{}, ExecutionPayloadT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionPayloadEnvelope[T, BlobsBundleT, ExecutionPayloadT] {
	mock := &ExecutionPayloadEnvelope[T, BlobsBundleT, ExecutionPayloadT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
