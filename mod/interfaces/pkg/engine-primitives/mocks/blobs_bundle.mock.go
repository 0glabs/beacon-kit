// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// BlobsBundle is an autogenerated mock type for the BlobsBundle type
type BlobsBundle[C interface{ ~[48]byte }, P interface{ ~[48]byte }, B interface{ ~[131072]byte }] struct {
	mock.Mock
}

type BlobsBundle_Expecter[C interface{ ~[48]byte }, P interface{ ~[48]byte }, B interface{ ~[131072]byte }] struct {
	mock *mock.Mock
}

func (_m *BlobsBundle[C, P, B]) EXPECT() *BlobsBundle_Expecter[C, P, B] {
	return &BlobsBundle_Expecter[C, P, B]{mock: &_m.Mock}
}

// GetBlobs provides a mock function with given fields:
func (_m *BlobsBundle[C, P, B]) GetBlobs() []*B {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobs")
	}

	var r0 []*B
	if rf, ok := ret.Get(0).(func() []*B); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*B)
		}
	}

	return r0
}

// BlobsBundle_GetBlobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobs'
type BlobsBundle_GetBlobs_Call[C interface{ ~[48]byte }, P interface{ ~[48]byte }, B interface{ ~[131072]byte }] struct {
	*mock.Call
}

// GetBlobs is a helper method to define mock.On call
func (_e *BlobsBundle_Expecter[C, P, B]) GetBlobs() *BlobsBundle_GetBlobs_Call[C, P, B] {
	return &BlobsBundle_GetBlobs_Call[C, P, B]{Call: _e.mock.On("GetBlobs")}
}

func (_c *BlobsBundle_GetBlobs_Call[C, P, B]) Run(run func()) *BlobsBundle_GetBlobs_Call[C, P, B] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobsBundle_GetBlobs_Call[C, P, B]) Return(_a0 []*B) *BlobsBundle_GetBlobs_Call[C, P, B] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlobsBundle_GetBlobs_Call[C, P, B]) RunAndReturn(run func() []*B) *BlobsBundle_GetBlobs_Call[C, P, B] {
	_c.Call.Return(run)
	return _c
}

// GetCommitments provides a mock function with given fields:
func (_m *BlobsBundle[C, P, B]) GetCommitments() []C {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCommitments")
	}

	var r0 []C
	if rf, ok := ret.Get(0).(func() []C); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]C)
		}
	}

	return r0
}

// BlobsBundle_GetCommitments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitments'
type BlobsBundle_GetCommitments_Call[C interface{ ~[48]byte }, P interface{ ~[48]byte }, B interface{ ~[131072]byte }] struct {
	*mock.Call
}

// GetCommitments is a helper method to define mock.On call
func (_e *BlobsBundle_Expecter[C, P, B]) GetCommitments() *BlobsBundle_GetCommitments_Call[C, P, B] {
	return &BlobsBundle_GetCommitments_Call[C, P, B]{Call: _e.mock.On("GetCommitments")}
}

func (_c *BlobsBundle_GetCommitments_Call[C, P, B]) Run(run func()) *BlobsBundle_GetCommitments_Call[C, P, B] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobsBundle_GetCommitments_Call[C, P, B]) Return(_a0 []C) *BlobsBundle_GetCommitments_Call[C, P, B] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlobsBundle_GetCommitments_Call[C, P, B]) RunAndReturn(run func() []C) *BlobsBundle_GetCommitments_Call[C, P, B] {
	_c.Call.Return(run)
	return _c
}

// GetProofs provides a mock function with given fields:
func (_m *BlobsBundle[C, P, B]) GetProofs() []P {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProofs")
	}

	var r0 []P
	if rf, ok := ret.Get(0).(func() []P); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]P)
		}
	}

	return r0
}

// BlobsBundle_GetProofs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProofs'
type BlobsBundle_GetProofs_Call[C interface{ ~[48]byte }, P interface{ ~[48]byte }, B interface{ ~[131072]byte }] struct {
	*mock.Call
}

// GetProofs is a helper method to define mock.On call
func (_e *BlobsBundle_Expecter[C, P, B]) GetProofs() *BlobsBundle_GetProofs_Call[C, P, B] {
	return &BlobsBundle_GetProofs_Call[C, P, B]{Call: _e.mock.On("GetProofs")}
}

func (_c *BlobsBundle_GetProofs_Call[C, P, B]) Run(run func()) *BlobsBundle_GetProofs_Call[C, P, B] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobsBundle_GetProofs_Call[C, P, B]) Return(_a0 []P) *BlobsBundle_GetProofs_Call[C, P, B] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlobsBundle_GetProofs_Call[C, P, B]) RunAndReturn(run func() []P) *BlobsBundle_GetProofs_Call[C, P, B] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *BlobsBundle[C, P, B]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BlobsBundle_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type BlobsBundle_IsNil_Call[C interface{ ~[48]byte }, P interface{ ~[48]byte }, B interface{ ~[131072]byte }] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *BlobsBundle_Expecter[C, P, B]) IsNil() *BlobsBundle_IsNil_Call[C, P, B] {
	return &BlobsBundle_IsNil_Call[C, P, B]{Call: _e.mock.On("IsNil")}
}

func (_c *BlobsBundle_IsNil_Call[C, P, B]) Run(run func()) *BlobsBundle_IsNil_Call[C, P, B] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlobsBundle_IsNil_Call[C, P, B]) Return(_a0 bool) *BlobsBundle_IsNil_Call[C, P, B] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlobsBundle_IsNil_Call[C, P, B]) RunAndReturn(run func() bool) *BlobsBundle_IsNil_Call[C, P, B] {
	_c.Call.Return(run)
	return _c
}

// NewBlobsBundle creates a new instance of BlobsBundle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlobsBundle[C interface{ ~[48]byte }, P interface{ ~[48]byte }, B interface{ ~[131072]byte }](t interface {
	mock.TestingT
	Cleanup(func())
}) *BlobsBundle[C, P, B] {
	mock := &BlobsBundle[C, P, B]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
