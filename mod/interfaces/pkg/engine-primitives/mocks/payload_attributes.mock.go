// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// PayloadAttributes is an autogenerated mock type for the PayloadAttributes type
type PayloadAttributes[T interface{}, WithdrawalT interface{}] struct {
	mock.Mock
}

type PayloadAttributes_Expecter[T interface{}, WithdrawalT interface{}] struct {
	mock *mock.Mock
}

func (_m *PayloadAttributes[T, WithdrawalT]) EXPECT() *PayloadAttributes_Expecter[T, WithdrawalT] {
	return &PayloadAttributes_Expecter[T, WithdrawalT]{mock: &_m.Mock}
}

// GetSuggestedFeeRecipient provides a mock function with given fields:
func (_m *PayloadAttributes[T, WithdrawalT]) GetSuggestedFeeRecipient() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSuggestedFeeRecipient")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// PayloadAttributes_GetSuggestedFeeRecipient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSuggestedFeeRecipient'
type PayloadAttributes_GetSuggestedFeeRecipient_Call[T interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// GetSuggestedFeeRecipient is a helper method to define mock.On call
func (_e *PayloadAttributes_Expecter[T, WithdrawalT]) GetSuggestedFeeRecipient() *PayloadAttributes_GetSuggestedFeeRecipient_Call[T, WithdrawalT] {
	return &PayloadAttributes_GetSuggestedFeeRecipient_Call[T, WithdrawalT]{Call: _e.mock.On("GetSuggestedFeeRecipient")}
}

func (_c *PayloadAttributes_GetSuggestedFeeRecipient_Call[T, WithdrawalT]) Run(run func()) *PayloadAttributes_GetSuggestedFeeRecipient_Call[T, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PayloadAttributes_GetSuggestedFeeRecipient_Call[T, WithdrawalT]) Return(_a0 common.Address) *PayloadAttributes_GetSuggestedFeeRecipient_Call[T, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PayloadAttributes_GetSuggestedFeeRecipient_Call[T, WithdrawalT]) RunAndReturn(run func() common.Address) *PayloadAttributes_GetSuggestedFeeRecipient_Call[T, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *PayloadAttributes[T, WithdrawalT]) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PayloadAttributes_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type PayloadAttributes_IsNil_Call[T interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *PayloadAttributes_Expecter[T, WithdrawalT]) IsNil() *PayloadAttributes_IsNil_Call[T, WithdrawalT] {
	return &PayloadAttributes_IsNil_Call[T, WithdrawalT]{Call: _e.mock.On("IsNil")}
}

func (_c *PayloadAttributes_IsNil_Call[T, WithdrawalT]) Run(run func()) *PayloadAttributes_IsNil_Call[T, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PayloadAttributes_IsNil_Call[T, WithdrawalT]) Return(_a0 bool) *PayloadAttributes_IsNil_Call[T, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PayloadAttributes_IsNil_Call[T, WithdrawalT]) RunAndReturn(run func() bool) *PayloadAttributes_IsNil_Call[T, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: forkVersion, timestamp, prevRandao, suggestedFeeRecipient, withdrawals, parentBeaconBlockRoot
func (_m *PayloadAttributes[T, WithdrawalT]) New(forkVersion uint32, timestamp uint64, prevRandao bytes.B32, suggestedFeeRecipient common.Address, withdrawals []WithdrawalT, parentBeaconBlockRoot bytes.B32) (T, error) {
	ret := _m.Called(forkVersion, timestamp, prevRandao, suggestedFeeRecipient, withdrawals, parentBeaconBlockRoot)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32, uint64, bytes.B32, common.Address, []WithdrawalT, bytes.B32) (T, error)); ok {
		return rf(forkVersion, timestamp, prevRandao, suggestedFeeRecipient, withdrawals, parentBeaconBlockRoot)
	}
	if rf, ok := ret.Get(0).(func(uint32, uint64, bytes.B32, common.Address, []WithdrawalT, bytes.B32) T); ok {
		r0 = rf(forkVersion, timestamp, prevRandao, suggestedFeeRecipient, withdrawals, parentBeaconBlockRoot)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(uint32, uint64, bytes.B32, common.Address, []WithdrawalT, bytes.B32) error); ok {
		r1 = rf(forkVersion, timestamp, prevRandao, suggestedFeeRecipient, withdrawals, parentBeaconBlockRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayloadAttributes_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type PayloadAttributes_New_Call[T interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - forkVersion uint32
//   - timestamp uint64
//   - prevRandao bytes.B32
//   - suggestedFeeRecipient common.Address
//   - withdrawals []WithdrawalT
//   - parentBeaconBlockRoot bytes.B32
func (_e *PayloadAttributes_Expecter[T, WithdrawalT]) New(forkVersion interface{}, timestamp interface{}, prevRandao interface{}, suggestedFeeRecipient interface{}, withdrawals interface{}, parentBeaconBlockRoot interface{}) *PayloadAttributes_New_Call[T, WithdrawalT] {
	return &PayloadAttributes_New_Call[T, WithdrawalT]{Call: _e.mock.On("New", forkVersion, timestamp, prevRandao, suggestedFeeRecipient, withdrawals, parentBeaconBlockRoot)}
}

func (_c *PayloadAttributes_New_Call[T, WithdrawalT]) Run(run func(forkVersion uint32, timestamp uint64, prevRandao bytes.B32, suggestedFeeRecipient common.Address, withdrawals []WithdrawalT, parentBeaconBlockRoot bytes.B32)) *PayloadAttributes_New_Call[T, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32), args[1].(uint64), args[2].(bytes.B32), args[3].(common.Address), args[4].([]WithdrawalT), args[5].(bytes.B32))
	})
	return _c
}

func (_c *PayloadAttributes_New_Call[T, WithdrawalT]) Return(_a0 T, _a1 error) *PayloadAttributes_New_Call[T, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PayloadAttributes_New_Call[T, WithdrawalT]) RunAndReturn(run func(uint32, uint64, bytes.B32, common.Address, []WithdrawalT, bytes.B32) (T, error)) *PayloadAttributes_New_Call[T, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields:
func (_m *PayloadAttributes[T, WithdrawalT]) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PayloadAttributes_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type PayloadAttributes_Validate_Call[T interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *PayloadAttributes_Expecter[T, WithdrawalT]) Validate() *PayloadAttributes_Validate_Call[T, WithdrawalT] {
	return &PayloadAttributes_Validate_Call[T, WithdrawalT]{Call: _e.mock.On("Validate")}
}

func (_c *PayloadAttributes_Validate_Call[T, WithdrawalT]) Run(run func()) *PayloadAttributes_Validate_Call[T, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PayloadAttributes_Validate_Call[T, WithdrawalT]) Return(_a0 error) *PayloadAttributes_Validate_Call[T, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PayloadAttributes_Validate_Call[T, WithdrawalT]) RunAndReturn(run func() error) *PayloadAttributes_Validate_Call[T, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *PayloadAttributes[T, WithdrawalT]) Version() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// PayloadAttributes_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type PayloadAttributes_Version_Call[T interface{}, WithdrawalT interface{}] struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *PayloadAttributes_Expecter[T, WithdrawalT]) Version() *PayloadAttributes_Version_Call[T, WithdrawalT] {
	return &PayloadAttributes_Version_Call[T, WithdrawalT]{Call: _e.mock.On("Version")}
}

func (_c *PayloadAttributes_Version_Call[T, WithdrawalT]) Run(run func()) *PayloadAttributes_Version_Call[T, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PayloadAttributes_Version_Call[T, WithdrawalT]) Return(_a0 uint32) *PayloadAttributes_Version_Call[T, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PayloadAttributes_Version_Call[T, WithdrawalT]) RunAndReturn(run func() uint32) *PayloadAttributes_Version_Call[T, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// NewPayloadAttributes creates a new instance of PayloadAttributes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayloadAttributes[T interface{}, WithdrawalT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *PayloadAttributes[T, WithdrawalT] {
	mock := &PayloadAttributes[T, WithdrawalT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
