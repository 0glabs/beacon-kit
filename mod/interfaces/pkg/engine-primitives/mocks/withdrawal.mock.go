// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/mod/primitives/pkg/encoding/ssz/types"
)

// Withdrawal is an autogenerated mock type for the Withdrawal type
type Withdrawal[T interface{}] struct {
	mock.Mock
}

type Withdrawal_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Withdrawal[T]) EXPECT() *Withdrawal_Expecter[T] {
	return &Withdrawal_Expecter[T]{mock: &_m.Mock}
}

// Equals provides a mock function with given fields: other
func (_m *Withdrawal[T]) Equals(other T) bool {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for Equals")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(T) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Withdrawal_Equals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Equals'
type Withdrawal_Equals_Call[T interface{}] struct {
	*mock.Call
}

// Equals is a helper method to define mock.On call
//   - other T
func (_e *Withdrawal_Expecter[T]) Equals(other interface{}) *Withdrawal_Equals_Call[T] {
	return &Withdrawal_Equals_Call[T]{Call: _e.mock.On("Equals", other)}
}

func (_c *Withdrawal_Equals_Call[T]) Run(run func(other T)) *Withdrawal_Equals_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *Withdrawal_Equals_Call[T]) Return(_a0 bool) *Withdrawal_Equals_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Withdrawal_Equals_Call[T]) RunAndReturn(run func(T) bool) *Withdrawal_Equals_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetAddress provides a mock function with given fields:
func (_m *Withdrawal[T]) GetAddress() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// Withdrawal_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type Withdrawal_GetAddress_Call[T interface{}] struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
func (_e *Withdrawal_Expecter[T]) GetAddress() *Withdrawal_GetAddress_Call[T] {
	return &Withdrawal_GetAddress_Call[T]{Call: _e.mock.On("GetAddress")}
}

func (_c *Withdrawal_GetAddress_Call[T]) Run(run func()) *Withdrawal_GetAddress_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Withdrawal_GetAddress_Call[T]) Return(_a0 common.Address) *Withdrawal_GetAddress_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Withdrawal_GetAddress_Call[T]) RunAndReturn(run func() common.Address) *Withdrawal_GetAddress_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetAmount provides a mock function with given fields:
func (_m *Withdrawal[T]) GetAmount() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAmount")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// Withdrawal_GetAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAmount'
type Withdrawal_GetAmount_Call[T interface{}] struct {
	*mock.Call
}

// GetAmount is a helper method to define mock.On call
func (_e *Withdrawal_Expecter[T]) GetAmount() *Withdrawal_GetAmount_Call[T] {
	return &Withdrawal_GetAmount_Call[T]{Call: _e.mock.On("GetAmount")}
}

func (_c *Withdrawal_GetAmount_Call[T]) Run(run func()) *Withdrawal_GetAmount_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Withdrawal_GetAmount_Call[T]) Return(_a0 math.U64) *Withdrawal_GetAmount_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Withdrawal_GetAmount_Call[T]) RunAndReturn(run func() math.U64) *Withdrawal_GetAmount_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetIndex provides a mock function with given fields:
func (_m *Withdrawal[T]) GetIndex() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIndex")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// Withdrawal_GetIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndex'
type Withdrawal_GetIndex_Call[T interface{}] struct {
	*mock.Call
}

// GetIndex is a helper method to define mock.On call
func (_e *Withdrawal_Expecter[T]) GetIndex() *Withdrawal_GetIndex_Call[T] {
	return &Withdrawal_GetIndex_Call[T]{Call: _e.mock.On("GetIndex")}
}

func (_c *Withdrawal_GetIndex_Call[T]) Run(run func()) *Withdrawal_GetIndex_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Withdrawal_GetIndex_Call[T]) Return(_a0 math.U64) *Withdrawal_GetIndex_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Withdrawal_GetIndex_Call[T]) RunAndReturn(run func() math.U64) *Withdrawal_GetIndex_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetValidatorIndex provides a mock function with given fields:
func (_m *Withdrawal[T]) GetValidatorIndex() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorIndex")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// Withdrawal_GetValidatorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatorIndex'
type Withdrawal_GetValidatorIndex_Call[T interface{}] struct {
	*mock.Call
}

// GetValidatorIndex is a helper method to define mock.On call
func (_e *Withdrawal_Expecter[T]) GetValidatorIndex() *Withdrawal_GetValidatorIndex_Call[T] {
	return &Withdrawal_GetValidatorIndex_Call[T]{Call: _e.mock.On("GetValidatorIndex")}
}

func (_c *Withdrawal_GetValidatorIndex_Call[T]) Run(run func()) *Withdrawal_GetValidatorIndex_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Withdrawal_GetValidatorIndex_Call[T]) Return(_a0 math.U64) *Withdrawal_GetValidatorIndex_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Withdrawal_GetValidatorIndex_Call[T]) RunAndReturn(run func() math.U64) *Withdrawal_GetValidatorIndex_Call[T] {
	_c.Call.Return(run)
	return _c
}

// IsFixed provides a mock function with given fields:
func (_m *Withdrawal[T]) IsFixed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsFixed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Withdrawal_IsFixed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFixed'
type Withdrawal_IsFixed_Call[T interface{}] struct {
	*mock.Call
}

// IsFixed is a helper method to define mock.On call
func (_e *Withdrawal_Expecter[T]) IsFixed() *Withdrawal_IsFixed_Call[T] {
	return &Withdrawal_IsFixed_Call[T]{Call: _e.mock.On("IsFixed")}
}

func (_c *Withdrawal_IsFixed_Call[T]) Run(run func()) *Withdrawal_IsFixed_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Withdrawal_IsFixed_Call[T]) Return(_a0 bool) *Withdrawal_IsFixed_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Withdrawal_IsFixed_Call[T]) RunAndReturn(run func() bool) *Withdrawal_IsFixed_Call[T] {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: index, validator, address, amount
func (_m *Withdrawal[T]) New(index math.U64, validator math.U64, address common.Address, amount math.U64) T {
	ret := _m.Called(index, validator, address, amount)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func(math.U64, math.U64, common.Address, math.U64) T); ok {
		r0 = rf(index, validator, address, amount)
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// Withdrawal_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type Withdrawal_New_Call[T interface{}] struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - index math.U64
//   - validator math.U64
//   - address common.Address
//   - amount math.U64
func (_e *Withdrawal_Expecter[T]) New(index interface{}, validator interface{}, address interface{}, amount interface{}) *Withdrawal_New_Call[T] {
	return &Withdrawal_New_Call[T]{Call: _e.mock.On("New", index, validator, address, amount)}
}

func (_c *Withdrawal_New_Call[T]) Run(run func(index math.U64, validator math.U64, address common.Address, amount math.U64)) *Withdrawal_New_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(math.U64), args[2].(common.Address), args[3].(math.U64))
	})
	return _c
}

func (_c *Withdrawal_New_Call[T]) Return(_a0 T) *Withdrawal_New_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Withdrawal_New_Call[T]) RunAndReturn(run func(math.U64, math.U64, common.Address, math.U64) T) *Withdrawal_New_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *Withdrawal[T]) Type() types.Type {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 types.Type
	if rf, ok := ret.Get(0).(func() types.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.Type)
	}

	return r0
}

// Withdrawal_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type Withdrawal_Type_Call[T interface{}] struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *Withdrawal_Expecter[T]) Type() *Withdrawal_Type_Call[T] {
	return &Withdrawal_Type_Call[T]{Call: _e.mock.On("Type")}
}

func (_c *Withdrawal_Type_Call[T]) Run(run func()) *Withdrawal_Type_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Withdrawal_Type_Call[T]) Return(_a0 types.Type) *Withdrawal_Type_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Withdrawal_Type_Call[T]) RunAndReturn(run func() types.Type) *Withdrawal_Type_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewWithdrawal creates a new instance of Withdrawal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithdrawal[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Withdrawal[T] {
	mock := &Withdrawal[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
