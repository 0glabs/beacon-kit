// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	engine_primitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"

	engineprimitives "github.com/berachain/beacon-kit/mod/interfaces/pkg/engine-primitives"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/mod/interfaces/pkg/consensus-types"
)

// Engine is an autogenerated mock type for the Engine type
type Engine[BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT engineprimitives.Withdrawal[WithdrawalT]] struct {
	mock.Mock
}

type Engine_Expecter[BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT engineprimitives.Withdrawal[WithdrawalT]] struct {
	mock *mock.Mock
}

func (_m *Engine[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) EXPECT() *Engine_Expecter[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	return &Engine_Expecter[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{mock: &_m.Mock}
}

// GetPayload provides a mock function with given fields: ctx, req
func (_m *Engine[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) GetPayload(ctx context.Context, req *engine_primitives.GetPayloadRequest[PayloadIDT]) (ExecutionPayloadEnvelopeT, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPayload")
	}

	var r0 ExecutionPayloadEnvelopeT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *engine_primitives.GetPayloadRequest[PayloadIDT]) (ExecutionPayloadEnvelopeT, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *engine_primitives.GetPayloadRequest[PayloadIDT]) ExecutionPayloadEnvelopeT); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(ExecutionPayloadEnvelopeT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *engine_primitives.GetPayloadRequest[PayloadIDT]) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Engine_GetPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayload'
type Engine_GetPayload_Call[BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT engineprimitives.Withdrawal[WithdrawalT]] struct {
	*mock.Call
}

// GetPayload is a helper method to define mock.On call
//   - ctx context.Context
//   - req *engine_primitives.GetPayloadRequest[PayloadIDT]
func (_e *Engine_Expecter[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) GetPayload(ctx interface{}, req interface{}) *Engine_GetPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	return &Engine_GetPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{Call: _e.mock.On("GetPayload", ctx, req)}
}

func (_c *Engine_GetPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Run(run func(ctx context.Context, req *engine_primitives.GetPayloadRequest[PayloadIDT])) *Engine_GetPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*engine_primitives.GetPayloadRequest[PayloadIDT]))
	})
	return _c
}

func (_c *Engine_GetPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Return(_a0 ExecutionPayloadEnvelopeT, _a1 error) *Engine_GetPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Engine_GetPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RunAndReturn(run func(context.Context, *engine_primitives.GetPayloadRequest[PayloadIDT]) (ExecutionPayloadEnvelopeT, error)) *Engine_GetPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// NotifyForkchoiceUpdate provides a mock function with given fields: ctx, req
func (_m *Engine[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) NotifyForkchoiceUpdate(ctx context.Context, req *engine_primitives.ForkchoiceUpdateRequest[PayloadAttributesT]) (*PayloadIDT, *common.Hash, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NotifyForkchoiceUpdate")
	}

	var r0 *PayloadIDT
	var r1 *common.Hash
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *engine_primitives.ForkchoiceUpdateRequest[PayloadAttributesT]) (*PayloadIDT, *common.Hash, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *engine_primitives.ForkchoiceUpdateRequest[PayloadAttributesT]) *PayloadIDT); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PayloadIDT)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *engine_primitives.ForkchoiceUpdateRequest[PayloadAttributesT]) *common.Hash); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*common.Hash)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *engine_primitives.ForkchoiceUpdateRequest[PayloadAttributesT]) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Engine_NotifyForkchoiceUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyForkchoiceUpdate'
type Engine_NotifyForkchoiceUpdate_Call[BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT engineprimitives.Withdrawal[WithdrawalT]] struct {
	*mock.Call
}

// NotifyForkchoiceUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - req *engine_primitives.ForkchoiceUpdateRequest[PayloadAttributesT]
func (_e *Engine_Expecter[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) NotifyForkchoiceUpdate(ctx interface{}, req interface{}) *Engine_NotifyForkchoiceUpdate_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	return &Engine_NotifyForkchoiceUpdate_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{Call: _e.mock.On("NotifyForkchoiceUpdate", ctx, req)}
}

func (_c *Engine_NotifyForkchoiceUpdate_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Run(run func(ctx context.Context, req *engine_primitives.ForkchoiceUpdateRequest[PayloadAttributesT])) *Engine_NotifyForkchoiceUpdate_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*engine_primitives.ForkchoiceUpdateRequest[PayloadAttributesT]))
	})
	return _c
}

func (_c *Engine_NotifyForkchoiceUpdate_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Return(_a0 *PayloadIDT, _a1 *common.Hash, _a2 error) *Engine_NotifyForkchoiceUpdate_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Engine_NotifyForkchoiceUpdate_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RunAndReturn(run func(context.Context, *engine_primitives.ForkchoiceUpdateRequest[PayloadAttributesT]) (*PayloadIDT, *common.Hash, error)) *Engine_NotifyForkchoiceUpdate_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// VerifyAndNotifyNewPayload provides a mock function with given fields: ctx, req
func (_m *Engine[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) VerifyAndNotifyNewPayload(ctx context.Context, req *engine_primitives.NewPayloadRequest[ExecutionPayloadT, WithdrawalT]) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAndNotifyNewPayload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *engine_primitives.NewPayloadRequest[ExecutionPayloadT, WithdrawalT]) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Engine_VerifyAndNotifyNewPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAndNotifyNewPayload'
type Engine_VerifyAndNotifyNewPayload_Call[BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT engineprimitives.Withdrawal[WithdrawalT]] struct {
	*mock.Call
}

// VerifyAndNotifyNewPayload is a helper method to define mock.On call
//   - ctx context.Context
//   - req *engine_primitives.NewPayloadRequest[ExecutionPayloadT,WithdrawalT]
func (_e *Engine_Expecter[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) VerifyAndNotifyNewPayload(ctx interface{}, req interface{}) *Engine_VerifyAndNotifyNewPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	return &Engine_VerifyAndNotifyNewPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{Call: _e.mock.On("VerifyAndNotifyNewPayload", ctx, req)}
}

func (_c *Engine_VerifyAndNotifyNewPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Run(run func(ctx context.Context, req *engine_primitives.NewPayloadRequest[ExecutionPayloadT, WithdrawalT])) *Engine_VerifyAndNotifyNewPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*engine_primitives.NewPayloadRequest[ExecutionPayloadT, WithdrawalT]))
	})
	return _c
}

func (_c *Engine_VerifyAndNotifyNewPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) Return(_a0 error) *Engine_VerifyAndNotifyNewPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Engine_VerifyAndNotifyNewPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]) RunAndReturn(run func(context.Context, *engine_primitives.NewPayloadRequest[ExecutionPayloadT, WithdrawalT]) error) *Engine_VerifyAndNotifyNewPayload_Call[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	_c.Call.Return(run)
	return _c
}

// NewEngine creates a new instance of Engine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEngine[BlobsBundleT interface{}, ExecutionPayloadT types.ExecutionPayload[ExecutionPayloadT, ExecutionPayloadHeaderT, WithdrawalT], ExecutionPayloadEnvelopeT engineprimitives.ExecutionPayloadEnvelope[ExecutionPayloadEnvelopeT, BlobsBundleT, ExecutionPayloadT], ExecutionPayloadHeaderT types.ExecutionPayloadHeader[ExecutionPayloadHeaderT], PayloadAttributesT engineprimitives.PayloadAttributes[PayloadAttributesT, WithdrawalT], PayloadIDT interface{ ~[8]byte }, WithdrawalT engineprimitives.Withdrawal[WithdrawalT]](t interface {
	mock.TestingT
	Cleanup(func())
}) *Engine[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT] {
	mock := &Engine[BlobsBundleT, ExecutionPayloadT, ExecutionPayloadEnvelopeT, ExecutionPayloadHeaderT, PayloadAttributesT, PayloadIDT, WithdrawalT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
