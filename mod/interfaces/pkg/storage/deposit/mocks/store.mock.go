// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Store is an autogenerated mock type for the Store type
type Store[DepositT interface{}] struct {
	mock.Mock
}

type Store_Expecter[DepositT interface{}] struct {
	mock *mock.Mock
}

func (_m *Store[DepositT]) EXPECT() *Store_Expecter[DepositT] {
	return &Store_Expecter[DepositT]{mock: &_m.Mock}
}

// EnqueueDeposit provides a mock function with given fields: _a0
func (_m *Store[DepositT]) EnqueueDeposit(_a0 DepositT) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueDeposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(DepositT) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_EnqueueDeposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueDeposit'
type Store_EnqueueDeposit_Call[DepositT interface{}] struct {
	*mock.Call
}

// EnqueueDeposit is a helper method to define mock.On call
//   - _a0 DepositT
func (_e *Store_Expecter[DepositT]) EnqueueDeposit(_a0 interface{}) *Store_EnqueueDeposit_Call[DepositT] {
	return &Store_EnqueueDeposit_Call[DepositT]{Call: _e.mock.On("EnqueueDeposit", _a0)}
}

func (_c *Store_EnqueueDeposit_Call[DepositT]) Run(run func(_a0 DepositT)) *Store_EnqueueDeposit_Call[DepositT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DepositT))
	})
	return _c
}

func (_c *Store_EnqueueDeposit_Call[DepositT]) Return(_a0 error) *Store_EnqueueDeposit_Call[DepositT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_EnqueueDeposit_Call[DepositT]) RunAndReturn(run func(DepositT) error) *Store_EnqueueDeposit_Call[DepositT] {
	_c.Call.Return(run)
	return _c
}

// EnqueueDeposits provides a mock function with given fields: deposits
func (_m *Store[DepositT]) EnqueueDeposits(deposits []DepositT) error {
	ret := _m.Called(deposits)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueDeposits")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]DepositT) error); ok {
		r0 = rf(deposits)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_EnqueueDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueDeposits'
type Store_EnqueueDeposits_Call[DepositT interface{}] struct {
	*mock.Call
}

// EnqueueDeposits is a helper method to define mock.On call
//   - deposits []DepositT
func (_e *Store_Expecter[DepositT]) EnqueueDeposits(deposits interface{}) *Store_EnqueueDeposits_Call[DepositT] {
	return &Store_EnqueueDeposits_Call[DepositT]{Call: _e.mock.On("EnqueueDeposits", deposits)}
}

func (_c *Store_EnqueueDeposits_Call[DepositT]) Run(run func(deposits []DepositT)) *Store_EnqueueDeposits_Call[DepositT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]DepositT))
	})
	return _c
}

func (_c *Store_EnqueueDeposits_Call[DepositT]) Return(_a0 error) *Store_EnqueueDeposits_Call[DepositT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_EnqueueDeposits_Call[DepositT]) RunAndReturn(run func([]DepositT) error) *Store_EnqueueDeposits_Call[DepositT] {
	_c.Call.Return(run)
	return _c
}

// GetDepositsByIndex provides a mock function with given fields: startIndex, numView
func (_m *Store[DepositT]) GetDepositsByIndex(startIndex uint64, numView uint64) ([]DepositT, error) {
	ret := _m.Called(startIndex, numView)

	if len(ret) == 0 {
		panic("no return value specified for GetDepositsByIndex")
	}

	var r0 []DepositT
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) ([]DepositT, error)); ok {
		return rf(startIndex, numView)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) []DepositT); ok {
		r0 = rf(startIndex, numView)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DepositT)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(startIndex, numView)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetDepositsByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDepositsByIndex'
type Store_GetDepositsByIndex_Call[DepositT interface{}] struct {
	*mock.Call
}

// GetDepositsByIndex is a helper method to define mock.On call
//   - startIndex uint64
//   - numView uint64
func (_e *Store_Expecter[DepositT]) GetDepositsByIndex(startIndex interface{}, numView interface{}) *Store_GetDepositsByIndex_Call[DepositT] {
	return &Store_GetDepositsByIndex_Call[DepositT]{Call: _e.mock.On("GetDepositsByIndex", startIndex, numView)}
}

func (_c *Store_GetDepositsByIndex_Call[DepositT]) Run(run func(startIndex uint64, numView uint64)) *Store_GetDepositsByIndex_Call[DepositT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *Store_GetDepositsByIndex_Call[DepositT]) Return(_a0 []DepositT, _a1 error) *Store_GetDepositsByIndex_Call[DepositT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetDepositsByIndex_Call[DepositT]) RunAndReturn(run func(uint64, uint64) ([]DepositT, error)) *Store_GetDepositsByIndex_Call[DepositT] {
	_c.Call.Return(run)
	return _c
}

// Prune provides a mock function with given fields: start, end
func (_m *Store[DepositT]) Prune(start uint64, end uint64) error {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for Prune")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_Prune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prune'
type Store_Prune_Call[DepositT interface{}] struct {
	*mock.Call
}

// Prune is a helper method to define mock.On call
//   - start uint64
//   - end uint64
func (_e *Store_Expecter[DepositT]) Prune(start interface{}, end interface{}) *Store_Prune_Call[DepositT] {
	return &Store_Prune_Call[DepositT]{Call: _e.mock.On("Prune", start, end)}
}

func (_c *Store_Prune_Call[DepositT]) Run(run func(start uint64, end uint64)) *Store_Prune_Call[DepositT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *Store_Prune_Call[DepositT]) Return(_a0 error) *Store_Prune_Call[DepositT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_Prune_Call[DepositT]) RunAndReturn(run func(uint64, uint64) error) *Store_Prune_Call[DepositT] {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore[DepositT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Store[DepositT] {
	mock := &Store[DepositT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
