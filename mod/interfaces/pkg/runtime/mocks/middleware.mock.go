// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"
	mock "github.com/stretchr/testify/mock"

	proto "github.com/cosmos/gogoproto/proto"

	transition "github.com/berachain/beacon-kit/mod/primitives/pkg/transition"
)

// Middleware is an autogenerated mock type for the Middleware type
type Middleware struct {
	mock.Mock
}

type Middleware_Expecter struct {
	mock *mock.Mock
}

func (_m *Middleware) EXPECT() *Middleware_Expecter {
	return &Middleware_Expecter{mock: &_m.Mock}
}

// EndBlock provides a mock function with given fields: ctx
func (_m *Middleware) EndBlock(ctx context.Context) (transition.ValidatorUpdates, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for EndBlock")
	}

	var r0 transition.ValidatorUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (transition.ValidatorUpdates, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) transition.ValidatorUpdates); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transition.ValidatorUpdates)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Middleware_EndBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndBlock'
type Middleware_EndBlock_Call struct {
	*mock.Call
}

// EndBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Middleware_Expecter) EndBlock(ctx interface{}) *Middleware_EndBlock_Call {
	return &Middleware_EndBlock_Call{Call: _e.mock.On("EndBlock", ctx)}
}

func (_c *Middleware_EndBlock_Call) Run(run func(ctx context.Context)) *Middleware_EndBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Middleware_EndBlock_Call) Return(_a0 transition.ValidatorUpdates, _a1 error) *Middleware_EndBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Middleware_EndBlock_Call) RunAndReturn(run func(context.Context) (transition.ValidatorUpdates, error)) *Middleware_EndBlock_Call {
	_c.Call.Return(run)
	return _c
}

// InitGenesis provides a mock function with given fields: ctx, bz
func (_m *Middleware) InitGenesis(ctx context.Context, bz []byte) (transition.ValidatorUpdates, error) {
	ret := _m.Called(ctx, bz)

	if len(ret) == 0 {
		panic("no return value specified for InitGenesis")
	}

	var r0 transition.ValidatorUpdates
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (transition.ValidatorUpdates, error)); ok {
		return rf(ctx, bz)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) transition.ValidatorUpdates); ok {
		r0 = rf(ctx, bz)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transition.ValidatorUpdates)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, bz)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Middleware_InitGenesis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitGenesis'
type Middleware_InitGenesis_Call struct {
	*mock.Call
}

// InitGenesis is a helper method to define mock.On call
//   - ctx context.Context
//   - bz []byte
func (_e *Middleware_Expecter) InitGenesis(ctx interface{}, bz interface{}) *Middleware_InitGenesis_Call {
	return &Middleware_InitGenesis_Call{Call: _e.mock.On("InitGenesis", ctx, bz)}
}

func (_c *Middleware_InitGenesis_Call) Run(run func(ctx context.Context, bz []byte)) *Middleware_InitGenesis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *Middleware_InitGenesis_Call) Return(_a0 transition.ValidatorUpdates, _a1 error) *Middleware_InitGenesis_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Middleware_InitGenesis_Call) RunAndReturn(run func(context.Context, []byte) (transition.ValidatorUpdates, error)) *Middleware_InitGenesis_Call {
	_c.Call.Return(run)
	return _c
}

// PreBlock provides a mock function with given fields: ctx, req
func (_m *Middleware) PreBlock(ctx context.Context, req proto.Message) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PreBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, proto.Message) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Middleware_PreBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreBlock'
type Middleware_PreBlock_Call struct {
	*mock.Call
}

// PreBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - req proto.Message
func (_e *Middleware_Expecter) PreBlock(ctx interface{}, req interface{}) *Middleware_PreBlock_Call {
	return &Middleware_PreBlock_Call{Call: _e.mock.On("PreBlock", ctx, req)}
}

func (_c *Middleware_PreBlock_Call) Run(run func(ctx context.Context, req proto.Message)) *Middleware_PreBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(proto.Message))
	})
	return _c
}

func (_c *Middleware_PreBlock_Call) Return(_a0 error) *Middleware_PreBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Middleware_PreBlock_Call) RunAndReturn(run func(context.Context, proto.Message) error) *Middleware_PreBlock_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareProposal provides a mock function with given fields: ctx, slot
func (_m *Middleware) PrepareProposal(ctx context.Context, slot math.U64) ([]byte, []byte, error) {
	ret := _m.Called(ctx, slot)

	if len(ret) == 0 {
		panic("no return value specified for PrepareProposal")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, math.U64) ([]byte, []byte, error)); ok {
		return rf(ctx, slot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, math.U64) []byte); ok {
		r0 = rf(ctx, slot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, math.U64) []byte); ok {
		r1 = rf(ctx, slot)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, math.U64) error); ok {
		r2 = rf(ctx, slot)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Middleware_PrepareProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareProposal'
type Middleware_PrepareProposal_Call struct {
	*mock.Call
}

// PrepareProposal is a helper method to define mock.On call
//   - ctx context.Context
//   - slot math.U64
func (_e *Middleware_Expecter) PrepareProposal(ctx interface{}, slot interface{}) *Middleware_PrepareProposal_Call {
	return &Middleware_PrepareProposal_Call{Call: _e.mock.On("PrepareProposal", ctx, slot)}
}

func (_c *Middleware_PrepareProposal_Call) Run(run func(ctx context.Context, slot math.U64)) *Middleware_PrepareProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(math.U64))
	})
	return _c
}

func (_c *Middleware_PrepareProposal_Call) Return(_a0 []byte, _a1 []byte, _a2 error) *Middleware_PrepareProposal_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Middleware_PrepareProposal_Call) RunAndReturn(run func(context.Context, math.U64) ([]byte, []byte, error)) *Middleware_PrepareProposal_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessProposal provides a mock function with given fields: ctx, req
func (_m *Middleware) ProcessProposal(ctx context.Context, req proto.Message) (proto.Message, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProcessProposal")
	}

	var r0 proto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, proto.Message) (proto.Message, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, proto.Message) proto.Message); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, proto.Message) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Middleware_ProcessProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessProposal'
type Middleware_ProcessProposal_Call struct {
	*mock.Call
}

// ProcessProposal is a helper method to define mock.On call
//   - ctx context.Context
//   - req proto.Message
func (_e *Middleware_Expecter) ProcessProposal(ctx interface{}, req interface{}) *Middleware_ProcessProposal_Call {
	return &Middleware_ProcessProposal_Call{Call: _e.mock.On("ProcessProposal", ctx, req)}
}

func (_c *Middleware_ProcessProposal_Call) Run(run func(ctx context.Context, req proto.Message)) *Middleware_ProcessProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(proto.Message))
	})
	return _c
}

func (_c *Middleware_ProcessProposal_Call) Return(_a0 proto.Message, _a1 error) *Middleware_ProcessProposal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Middleware_ProcessProposal_Call) RunAndReturn(run func(context.Context, proto.Message) (proto.Message, error)) *Middleware_ProcessProposal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMiddleware creates a new instance of Middleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *Middleware {
	mock := &Middleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
