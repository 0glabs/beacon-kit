// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ABCIRequest is an autogenerated mock type for the ABCIRequest type
type ABCIRequest struct {
	mock.Mock
}

type ABCIRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *ABCIRequest) EXPECT() *ABCIRequest_Expecter {
	return &ABCIRequest_Expecter{mock: &_m.Mock}
}

// GetHeight provides a mock function with given fields:
func (_m *ABCIRequest) GetHeight() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeight")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ABCIRequest_GetHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeight'
type ABCIRequest_GetHeight_Call struct {
	*mock.Call
}

// GetHeight is a helper method to define mock.On call
func (_e *ABCIRequest_Expecter) GetHeight() *ABCIRequest_GetHeight_Call {
	return &ABCIRequest_GetHeight_Call{Call: _e.mock.On("GetHeight")}
}

func (_c *ABCIRequest_GetHeight_Call) Run(run func()) *ABCIRequest_GetHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ABCIRequest_GetHeight_Call) Return(_a0 int64) *ABCIRequest_GetHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ABCIRequest_GetHeight_Call) RunAndReturn(run func() int64) *ABCIRequest_GetHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetTime provides a mock function with given fields:
func (_m *ABCIRequest) GetTime() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// ABCIRequest_GetTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTime'
type ABCIRequest_GetTime_Call struct {
	*mock.Call
}

// GetTime is a helper method to define mock.On call
func (_e *ABCIRequest_Expecter) GetTime() *ABCIRequest_GetTime_Call {
	return &ABCIRequest_GetTime_Call{Call: _e.mock.On("GetTime")}
}

func (_c *ABCIRequest_GetTime_Call) Run(run func()) *ABCIRequest_GetTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ABCIRequest_GetTime_Call) Return(_a0 time.Time) *ABCIRequest_GetTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ABCIRequest_GetTime_Call) RunAndReturn(run func() time.Time) *ABCIRequest_GetTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxs provides a mock function with given fields:
func (_m *ABCIRequest) GetTxs() [][]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTxs")
	}

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// ABCIRequest_GetTxs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxs'
type ABCIRequest_GetTxs_Call struct {
	*mock.Call
}

// GetTxs is a helper method to define mock.On call
func (_e *ABCIRequest_Expecter) GetTxs() *ABCIRequest_GetTxs_Call {
	return &ABCIRequest_GetTxs_Call{Call: _e.mock.On("GetTxs")}
}

func (_c *ABCIRequest_GetTxs_Call) Run(run func()) *ABCIRequest_GetTxs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ABCIRequest_GetTxs_Call) Return(_a0 [][]byte) *ABCIRequest_GetTxs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ABCIRequest_GetTxs_Call) RunAndReturn(run func() [][]byte) *ABCIRequest_GetTxs_Call {
	_c.Call.Return(run)
	return _c
}

// NewABCIRequest creates a new instance of ABCIRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewABCIRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *ABCIRequest {
	mock := &ABCIRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
