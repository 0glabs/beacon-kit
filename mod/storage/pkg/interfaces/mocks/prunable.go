// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Prunable is an autogenerated mock type for the Prunable type
type Prunable struct {
	mock.Mock
}

type Prunable_Expecter struct {
	mock *mock.Mock
}

func (_m *Prunable) EXPECT() *Prunable_Expecter {
	return &Prunable_Expecter{mock: &_m.Mock}
}

// DeleteRange provides a mock function with given fields: from, to
func (_m *Prunable) DeleteRange(from uint64, to uint64) error {
	ret := _m.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Prunable_DeleteRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRange'
type Prunable_DeleteRange_Call struct {
	*mock.Call
}

// DeleteRange is a helper method to define mock.On call
//   - from uint64
//   - to uint64
func (_e *Prunable_Expecter) DeleteRange(from interface{}, to interface{}) *Prunable_DeleteRange_Call {
	return &Prunable_DeleteRange_Call{Call: _e.mock.On("DeleteRange", from, to)}
}

func (_c *Prunable_DeleteRange_Call) Run(run func(from uint64, to uint64)) *Prunable_DeleteRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *Prunable_DeleteRange_Call) Return(_a0 error) *Prunable_DeleteRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Prunable_DeleteRange_Call) RunAndReturn(run func(uint64, uint64) error) *Prunable_DeleteRange_Call {
	_c.Call.Return(run)
	return _c
}

// NewPrunable creates a new instance of Prunable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrunable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Prunable {
	mock := &Prunable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
